<?xml version="1.0" standalone="yes"?>
<library-reference id="odtone_sap_library"><title>ODTONE SAP Library</title><header name="/home/carlos/Desktop/release/inc/odtone/sap/link.hpp"><namespace name="odtone"><namespace name="sap"><class name="link"><inherit access="public">odtone::sap::sap</inherit><description><para>Link SAP I/O Service.</para><para>This module handles the comunication between Link SAP and its local the MIHF. After being initialized, and in order to run this service, it must be invoked the run() method of the boost::asio::io_service associated. </para></description><method-group name="public member functions"><method name="async_send" cv=""><type>void</type><parameter name="msg"><paramtype>mih::message &amp;</paramtype><description><para>MIH message to send. </para></description></parameter><parameter name="h"><paramtype>const handler &amp;</paramtype><default>handler()</default><description><para>Response handler function. </para></description></parameter><description><para>Asynchronously send a MIH message to the local MIHF. After sending the message, the callback is called to report the success or failure in delivering the message to the local MIHF. This method retuns immediately.</para><para>
</para></description></method></method-group><constructor><parameter name="cfg"><paramtype>const mih::config &amp;</paramtype><description><para>Configuration parameters. </para></description></parameter><parameter name="io"><paramtype>boost::asio::io_service &amp;</paramtype><description><para>The io_service object that Link SAP I/O Service will use to dispatch handlers for any asynchronous operations performed on the socket. </para></description></parameter><parameter name="h"><paramtype>const default_handler &amp;</paramtype><description><para>Message processing handler. </para></description></parameter><description><para>Construct a Link SAP I/O Service. The defined callback is invoked when a request message is received The signature of the callback is: void(odtone::mih::message&amp;, const boost::system::error_code&amp;).</para><para>
</para></description></constructor><destructor><description><para>Destruct a Link SAP I/O Service. </para></description></destructor><method-group name="private member functions"><method name="recv_handler" cv=""><type>void</type><parameter name="buff"><paramtype>buffer&lt; uint8 &gt; &amp;</paramtype><description><para>Message byte buffer. </para></description></parameter><parameter name="rbytes"><paramtype>size_t</paramtype><description><para>Size of the message. </para></description></parameter><parameter name="ec"><paramtype>const boost::system::error_code &amp;</paramtype><description><para>Error code. </para></description></parameter><description><para>Received message callback. This function is executed to process the received messages. If this is a valid message, the message is dispatched to the handler defined by the user.</para><para>
</para></description></method><method name="send_handler" cv=""><type>void</type><parameter name="fm"><paramtype>mih::frame_vla &amp;</paramtype><description><para>MIH message sent. </para></description></parameter><parameter name="h"><paramtype>const handler &amp;</paramtype><description><para>Message handler. </para></description></parameter><parameter name="sbytes"><paramtype>size_t</paramtype><description><para>Size of the message. </para></description></parameter><parameter name="ec"><paramtype>const boost::system::error_code &amp;</paramtype><description><para>Error code. </para></description></parameter><description><para>Sent message handler. After sending the message, this function is called to report the success or failure in delivering the message to the local MIHF.</para><para>
</para></description></method></method-group></class><data-member name="kConf_Tec" specifiers="static"><type>const char *const</type></data-member><data-member name="kConf_Interface_Addr" specifiers="static"><type>const char *const</type></data-member><data-member name="kConf_Evt_List" specifiers="static"><type>const char *const</type></data-member><data-member name="kConf_Cmd_List" specifiers="static"><type>const char *const</type></data-member><data-member name="kConf_MIHF_Id" specifiers="static"><type>const char *const</type></data-member></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/sap/sap.hpp"><namespace name="odtone"><namespace name="sap"><class name="sap"><description><para>SAP I/O Service. This is the base This is the base class for all SAPs defined in the ODTONE. </para></description></class></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/sap/user.hpp"><namespace name="odtone"><namespace name="sap"><class name="user"><inherit access="public">odtone::sap::sap</inherit><description><para>MIH-User SAP I/O Service</para><para>This module handles the comunication between MIH-User SAP and its local the MIHF. After being initialized, and in order to run this service, it must be invoked the run() method of the boost::asio::io_service associated. </para></description><struct name="config"><description><para>MIH-User SAP configurations structure. </para></description><data-member name="id"><type>std::string</type><description><para>Identifier. </para></description></data-member><data-member name="port"><type>uint</type><description><para>Listening port. </para></description></data-member><data-member name="mihf_address"><type>ip_address</type><description><para>MIHF IP address. </para></description></data-member><data-member name="mihf_port"><type>uint</type><description><para>MIHF listening port. </para></description></data-member><data-member name="buffer_length"><type>size_t</type><description><para>Receive Buffer Length. </para></description></data-member><method-group name="public member functions"/><constructor/></struct><method-group name="public member functions"><method name="async_send" cv=""><type>void</type><template>
          <template-type-parameter name="CompletionHandler"/>
        </template><parameter name="pm"><paramtype>mih::message &amp;</paramtype><description><para>MIH message to send. </para></description></parameter><parameter name="h"><paramtype>CompletionHandler</paramtype><description><para>Response handler function. </para></description></parameter><description><para>Asynchronously send a MIH message to the local MIHF. After sending the message, the callback is called to report the success or failure in delivering the message to the local MIHF. This method retuns immediately.</para><para>
</para></description></method></method-group><constructor><parameter name="cfg"><paramtype>const mih::config &amp;</paramtype><description><para>Configuration parameters. </para></description></parameter><parameter name="io"><paramtype>boost::asio::io_service &amp;</paramtype><description><para>The io_service object that Link SAP I/O Service will use to dispatch handlers for any asynchronous operations performed on the socket. </para></description></parameter><parameter name="h"><paramtype>const handler &amp;</paramtype><description><para>Message processing handler. </para></description></parameter><description><para>Construct a MIH-User SAP I/O Service. The defined callback is invoked when a request message is received The signature of the callback is: void(odtone::mih::message&amp;, const boost::system::error_code&amp;).</para><para>
</para></description></constructor><constructor><parameter name="io"><paramtype>boost::asio::io_service &amp;</paramtype><description><para>The io_service object that Link SAP I/O Service will use to dispatch handlers for any asynchronous operations performed on the socket. </para></description></parameter><parameter name="h"><paramtype>const handler &amp;</paramtype><description><para>Message processing handler. </para></description></parameter><parameter name="cfg"><paramtype>const <classname>config</classname> &amp;</paramtype><default><classname alt="odtone::sap::user::config">config</classname>()</default><description><para>Configuration parameters. </para></description></parameter><description><para>Construct a MIH-User SAP I/O Service. The defined callback is invoked when a request message is received The signature of the callback is: void(odtone::mih::message&amp;, const boost::system::error_code&amp;).</para><para>
</para></description></constructor><destructor><description><para>Destruct a MIH-User SAP I/O Service. </para></description></destructor><method-group name="private member functions"><method name="async_send_" cv=""><type>void</type><parameter name="msg"><paramtype>mih::message &amp;</paramtype><description><para>MIH message to send. </para></description></parameter><parameter name="h"><paramtype>handler &amp;&amp;</paramtype><description><para>Response handler function. </para></description></parameter><description><para>Asynchronously send a MIH message to the local MIHF. After sending the message, the callback is called to report the success or failure in delivering the message to the local MIHF. This method retuns immediately.</para><para>
</para></description></method><method name="recv_handler" cv=""><type>void</type><parameter name="buff"><paramtype>buffer&lt; uint8 &gt; &amp;</paramtype><description><para>Message byte buffer. </para></description></parameter><parameter name="rbytes"><paramtype>size_t</paramtype><description><para>Size of the message. </para></description></parameter><parameter name="ec"><paramtype>const boost::system::error_code &amp;</paramtype><description><para>Error code. </para></description></parameter><description><para>Received message callback. This function is executed to process the received messages. If this is a valid message, the message is dispatched to the handler defined by the user.</para><para>
</para></description></method><method name="send_handler" cv=""><type>void</type><parameter name="fm"><paramtype>mih::frame_vla &amp;</paramtype><description><para>MIH message sent. </para></description></parameter><parameter name="h"><paramtype>handler &amp;</paramtype><description><para>Message handler. </para></description></parameter><parameter name="ec"><paramtype>const boost::system::error_code &amp;</paramtype><description><para>Error code. </para></description></parameter><description><para>Sent message handler. After sending the message, this function is called to report the success or failure in delivering the message to the local MIHF.</para><para>
</para></description></method><method name="get_handler" cv=""><type>void</type><parameter name="tid"><paramtype>uint</paramtype><description><para>Transaction ID of the message. </para></description></parameter><parameter name="h"><paramtype>handler &amp;</paramtype><description><para>Reference to the message handler. </para></description></parameter><description><para>Get the message handler function of the message.</para><para>
</para></description></method></method-group></class><data-member name="kConf_File" specifiers="static"><type>const char *const</type></data-member><data-member name="kConf_Port" specifiers="static"><type>const char *const</type></data-member><data-member name="kConf_Receive_Buffer_Len" specifiers="static"><type>const char *const</type></data-member><data-member name="kConf_MIH_SAP_id" specifiers="static"><type>const char *const</type></data-member><data-member name="kConf_MIH_SAP_dest" specifiers="static"><type>const char *const</type></data-member><data-member name="kConf_MIHF_Ip" specifiers="static"><type>const char *const</type></data-member><data-member name="kConf_MIHF_Local_Port" specifiers="static"><type>const char *const</type></data-member></namespace></namespace></header></library-reference>
