<?xml version="1.0" standalone="yes"?>
<library-reference id="odtone_mih_library"><title>ODTONE MIH Library</title><header name="/home/carlos/Desktop/release/inc/odtone/mih/archive.hpp"><namespace name="odtone"><namespace name="mih"><struct name="iarchive_error"><description><para>iarchive error exception. </para></description></struct><struct name="iarchive_eof_error"><inherit access="public">odtone::mih::iarchive_error</inherit><description><para>iarchive end of file error exception. </para></description><method-group name="public member functions"/><constructor><description><para>Construct an iarchive end of file error exception. </para></description></constructor></struct><class name="archive"><description><para>Provides serialization/deserialization for the message payload. </para></description><typedef name="const_iterator"><type>std::vector&lt; uint8 &gt;::const_iterator</type></typedef><method-group name="public member functions"><method name="clear" cv=""><type>void</type><description><para>Clear the contents of the archive. Its size and actual position is set to 0 (zero). </para></description></method><method name="swap" cv=""><type>void</type><parameter name="buffer"><paramtype>std::vector&lt; uint8 &gt; &amp;</paramtype><description><para>A vector providing the elements to be swapped. </para></description></parameter><description><para>Exchanges the content of the archive by the content of buffer, which can have different sizes. All iterators, references and pointers remain valid for the swapped vectors.</para><para>
</para></description></method><method name="buffer" cv=""><type>void</type><parameter name="buf"><paramtype>const uint8 *</paramtype><description><para>The elements to be copied to the archive. </para></description></parameter><parameter name="len"><paramtype>size_t</paramtype><description><para>The number of elements to be copied. </para></description></parameter><description><para>Fills archive's contents.</para><para>
</para></description></method><method name="append" cv=""><type>void</type><template>
          <template-type-parameter name="InputIteratorT"/>
        </template><parameter name="begin"><paramtype>InputIteratorT</paramtype><description><para>The position of the first element to be copied. </para></description></parameter><parameter name="end"><paramtype>InputIteratorT</paramtype><description><para>The position of the last element to be copied. </para></description></parameter><description><para>Inserts an element, a number of elements or a range of elements into the archive at a specified position.</para><para>
</para></description></method><method name="begin" cv="const"><type>const_iterator</type><description><para>A random-access iterator addressing the first element in the archive or to the location succeeding an empty archive. The iterator should always be compared with vector::end to ensure it is valid.</para><para>
</para></description><returns><para>A random-access iterator to the first element in the container. </para></returns></method><method name="end" cv="const"><type>const_iterator</type><description><para>A random-access iterator to the end of the archive object. If the archive is empty, vector::end == vector::begin.</para><para>
</para></description><returns><para>A random-access iterator that points just beyond the end of the archive. </para></returns></method><method name="buffer" cv=""><type>std::vector&lt; uint8 &gt; &amp;</type><description><para>Get archive's contents.</para><para>
</para></description><returns><para>The archive's contents. </para></returns></method><method name="input" cv=""><type><classname>iarchive</classname></type><description><para>Get the corresponding input archive.</para><para>
</para></description><returns><para>The input archive. </para></returns></method><method name="output" cv=""><type><classname>oarchive</classname></type><description><para>Get the corresponding output archive.</para><para>
</para></description><returns><para>The output archive. </para></returns></method><method name="position" cv=""><type>void</type><parameter name="pos"><paramtype>uint</paramtype><description><para>The new position in the archive where to point. </para></description></parameter><description><para>Point to a new position in the archive.</para><para>
</para></description></method><method name="position" cv="const"><type>uint</type><description><para>Get the current position in the archive.</para><para>
</para></description><returns><para>The current position in the archive. </para></returns></method></method-group><constructor><description><para>Construct an archive. </para></description></constructor><destructor><description><para>Destruct an archive. </para></description></destructor></class><class name="iarchive"><description><para>The MIH types support deserialization for the input archive. This particular archive does not include the TLV field, which is necessary to support the definition of new sequence types from existing MIH types. </para></description><typedef name="iarchive_type"><type><classname>iarchive</classname></type></typedef><typedef name="const_iterator"><type>std::vector&lt; uint8 &gt;::const_iterator</type></typedef><method-group name="public member functions"><method name="reset" cv=""><type>void</type><parameter name="ar"><paramtype><classname>archive</classname> &amp;</paramtype><description><para>The archive from where extract the data. </para></description></parameter><description><para>Overwrites the current data.</para><para>
</para></description></method><method name="position" cv=""><type>void</type><parameter name="pos"><paramtype>uint</paramtype><description><para>The new position to point in the input archive. </para></description></parameter><description><para>Point to a new position in the input archive.</para><para>
</para></description></method><method name="position" cv="const"><type>uint</type><description><para>Get the current position in the input archive.</para><para>
</para></description><returns><para>The current position in the input archive. </para></returns></method><method name="length" cv="const"><type>uint</type><description><para>Get the length of the input archive.</para><para>
</para></description><returns><para>The length of the input archive. </para></returns></method><method name="advance" cv=""><type>void</type><parameter name="pos"><paramtype>uint</paramtype><description><para>The number of positions to advance. </para></description></parameter><description><para>Advance the position in the input archive.</para><para>
</para></description></method><method name="begin" cv="const"><type>const_iterator</type><description><para>A random-access iterator addressing the first element in the input archive or to the location succeeding an empty archive. The iterator should always be compared with vector::end to ensure it is valid.</para><para>
</para></description><returns><para>Returns a random-access iterator to the first element in the input archive. </para></returns></method><method name="current" cv="const"><type>const_iterator</type><description><para>A random-access iterator addressing the current element in the input archive.</para><para>
</para></description><returns><para>A random-access iterator that points just beyond the end of the archive. </para></returns></method><method name="end" cv="const"><type>const_iterator</type><description><para>A random-access iterator to the end of the input archive object. If the archive is empty, vector::end == vector::begin.</para><para>
</para></description><returns><para>A random-access iterator that points just beyond the end of the input archive. </para></returns></method><method name="list_length" cv=""><type>uint</type><description><para>Get the size of a list of a particular data type.</para><para>
</para></description><returns><para>The size of a list of a particular data type. </para></returns></method><method name="operator&amp;" cv=""><type><classname>iarchive</classname> &amp;</type><parameter name="val"><paramtype>bool &amp;</paramtype><description><para>Reference to where save the value. </para></description></parameter><description><para>Get a boolean type value from the current position in the input archive.</para><para>

</para></description><returns><para>The updated input archive. </para></returns></method><method name="operator&amp;" cv=""><type><classname>iarchive</classname> &amp;</type><parameter name="val"><paramtype>uint8 &amp;</paramtype><description><para>Reference to where save the value. </para></description></parameter><description><para>Get a odtone::uint8 type value from the current position in the input archive.</para><para>

</para></description><returns><para>The updated input archive. </para></returns></method><method name="operator&amp;" cv=""><type><classname>iarchive</classname> &amp;</type><parameter name="val"><paramtype>uint16 &amp;</paramtype><description><para>Reference to where save the value. </para></description></parameter><description><para>Get a odtone::uint16 type value from the current position in the input archive.</para><para>

</para></description><returns><para>The updated input archive. </para></returns></method><method name="operator&amp;" cv=""><type><classname>iarchive</classname> &amp;</type><parameter name="val"><paramtype>uint32 &amp;</paramtype><description><para>Reference to where save the value. </para></description></parameter><description><para>Get a odtone::uint32 type value from the current position in the input archive.</para><para>

</para></description><returns><para>The updated input archive. </para></returns></method><method name="operator&amp;" cv=""><type><classname>iarchive</classname> &amp;</type><parameter name="val"><paramtype>uint64 &amp;</paramtype><description><para>Reference to where save the value. </para></description></parameter><description><para>Get a odtone::uint64 type value from the current position in the input archive.</para><para>

</para></description><returns><para>The updated input archive. </para></returns></method><method name="operator&amp;" cv=""><type><classname>iarchive</classname> &amp;</type><parameter name="val"><paramtype>sint8 &amp;</paramtype><description><para>Reference to where save the value. </para></description></parameter><description><para>Get a odtone::sint8 type value from the current position in the input archive.</para><para>

</para></description><returns><para>The updated input archive. </para></returns></method><method name="operator&amp;" cv=""><type><classname>iarchive</classname> &amp;</type><parameter name="val"><paramtype>sint16 &amp;</paramtype><description><para>Reference to where save the value. </para></description></parameter><description><para>Get a odtone::sint16 type value from the current position in the input archive.</para><para>

</para></description><returns><para>The updated input archive. </para></returns></method><method name="operator&amp;" cv=""><type><classname>iarchive</classname> &amp;</type><parameter name="val"><paramtype>sint32 &amp;</paramtype><description><para>Reference to where save the value. </para></description></parameter><description><para>Get a odtone::sint32 type value from the current position in the input archive.</para><para>

</para></description><returns><para>The updated input archive. </para></returns></method><method name="operator&amp;" cv=""><type><classname>iarchive</classname> &amp;</type><parameter name="val"><paramtype>sint64 &amp;</paramtype><description><para>Reference to where save the value. </para></description></parameter><description><para>Get a odtone::sint64 type value from the current position in the input archive.</para><para>

</para></description><returns><para>The updated input archive. </para></returns></method><method name="operator&amp;" cv=""><type><classname>iarchive</classname> &amp;</type><parameter name="val"><paramtype>octet_string &amp;</paramtype><description><para>Reference to where save the value. </para></description></parameter><description><para>Get a odtone::mih::octet_string type value from the current position in the input archive.</para><para>

</para></description><returns><para>The updated input archive. </para></returns></method><method name="operator&amp;" cv=""><type><classname>iarchive</classname> &amp;</type><parameter name="buf"><paramtype>std::vector&lt; uint8 &gt; &amp;</paramtype><description><para>Reference to where save the value. </para></description></parameter><description><para>Get a list of a particular type value from the current position in the input archive.</para><para>

</para></description><returns><para>The updated input archive. </para></returns></method></method-group><constructor><parameter name="ar"><paramtype><classname>archive</classname> &amp;</paramtype><description><para>The archive from where extract the data. </para></description></parameter><description><para>Construct an input archive.</para><para>
</para></description></constructor><constructor><parameter name="ar"><paramtype><classname>archive</classname> &amp;</paramtype><description><para>The archive from where extract the data. </para></description></parameter><parameter name="length"><paramtype>uint</paramtype><description><para>Size of the data. </para></description></parameter><description><para>Construct an input archive.</para><para>
</para></description></constructor><constructor><parameter name="ar"><paramtype><classname>iarchive</classname> &amp;</paramtype><description><para>The input archive from where extract the data. </para></description></parameter><parameter name="length"><paramtype>uint</paramtype><description><para>Size of the data. </para></description></parameter><description><para>Construct an input archive.</para><para>
</para></description></constructor></class><class name="oarchive"><description><para>The MIH types support serialization for the output archive. This particular archive does not include the TLV field, which is necessary to support the definition of new sequence types from existing MIH types. </para></description><typedef name="oarchive_type"><type><classname>oarchive</classname></type></typedef><method-group name="public member functions"><method name="reset" cv=""><type>void</type><parameter name="ar"><paramtype><classname>archive</classname> &amp;</paramtype><description><para>The archive from where extract the data. </para></description></parameter><description><para>Overwrites the current data.</para><para>
</para></description></method><method name="append" cv=""><type>void</type><template>
          <template-type-parameter name="InputIteratorT"/>
        </template><parameter name="begin"><paramtype>InputIteratorT</paramtype><description><para>The position of the first element to be copied. </para></description></parameter><parameter name="end"><paramtype>InputIteratorT</paramtype><description><para>The position of the first element to be copied. </para></description></parameter><description><para>Inserts elements at the output archive current position.</para><para>
</para></description></method><method name="position" cv=""><type>void</type><parameter name="pos"><paramtype>uint</paramtype><description><para>The new position to point in the output archive. </para></description></parameter><description><para>Point to a new position in the output archive.</para><para>
</para></description></method><method name="position" cv="const"><type>uint</type><description><para>Get the current position in the output archive.</para><para>
</para></description><returns><para>The current position in the output archive. </para></returns></method><method name="length" cv="const"><type>uint</type><description><para>Get the length of the output archive.</para><para>
</para></description><returns><para>The length of the output archive. </para></returns></method><method name="list_length" cv=""><type>void</type><parameter name="len"><paramtype>uint</paramtype><description><para>the size of a list of a particular data type. </para></description></parameter><description><para>Inserts the size of a list of a particular data type.</para><para>
</para></description></method><method name="operator&amp;" cv=""><type><classname>oarchive</classname> &amp;</type><parameter name="val"><paramtype>bool</paramtype><description><para>The value to insert. </para></description></parameter><description><para>Inserts a boolean type value from the current position in the output archive.</para><para>

</para></description><returns><para>Returns the output archive. </para></returns></method><method name="operator&amp;" cv=""><type><classname>oarchive</classname> &amp;</type><parameter name="val"><paramtype>uint8</paramtype><description><para>The value to insert. </para></description></parameter><description><para>Inserts a odtone::uint8 type value from the current position in the output archive.</para><para>

</para></description><returns><para>Returns the output archive. </para></returns></method><method name="operator&amp;" cv=""><type><classname>oarchive</classname> &amp;</type><parameter name="val"><paramtype>uint16</paramtype><description><para>The value to insert. </para></description></parameter><description><para>Inserts a odtone::uint16 type value from the current position in the output archive.</para><para>

</para></description><returns><para>Returns the output archive. </para></returns></method><method name="operator&amp;" cv=""><type><classname>oarchive</classname> &amp;</type><parameter name="val"><paramtype>uint32</paramtype><description><para>The value to insert. </para></description></parameter><description><para>Inserts a odtone::uint32 type value from the current position in the output archive.</para><para>

</para></description><returns><para>Returns the output archive. </para></returns></method><method name="operator&amp;" cv=""><type><classname>oarchive</classname> &amp;</type><parameter name="val"><paramtype>uint64</paramtype><description><para>The value to insert. </para></description></parameter><description><para>Inserts a odtone::uint64 type value from the current position in the output archive.</para><para>

</para></description><returns><para>Returns the output archive. </para></returns></method><method name="operator&amp;" cv=""><type><classname>oarchive</classname> &amp;</type><parameter name="val"><paramtype>sint8</paramtype><description><para>The value to insert. </para></description></parameter><description><para>Inserts a odtone::sint8 type value from the current position in the output archive.</para><para>

</para></description><returns><para>Returns the output archive. </para></returns></method><method name="operator&amp;" cv=""><type><classname>oarchive</classname> &amp;</type><parameter name="val"><paramtype>sint16</paramtype><description><para>The value to insert. </para></description></parameter><description><para>Inserts a odtone::sint16 type value from the current position in the output archive.</para><para>

</para></description><returns><para>Returns the output archive. </para></returns></method><method name="operator&amp;" cv=""><type><classname>oarchive</classname> &amp;</type><parameter name="val"><paramtype>sint32</paramtype><description><para>The value to insert. </para></description></parameter><description><para>Inserts a odtone::sint32 type value from the current position in the output archive.</para><para>

</para></description><returns><para>Returns the output archive. </para></returns></method><method name="operator&amp;" cv=""><type><classname>oarchive</classname> &amp;</type><parameter name="val"><paramtype>sint64</paramtype><description><para>The value to insert. </para></description></parameter><description><para>Inserts a odtone::sint64 type value from the current position in the output archive.</para><para>

</para></description><returns><para>Returns the output archive. </para></returns></method><method name="operator&amp;" cv=""><type><classname>oarchive</classname> &amp;</type><parameter name="val"><paramtype>std::string &amp;</paramtype><description><para>Reference where to get the value to insert. </para></description></parameter><description><para>Inserts a odtone::mih::octet_string type value from the current position in the output archive.</para><para>

</para></description><returns><para>Returns the output archive. </para></returns></method><method name="operator&amp;" cv=""><type><classname>oarchive</classname> &amp;</type><parameter name="buf"><paramtype>std::vector&lt; uint8 &gt; &amp;</paramtype><description><para>The value to insert. </para></description></parameter><description><para>Inserts a list of a particular type value from the current position in the output archive.</para><para>

</para></description><returns><para>Returns the output archive. </para></returns></method></method-group><constructor><parameter name="ar"><paramtype><classname>archive</classname> &amp;</paramtype><description><para>The archive from where extract the data. </para></description></parameter><description><para>Construct an output archive.</para><para>
</para></description></constructor></class><class name="is_iarchive"><template>
      <template-type-parameter name="T"/>
    </template><description><para>This class allows to check if a given class is an input archive. It has only a boolean value that is true when the given class is an input archive, or false otherwise. </para></description><class name="false_t"/><data-member name="value" specifiers="static"><type>const bool</type></data-member><method-group name="private static functions"><method name="test" cv=""><type>static true_t</type><template>
          <template-type-parameter name="U"/>
        </template><parameter name=""><paramtype>typename U::iarchive_type *</paramtype><default>0</default></parameter></method><method name="test" cv=""><type>static false_t</type><template>
          <template-type-parameter name="U"/>
        </template><parameter name=""><paramtype>...</paramtype></parameter></method></method-group></class><class name="is_oarchive"><template>
      <template-type-parameter name="T"/>
    </template><description><para>This class permits to check if a given class is an output archive. It has only a boolean value that is true when the given class is an output archive, or false otherwise. </para></description><class name="false_t"/><data-member name="value" specifiers="static"><type>const bool</type></data-member><method-group name="private static functions"><method name="test" cv=""><type>static true_t</type><template>
          <template-type-parameter name="U"/>
        </template><parameter name=""><paramtype>typename U::oarchive_type *</paramtype><default>0</default></parameter></method><method name="test" cv=""><type>static false_t</type><template>
          <template-type-parameter name="U"/>
        </template><parameter name=""><paramtype>...</paramtype></parameter></method></method-group></class></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/archive_fwd.hpp"><namespace name="odtone"><namespace name="mih"/></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/config.hpp"><namespace name="odtone"><namespace name="mih"><class name="config"><description><para>Configuration and command line options parser</para><para>This class provides parsing for command line options and configuration files for a set of predefined options description. </para></description><method-group name="public member functions"><method name="help" cv=""><type>bool</type><description><para>Check if the help option was specified.</para><para>
</para></description><returns><para>True if the help option is present or false otherwise. </para></returns></method><method name="parse" cv=""><type>bool</type><parameter name="argc"><paramtype>int</paramtype><description><para>Number of arguments passed through the command line. </para></description></parameter><parameter name="argv"><paramtype>char *</paramtype><description><para>Arguments passed through the command line. </para></description></parameter><parameter name="conf_file_option"><paramtype>const char *</paramtype><description><para>Name of configuration file. </para></description></parameter><description><para>Parse the command line arguments.</para><para>
</para></description></method><method name="get" cv="const"><type>T</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="var"><paramtype>const char *</paramtype><description><para>The variable name. </para></description></parameter><description><para>Get option variable value.</para><para>
</para></description></method><method name="count" cv=""><type>uint</type><parameter name="var"><paramtype>const char *</paramtype><description><para>Number of variables. </para></description></parameter><description><para>Count the number of option variables.</para><para>
</para></description></method></method-group><constructor><parameter name="desc"><paramtype>po::options_description &amp;</paramtype><description><para>A set of option descriptions. </para></description></parameter><description><para>Construct a configuration and command line options parser.</para><para>
</para></description></constructor><destructor><description><para>Destruct a configuration and command line options parser. </para></description></destructor></class></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/confirm.hpp"><namespace name="odtone"><namespace name="mih"><class name="confirm"><inherit access="public">odtone::mih::message_helper</inherit><description><para>This class allows parsing and generating MIH Confirm messages. </para></description><enum name="mid"><enumvalue name="capability_discover"><default> msg_id&lt;1</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request </para></description></enumvalue><enumvalue name="event_subscribe"><default> msg_id&lt;1</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request </para></description></enumvalue><enumvalue name="event_unsubscribe"><default> msg_id&lt;1</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request </para></description></enumvalue><enumvalue name="link_get_parameters"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request </para></description></enumvalue><enumvalue name="link_configure_thresholds"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request </para></description></enumvalue><enumvalue name="link_actions"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request </para></description></enumvalue><description><para>MIH Confirm Message ID </para></description></enum><method-group name="public member functions"/><constructor><description><para>Construct an empty MIH Confirm Message helper. </para></description></constructor><constructor specifiers="explicit"><parameter name="m"><paramtype>mid</paramtype><description><para>The value of the MIH Message ID. </para></description></parameter><description><para>Construct a MIH Confirm Message helper.</para><para>
</para></description></constructor><constructor><parameter name="m"><paramtype>mid</paramtype><description><para>The value of the MIH Message ID. </para></description></parameter><parameter name="destination"><paramtype>const <classname>id</classname> &amp;</paramtype><description><para>The value of the MIH Message Destination MIHF ID. </para></description></parameter><description><para>Construct a MIH Confirm Message helper.</para><para>
</para></description></constructor></class></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/frame.hpp"><namespace name="odtone"><namespace name="mih"><struct name="service"><description><para>Service identifier (SID). It identifies the different MIH services. </para></description><enum name="type"><enumvalue name="management"><default> 1</default><description><para>Management service. </para></description></enumvalue><enumvalue name="event"><default> 2</default><description><para>Event service. </para></description></enumvalue><enumvalue name="command"><default> 3</default><description><para>Command service. </para></description></enumvalue><enumvalue name="information"><default> 4</default><description><para>Information service. </para></description></enumvalue><description><para>Service identifier enumeration. </para></description></enum></struct><struct name="operation"><description><para>Operation code (Opcode). Type of operation to be performed with respect to the SID. </para></description><enum name="type"><enumvalue name="confirm"><default> 0</default><description><para>Confirm. </para></description></enumvalue><enumvalue name="request"><default> 1</default><description><para>Request. </para></description></enumvalue><enumvalue name="response"><default> 2</default><description><para>Response. </para></description></enumvalue><enumvalue name="indication"><default> 3</default><description><para>Indication. </para></description></enumvalue><description><para>Operation code enumeration. </para></description></enum></struct><struct name="action"><description><para>Action identifier (AID). This indicates the action to be taken with regard to the SID. </para></description><enum name="type"><enumvalue name="capability_discover"><default> 1</default><description><para>Capability Discover. </para></description></enumvalue><enumvalue name="mih_register"><default> 2</default><description><para>Register. </para></description></enumvalue><enumvalue name="mih_deregister"><default> 3</default><description><para>De-register. </para></description></enumvalue><enumvalue name="event_subscribe"><default> 4</default><description><para>Event subscribe. </para></description></enumvalue><enumvalue name="event_unsubscsribe"><default> 5</default><description><para>Event unsubscribe. </para></description></enumvalue><enumvalue name="link_detected"><default> 1</default><description><para>Link detected. </para></description></enumvalue><enumvalue name="link_up"><default> 2</default><description><para>Link up. </para></description></enumvalue><enumvalue name="link_down"><default> 3</default><description><para>Link down. </para></description></enumvalue><enumvalue name="link_parameters_report"><default> 5</default><description><para>Link parameters report. </para></description></enumvalue><enumvalue name="link_going_down"><default> 6</default><description><para>Link going down. </para></description></enumvalue><enumvalue name="link_handover_imminent"><default> 7</default><description><para>Link handover imminent. </para></description></enumvalue><enumvalue name="link_handover_complete"><default> 8</default><description><para>Link handover complete. </para></description></enumvalue><enumvalue name="link_get_parameters"><default> 1</default><description><para>Link get parameters. </para></description></enumvalue><enumvalue name="link_configure_thresholds"><default> 2</default><description><para>Link configure thresholds. </para></description></enumvalue><enumvalue name="link_actions"><default> 3</default><description><para>Link actions. </para></description></enumvalue><enumvalue name="net_ho_candidate_query"><default> 4</default><description><para>Net handover candidate query. </para></description></enumvalue><enumvalue name="mn_ho_candidate_query"><default> 5</default><description><para>MN handover candidate query. </para></description></enumvalue><enumvalue name="n2n_ho_query_resources"><default> 6</default><description><para>N2N handover query resources. </para></description></enumvalue><enumvalue name="mn_ho_commit"><default> 7</default><description><para>MN handover commit. </para></description></enumvalue><enumvalue name="net_ho_commit"><default> 8</default><description><para>Net handover commit. </para></description></enumvalue><enumvalue name="n2n_ho_commit"><default> 9</default><description><para>N2N handover commit. </para></description></enumvalue><enumvalue name="mn_ho_complete"><default> 10</default><description><para>MN handover complete. </para></description></enumvalue><enumvalue name="n2n_ho_complete"><default> 11</default><description><para>N2N handover complete. </para></description></enumvalue><enumvalue name="get_information"><default> 1</default><description><para>Get information. </para></description></enumvalue><enumvalue name="push_information"><default> 2</default><description><para>Push information. </para></description></enumvalue><description><para>Action identifier enumeration. </para></description></enum></struct><struct name="frame"><description><para>MIH message frame. This class provides access to all fields of the MIH message header. </para></description><data-member name="mask_version" specifiers="static"><type>const uint8</type><description><para>MIH Message Version mask. </para></description></data-member><data-member name="mask_ackreq" specifiers="static"><type>const uint8</type><description><para>MIH Message Acknowledge Request Flag mask. </para></description></data-member><data-member name="mask_ackrsp" specifiers="static"><type>const uint8</type><description><para>MIH Message Acknowledge Response Flag mask. </para></description></data-member><data-member name="mask_uir" specifiers="static"><type>const uint8</type><description><para>MIH Message Unauthenticated Information Request Flag mask. </para></description></data-member><data-member name="mask_m" specifiers="static"><type>const uint8</type><description><para>MIH Message More Fragment Flag mask. </para></description></data-member><data-member name="mask_fn" specifiers="static"><type>const uint8</type><description><para>MIH Message Fragment Number mask. </para></description></data-member><data-member name="mask_rsvd1" specifiers="static"><type>const uint8</type><description><para>MIH Message Reserved Bit 1 mask. </para></description></data-member><data-member name="mask_sid" specifiers="static"><type>const uint8</type><description><para>MIH Message ID Service Identifier mask. </para></description></data-member><data-member name="mask_opcode" specifiers="static"><type>const uint8</type><description><para>MIH Message ID Operation Code mask. </para></description></data-member><data-member name="mask_aid" specifiers="static"><type>const uint8</type><description><para>Message ID Action Identifier mask. </para></description></data-member><data-member name="mask_rsvd2" specifiers="static"><type>const uint8</type><description><para>MIH Message Reserved Bit 2 mask. </para></description></data-member><data-member name="mask_tid" specifiers="static"><type>const uint8</type><description><para>Message ID Transaction Identifier mask. </para></description></data-member><data-member name="hdr"><type>uint8</type><description><para>Frame bytes. </para></description></data-member><method-group name="public static functions"><method name="cast" cv=""><type>static <classname>frame</classname> *</type><parameter name="buff"><paramtype>void *</paramtype><description><para>The byte buffer. </para></description></parameter><parameter name="len"><paramtype>size_t</paramtype><description><para>The size of the byte buffer. </para></description></parameter><description><para>Convert a byte buffer to a frame.</para><para>

</para></description><returns><para>The pointer of the returning frame. </para></returns></method><method name="cast" cv=""><type>static const <classname>frame</classname> *</type><parameter name="buff"><paramtype>const void *</paramtype><description><para>The byte buffer. </para></description></parameter><parameter name="len"><paramtype>size_t</paramtype><description><para>The size of the byte buffer. </para></description></parameter><description><para>Convert a byte buffer to a frame.</para><para>

</para></description><returns><para>The pointer of the returning frame. </para></returns></method></method-group><method-group name="public member functions"><method name="version" cv=""><type>void</type><parameter name="v"><paramtype>uint8</paramtype><description><para>The value of the MIH Message Version field. </para></description></parameter><description><para>Set the MIH Message Version.</para><para>
</para></description></method><method name="ackreq" cv=""><type>void</type><parameter name="v"><paramtype>bool</paramtype><description><para>The value of the MIH Message Acknowledge Request Flag field. </para></description></parameter><description><para>Set the MIH Message Acknowledge Request Flag.</para><para>
</para></description></method><method name="ackrsp" cv=""><type>void</type><parameter name="v"><paramtype>bool</paramtype><description><para>The value of the MIH Message Acknowledge Response Flag field. </para></description></parameter><description><para>Set the MIH Message Acknowledge Response Flag.</para><para>
</para></description></method><method name="uir" cv=""><type>void</type><parameter name="v"><paramtype>bool</paramtype><description><para>The value of the MIH Message Unauthenticated Information Request Flag. </para></description></parameter><description><para>Set the MIH Message Unauthenticated Information Request Flag.</para><para>
</para></description></method><method name="m" cv=""><type>void</type><parameter name="v"><paramtype>bool</paramtype><description><para>The value of the MIH Message More Fragment Flag. </para></description></parameter><description><para>Set the MIH Message More Fragment Flag.</para><para>
</para></description></method><method name="fn" cv=""><type>void</type><parameter name="v"><paramtype>uint8</paramtype><description><para>The value of the MIH Message Fragment Number. </para></description></parameter><description><para>Set the MIH Message Fragment Number.</para><para>
</para></description></method><method name="sid" cv=""><type>void</type><parameter name="v"><paramtype>service::type</paramtype><description><para>The value of the MIH Message ID Service Identifier. </para></description></parameter><description><para>Set the MIH Message ID Service Identifier.</para><para>
</para></description></method><method name="opcode" cv=""><type>void</type><parameter name="v"><paramtype>operation::type</paramtype><description><para>The value of the MIH Message ID Operation Code. </para></description></parameter><description><para>Set the MIH Message ID Operation Code.</para><para>
</para></description></method><method name="aid" cv=""><type>void</type><parameter name="v"><paramtype>action::type</paramtype><description><para>The value of the MIH Message ID Action Identifier. </para></description></parameter><description><para>Set the MIH Message ID Action Identifier.</para><para>
</para></description></method><method name="mid" cv=""><type>void</type><parameter name="v"><paramtype>uint16</paramtype><description><para>The value of the MIH Message Message ID. </para></description></parameter><description><para>Set the MIH Message ID.</para><para>
</para></description></method><method name="tid" cv=""><type>void</type><parameter name="v"><paramtype>uint16</paramtype><description><para>The value of the MIH Message Transaction ID. </para></description></parameter><description><para>Set the MIH Message Transaction ID.</para><para>
</para></description></method><method name="plength" cv=""><type>void</type><parameter name="v"><paramtype>uint16</paramtype><description><para>The value of the message payload length. </para></description></parameter><description><para>Set the message payload length.</para><para>
</para></description></method><method name="version" cv="const"><type>uint8</type><description><para>Get the MIH Message Version.</para><para>
</para></description><returns><para>The value of the MIH Message Version field. </para></returns></method><method name="ackreq" cv="const"><type>bool</type><description><para>Get the MIH Message Acknowledge Request Flag.</para><para>
</para></description><returns><para>The value of the MIH Message Acknowledge Request Flag. </para></returns></method><method name="ackrsp" cv="const"><type>bool</type><description><para>Get the MIH Message Acknowledge Response Flag.</para><para>
</para></description><returns><para>The value of the MIH Message Acknowledge Response Flag field. </para></returns></method><method name="uir" cv="const"><type>bool</type><description><para>Get the MIH Message Unauthenticated Information Request Flag.</para><para>
</para></description><returns><para>The value of the MIH Message Unauthenticated Information Request Flag. </para></returns></method><method name="m" cv="const"><type>bool</type><description><para>Get the MIH Message More Fragment Flag.</para><para>
</para></description><returns><para>The value of the MIH Message More Fragment Flag. </para></returns></method><method name="fn" cv="const"><type>uint8</type><description><para>Get the MIH Message Fragment Number.</para><para>
</para></description><returns><para>The value of the MIH Message Fragment Number. </para></returns></method><method name="rsvd1" cv="const"><type>bool</type><description><para>Get the MIH Reserved Bit 1.</para><para>
</para></description><returns><para>The value of the MIH Reserved Bit 1. </para></returns></method><method name="sid" cv="const"><type>service::type</type><description><para>Get the MIH Message ID Service Identifier.</para><para>
</para></description><returns><para>The value of the MIH Message ID Service Identifier. </para></returns></method><method name="opcode" cv="const"><type>operation::type</type><description><para>Get the MIH Message ID Operation Code.</para><para>
</para></description><returns><para>The value of the MIH Message ID Operation Code. </para></returns></method><method name="aid" cv="const"><type>action::type</type><description><para>Get the MIH Message ID Action Identifier.</para><para>
</para></description><returns><para>The value of the MIH Message ID Action Identifier. </para></returns></method><method name="mid" cv="const"><type>uint16</type><description><para>Get the MIH Message ID.</para><para>
</para></description><returns><para>The value of the MIH Message ID. </para></returns></method><method name="rsvd2" cv="const"><type>uint8</type><description><para>Get the MIH Reserved Bit 2.</para><para>
</para></description><returns><para>The value of the MIH Reserved Bit 2. </para></returns></method><method name="tid" cv="const"><type>uint16</type><description><para>Get the MIH Message Transaction ID.</para><para>
</para></description><returns><para>The value of the MIH Message Transaction ID. </para></returns></method><method name="plength" cv="const"><type>uint16</type><description><para>Get the message payload length.</para><para>
</para></description><returns><para>The message payload length. </para></returns></method><method name="payload" cv=""><type>uint8 *</type><description><para>Get the pointer of the message payload.</para><para>
</para></description><returns><para>The pointer of the message payload. </para></returns></method><method name="payload" cv="const"><type>const uint8 *</type><description><para>Get the pointer of the message payload.</para><para>
</para></description><returns><para>The pointer of the message payload. </para></returns></method><method name="length" cv="const"><type>size_t</type><description><para>Get the length of the frame.</para><para>
</para></description><returns><para>The length of the frame. </para></returns></method></method-group></struct><typedef name="frame_vla"><type>buffer_vla&lt; <classname>frame</classname> &gt;</type></typedef><function name="operator&lt;&lt;"><type>std::ostream &amp;</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype><description><para>ostream. </para></description></parameter><parameter name="fm"><paramtype>const <classname>frame</classname> &amp;</paramtype><description><para>Frame. </para></description></parameter><description><para>Frame output.</para><para>

</para></description><returns><para>ostream reference. </para></returns></function></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/indication.hpp"><namespace name="odtone"><namespace name="mih"><class name="indication"><inherit access="public">odtone::mih::message_helper</inherit><description><para>This class allows parsing/generating MIH Indication messages. </para></description><enum name="mid"><enumvalue name="capability_discover"><default> msg_id&lt;1</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="mih_register"><default> msg_id&lt;1</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="mih_deregister"><default> msg_id&lt;1</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="event_subscribe"><default> msg_id&lt;1</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="event_unsubscribe"><default> msg_id&lt;1</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="link_detected"><default> msg_id&lt;2</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="link_up"><default> msg_id&lt;2</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="link_down"><default> msg_id&lt;2</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="link_parameters_report"><default> msg_id&lt;2</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="link_going_down"><default> msg_id&lt;2</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="link_handover_imminent"><default> msg_id&lt;2</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="link_handover_complete"><default> msg_id&lt;2</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="link_pdu_transmit_status"><default> msg_id&lt;2</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="link_get_parameters"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="link_configure_threshold"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="link_actions"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="net_ho_candidate_query"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="mn_ho_candidate_query"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="n2n_ho_query_resources"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="mn_ho_commit"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="net_ho_commit"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="n2n_ho_commit"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="mn_ho_complete"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="n2n_ho_complete"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="get_information"><default> msg_id&lt;4</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="push_information"><default> msg_id&lt;4</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="link_register"><default> msg_id&lt;1</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><enumvalue name="user_register"><default> msg_id&lt;1</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.indication</para><para>MIH_Register.indication</para><para>MIH_DeRegister.indication</para><para>MIH_Event_Subscribe.indication</para><para>MIH_Event_Unsubscribe.indication</para><para>MIH_Link_Detected.indication</para><para>MIH_Link_Up.indication</para><para>MIH_Link_Down.indication</para><para>MIH_Link_Parameters_Report.indication</para><para>MIH_Link_Going_Down.indication</para><para>MIH_Link_Handover_Imminent.indication</para><para>MIH_Link_Handover_Complete.indication</para><para>MIH_Link_PDU_transmit_status.indication</para><para>MIH_Link_Get_Parameters.indication</para><para>MIH_Link_Configure_Thresholds.indication</para><para>MIH_Link_Actions.indication</para><para>MIH_Net_HO_Candidate_Query.indication</para><para>MIH_MN_HO_Candidate_Query.indication</para><para>MIH_N2N_HO_Query_Resources.indication</para><para>MIH_MN_HO_Commit.indication</para><para>MIH_Net_HO_Commit.indication</para><para>MIH_N2N_HO_Commit.indication</para><para>MIH_N2N_HO_Complete.indication</para><para>MIH_N2N_HO_Commlete.indication</para><para>MIH_Get_Information.indication</para><para>MIH_Push_Information.indication</para><para>Link_Register.indication</para><para>User_Register.indication </para></description></enumvalue><description><para>MIH Indication Message ID </para></description></enum><method-group name="public member functions"/><constructor><description><para>Construct an empty MIH Indication Message helper. </para></description></constructor><constructor specifiers="explicit"><parameter name="m"><paramtype>mid</paramtype><description><para>The value of the MIH Message ID. </para></description></parameter><description><para>Construct an MIH Indication Message helper.</para><para>
</para></description></constructor><constructor><parameter name="m"><paramtype>mid</paramtype><description><para>The value of the MIH Message ID. </para></description></parameter><parameter name="destination"><paramtype>const <classname>id</classname> &amp;</paramtype><description><para>The value of the MIH Message Destination MIHF ID. </para></description></parameter><description><para>Construct an MIH Indication Message helper.</para><para>
</para></description></constructor></class></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/message.hpp"><namespace name="odtone"><namespace name="mih"><struct name="msg_id"><template>
      <template-nontype-parameter name="ServiceId"><type>uint</type></template-nontype-parameter>
      <template-nontype-parameter name="Opcode"><type>uint</type></template-nontype-parameter>
      <template-nontype-parameter name="ActionId"><type>uint</type></template-nontype-parameter>
    </template><description><para>Message Identifier (MID) data type. </para></description><data-member name="value" specifiers="static"><type>const uint16</type></data-member></struct><class name="message"><description><para>MIH Message.</para><para>This class is a high level representation of an MIH message. It provides access to all fields of the MIH message header, the destination and sources ID's (which is part of payload but common to all messages), and it also provides serialization/deserialization operations. </para></description><method-group name="public member functions"><method name="reset" cv=""><type>void</type><description><para>Clear the payload. </para></description></method><method name="version" cv=""><type>void</type><parameter name="v"><paramtype>uint8</paramtype><description><para>The value of the MIH Message Version field. </para></description></parameter><description><para>Set the MIH Message Version.</para><para>
</para></description></method><method name="ackreq" cv=""><type>void</type><parameter name="v"><paramtype>bool</paramtype><description><para>The value of the MIH Message Acknowledge Request Flag field. </para></description></parameter><description><para>Set the MIH Message Acknowledge Request Flag.</para><para>
</para></description></method><method name="ackrsp" cv=""><type>void</type><parameter name="v"><paramtype>bool</paramtype><description><para>The value of the MIH Message Acknowledge Response Flag field. </para></description></parameter><description><para>Set the MIH Message Acknowledge Response Flag.</para><para>
</para></description></method><method name="uir" cv=""><type>void</type><parameter name="v"><paramtype>bool</paramtype><description><para>The value of the MIH Message Unauthenticated Information Request Flag. </para></description></parameter><description><para>Set the MIH Message Unauthenticated Information Request Flag.</para><para>
</para></description></method><method name="m" cv=""><type>void</type><parameter name="v"><paramtype>bool</paramtype><description><para>The value of the MIH Message More Fragment Flag. </para></description></parameter><description><para>Set the MIH Message More Fragment Flag.</para><para>
</para></description></method><method name="fn" cv=""><type>void</type><parameter name="v"><paramtype>uint8</paramtype><description><para>The value of the MIH Message Fragment Number. </para></description></parameter><description><para>Set the MIH Message Fragment Number.</para><para>
</para></description></method><method name="sid" cv=""><type>void</type><parameter name="v"><paramtype>service::type</paramtype><description><para>The value of the MIH Message ID Service Identifier. </para></description></parameter><description><para>Set the MIH Message ID Service Identifier.</para><para>
</para></description></method><method name="opcode" cv=""><type>void</type><parameter name="v"><paramtype>operation::type</paramtype><description><para>The value of the MIH Message ID Operation Code. </para></description></parameter><description><para>Set the MIH Message ID Operation Code.</para><para>
</para></description></method><method name="aid" cv=""><type>void</type><parameter name="v"><paramtype>action::type</paramtype><description><para>The value of the MIH Message ID Action Identifier. </para></description></parameter><description><para>Set the MIH Message ID Action Identifier.</para><para>
</para></description></method><method name="mid" cv=""><type>void</type><parameter name="v"><paramtype>uint16</paramtype><description><para>The value of the MIH Message Message ID. </para></description></parameter><description><para>Set the MIH Message ID.</para><para>
</para></description></method><method name="tid" cv=""><type>void</type><parameter name="v"><paramtype>uint16</paramtype><description><para>The value of the MIH Message Transaction ID. </para></description></parameter><description><para>Set the MIH Message Transaction ID.</para><para>
</para></description></method><method name="source" cv=""><type>void</type><parameter name="id"><paramtype>const <classname>id</classname> &amp;</paramtype><description><para>The value of the MIH Message Source MIHF ID. </para></description></parameter><description><para>Set the MIH Message Source ID.</para><para>
</para></description></method><method name="destination" cv=""><type>void</type><parameter name="id"><paramtype>const <classname>id</classname> &amp;</paramtype><description><para>The value of the MIH Message Destination MIHF ID. </para></description></parameter><description><para>Set the MIH Message Destination ID.</para><para>
</para></description></method><method name="payload" cv=""><type>void</type><parameter name="msg"><paramtype>const <classname>message</classname> &amp;</paramtype><description><para>The message from which extract the payload. </para></description></parameter><description><para>Set the message payload by copying it from another message. <note><para>The source and destination TLVs are not copied.</para></note>

</para></description></method><method name="version" cv="const"><type>uint8</type><description><para>Get the MIH Message Version.</para><para>
</para></description><returns><para>The value of the MIH Message Version field. </para></returns></method><method name="ackreq" cv="const"><type>bool</type><description><para>Get the MIH Message Acknowledge Request Flag.</para><para>
</para></description><returns><para>The value of the MIH Message Acknowledge Request Flag. </para></returns></method><method name="ackrsp" cv="const"><type>bool</type><description><para>Get the MIH Message Acknowledge Response Flag.</para><para>
</para></description><returns><para>The value of the MIH Message Acknowledge Response Flag field. </para></returns></method><method name="uir" cv="const"><type>bool</type><description><para>Get the MIH Message Unauthenticated Information Request Flag.</para><para>
</para></description><returns><para>The value of the MIH Message Unauthenticated Information Request Flag. </para></returns></method><method name="m" cv="const"><type>bool</type><description><para>Get the MIH Message More Fragment Flag.</para><para>
</para></description><returns><para>The value of the MIH Message More Fragment Flag. </para></returns></method><method name="fn" cv="const"><type>uint8</type><description><para>Get the MIH Message Fragment Number.</para><para>
</para></description><returns><para>The value of the MIH Message Fragment Number. </para></returns></method><method name="sid" cv="const"><type>service::type</type><description><para>Get the MIH Message ID Service Identifier.</para><para>
</para></description><returns><para>The value of the MIH Message ID Service Identifier. </para></returns></method><method name="opcode" cv="const"><type>operation::type</type><description><para>Get the MIH Message ID Operation Code.</para><para>
</para></description><returns><para>The value of the MIH Message ID Operation Code. </para></returns></method><method name="aid" cv="const"><type>action::type</type><description><para>Get the MIH Message ID Action Identifier.</para><para>
</para></description><returns><para>The value of the MIH Message ID Action Identifier. </para></returns></method><method name="mid" cv="const"><type>uint16</type><description><para>Get the MIH Message ID.</para><para>
</para></description><returns><para>The value of the MIH Message ID. </para></returns></method><method name="tid" cv="const"><type>uint16</type><description><para>Get the MIH Message Transaction ID.</para><para>
</para></description><returns><para>The value of the MIH Message Transaction ID. </para></returns></method><method name="source" cv="const"><type>const <classname>id</classname> &amp;</type><description><para>Get the MIH Message Source ID.</para><para>
</para></description><returns><para>The value of the MIH Message Source MIHF ID. </para></returns></method><method name="destination" cv="const"><type>const <classname>id</classname> &amp;</type><description><para>Get the MIH Message Destination ID.</para><para>
</para></description><returns><para>The value of the MIH Message Destination MIHF ID. </para></returns></method><method name="input" cv=""><type><classname>iarchive</classname> &amp;</type><description><para>Get the message's input archive.</para><para>
</para></description><returns><para>The message's input archive. </para></returns></method><method name="output" cv=""><type><classname>oarchive</classname> &amp;</type><description><para>Get the message's output archive.</para><para>
</para></description><returns><para>The message's output archive. </para></returns></method><method name="get_frame" cv="const"><type>void</type><parameter name="fm"><paramtype>frame_vla &amp;</paramtype><description><para>A dynamic frame buffer to store the information. </para></description></parameter><description><para>Get the MIH Message Frame.</para><para>
</para></description></method><method name="has_service_specific_tlv" cv=""><type>bool</type><description><para>Check if the MIH Message has service specific TLVs</para><para>
</para></description><returns><para>True if has service specific TLVs or false otherwise. </para></returns></method></method-group><constructor><description><para>Construct an empty MIH Message.</para><para>The defaults for each field are: version = 1; ackreq = false; ackrsp = false; uir = false; m = false; fn = 0; mid = 0; tid = 0; </para></description></constructor><constructor><parameter name="fm"><paramtype>const <classname>frame</classname> &amp;</paramtype><description><para>The frame from which extract the information. </para></description></parameter><description><para>Construct a MIH Message by extracting the data from a frame.</para><para>
</para></description></constructor><destructor><description><para>Destruct a MIH Message. </para></description></destructor><copy-assignment><parameter name="fm"><paramtype>const <classname>frame</classname> &amp;</paramtype><description><para>The frame from which extract the information. </para></description></parameter><description><para>Extract the message data from a frame.</para><para>

</para></description><returns><para>The message with updated data. </para></returns></copy-assignment></class><class name="message_helper"><description><para>Parsing/generating MIH messages is done using helper classes and operator overloading. </para></description><method-group name="protected member functions"/><constructor><parameter name="mid"><paramtype>uint16</paramtype><description><para>The value of the MIH Message ID. </para></description></parameter><parameter name="dst"><paramtype>const <classname>id</classname> *</paramtype><description><para>The value of the MIH Message Destination MIHF ID. </para></description></parameter><description><para>Construct a MIH Message helper.</para><para>
</para></description></constructor><method-group name="friend functions"><method name="operator&lt;&lt;" cv=""><type>friend <classname>oarchive</classname> &amp;</type><parameter name="msg"><paramtype><classname>message</classname> &amp;</paramtype><description><para>MIH message to where serialize the data. </para></description></parameter><parameter name="mh"><paramtype>const <classname>message_helper</classname> &amp;</paramtype><description><para>The message helper. </para></description></parameter><description><para>Serialize a MIH message.</para><para>

</para></description><returns><para>The resulting output archive. </para></returns></method><method name="operator&gt;&gt;" cv=""><type>friend <classname>iarchive</classname> &amp;</type><parameter name="msg"><paramtype><classname>message</classname> &amp;</paramtype><description><para>MIH message from where deserialize the data. </para></description><description><para>MIH message from where deserialize the data. </para></description></parameter><parameter name="mh"><paramtype>const <classname>message_helper</classname> &amp;</paramtype><description><para>The message helper. </para></description><description><para>The message helper. </para></description></parameter><description><para>Deserialize a MIH message.</para><para>

Deserialize a MIH message.</para><para>

</para></description><returns><para>The resulting input archive.s</para></returns><returns><para>The resulting input archive. </para></returns></method></method-group></class><function name="operator&lt;&lt;"><type><classname>oarchive</classname> &amp;</type><parameter name="msg"><paramtype><classname>message</classname> &amp;</paramtype><description><para>MIH message to where serialize the data. </para></description></parameter><parameter name="mh"><paramtype>const <classname>message_helper</classname> &amp;</paramtype><description><para>The message helper. </para></description></parameter><description><para>Serialize a MIH message.</para><para>

</para></description><returns><para>The resulting output archive. </para></returns></function><function name="operator&gt;&gt;"><type><classname>iarchive</classname> &amp;</type><parameter name="msg"><paramtype><classname>message</classname> &amp;</paramtype><description><para>MIH message from where deserialize the data. </para></description></parameter><parameter name="mh"><paramtype>const <classname>message_helper</classname> &amp;</paramtype><description><para>The message helper. </para></description></parameter><description><para>Deserialize a MIH message.</para><para>

</para></description><returns><para>The resulting input archive. </para></returns></function></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/request.hpp"><namespace name="odtone"><namespace name="mih"><class name="request"><inherit access="public">odtone::mih::message_helper</inherit><description><para>This class allows parsing/generating MIH Request messages. </para></description><enum name="mid"><enumvalue name="capability_discover"><default> msg_id&lt;1</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.request</para><para>MIH_Register.request</para><para>MIH_DeRegister.request</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request</para><para>MIH_Net_HO_Candidate_Query.request</para><para>MIH_MN_HO_Candidate_Query.request</para><para>MIH_N2N_HO_Query_Resources.request</para><para>MIH_MN_HO_Commit.request</para><para>MIH_Net_HO_Commit.request</para><para>MIH_N2N_HO_Commit.request</para><para>MIH_N2N_HO_Complete.request</para><para>MIH_N2N_HO_Commlete.request</para><para>MIH_Get_Information.request</para><para>MIH_Push_Information.request </para></description></enumvalue><enumvalue name="mih_register"><default> msg_id&lt;1</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.request</para><para>MIH_Register.request</para><para>MIH_DeRegister.request</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request</para><para>MIH_Net_HO_Candidate_Query.request</para><para>MIH_MN_HO_Candidate_Query.request</para><para>MIH_N2N_HO_Query_Resources.request</para><para>MIH_MN_HO_Commit.request</para><para>MIH_Net_HO_Commit.request</para><para>MIH_N2N_HO_Commit.request</para><para>MIH_N2N_HO_Complete.request</para><para>MIH_N2N_HO_Commlete.request</para><para>MIH_Get_Information.request</para><para>MIH_Push_Information.request </para></description></enumvalue><enumvalue name="mih_deregister"><default> msg_id&lt;1</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.request</para><para>MIH_Register.request</para><para>MIH_DeRegister.request</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request</para><para>MIH_Net_HO_Candidate_Query.request</para><para>MIH_MN_HO_Candidate_Query.request</para><para>MIH_N2N_HO_Query_Resources.request</para><para>MIH_MN_HO_Commit.request</para><para>MIH_Net_HO_Commit.request</para><para>MIH_N2N_HO_Commit.request</para><para>MIH_N2N_HO_Complete.request</para><para>MIH_N2N_HO_Commlete.request</para><para>MIH_Get_Information.request</para><para>MIH_Push_Information.request </para></description></enumvalue><enumvalue name="event_subscribe"><default> msg_id&lt;1</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.request</para><para>MIH_Register.request</para><para>MIH_DeRegister.request</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request</para><para>MIH_Net_HO_Candidate_Query.request</para><para>MIH_MN_HO_Candidate_Query.request</para><para>MIH_N2N_HO_Query_Resources.request</para><para>MIH_MN_HO_Commit.request</para><para>MIH_Net_HO_Commit.request</para><para>MIH_N2N_HO_Commit.request</para><para>MIH_N2N_HO_Complete.request</para><para>MIH_N2N_HO_Commlete.request</para><para>MIH_Get_Information.request</para><para>MIH_Push_Information.request </para></description></enumvalue><enumvalue name="event_unsubscribe"><default> msg_id&lt;1</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.request</para><para>MIH_Register.request</para><para>MIH_DeRegister.request</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request</para><para>MIH_Net_HO_Candidate_Query.request</para><para>MIH_MN_HO_Candidate_Query.request</para><para>MIH_N2N_HO_Query_Resources.request</para><para>MIH_MN_HO_Commit.request</para><para>MIH_Net_HO_Commit.request</para><para>MIH_N2N_HO_Commit.request</para><para>MIH_N2N_HO_Complete.request</para><para>MIH_N2N_HO_Commlete.request</para><para>MIH_Get_Information.request</para><para>MIH_Push_Information.request </para></description></enumvalue><enumvalue name="link_get_parameters"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.request</para><para>MIH_Register.request</para><para>MIH_DeRegister.request</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request</para><para>MIH_Net_HO_Candidate_Query.request</para><para>MIH_MN_HO_Candidate_Query.request</para><para>MIH_N2N_HO_Query_Resources.request</para><para>MIH_MN_HO_Commit.request</para><para>MIH_Net_HO_Commit.request</para><para>MIH_N2N_HO_Commit.request</para><para>MIH_N2N_HO_Complete.request</para><para>MIH_N2N_HO_Commlete.request</para><para>MIH_Get_Information.request</para><para>MIH_Push_Information.request </para></description></enumvalue><enumvalue name="link_configure_thresholds"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.request</para><para>MIH_Register.request</para><para>MIH_DeRegister.request</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request</para><para>MIH_Net_HO_Candidate_Query.request</para><para>MIH_MN_HO_Candidate_Query.request</para><para>MIH_N2N_HO_Query_Resources.request</para><para>MIH_MN_HO_Commit.request</para><para>MIH_Net_HO_Commit.request</para><para>MIH_N2N_HO_Commit.request</para><para>MIH_N2N_HO_Complete.request</para><para>MIH_N2N_HO_Commlete.request</para><para>MIH_Get_Information.request</para><para>MIH_Push_Information.request </para></description></enumvalue><enumvalue name="link_actions"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.request</para><para>MIH_Register.request</para><para>MIH_DeRegister.request</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request</para><para>MIH_Net_HO_Candidate_Query.request</para><para>MIH_MN_HO_Candidate_Query.request</para><para>MIH_N2N_HO_Query_Resources.request</para><para>MIH_MN_HO_Commit.request</para><para>MIH_Net_HO_Commit.request</para><para>MIH_N2N_HO_Commit.request</para><para>MIH_N2N_HO_Complete.request</para><para>MIH_N2N_HO_Commlete.request</para><para>MIH_Get_Information.request</para><para>MIH_Push_Information.request </para></description></enumvalue><enumvalue name="net_ho_candidate_query"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.request</para><para>MIH_Register.request</para><para>MIH_DeRegister.request</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request</para><para>MIH_Net_HO_Candidate_Query.request</para><para>MIH_MN_HO_Candidate_Query.request</para><para>MIH_N2N_HO_Query_Resources.request</para><para>MIH_MN_HO_Commit.request</para><para>MIH_Net_HO_Commit.request</para><para>MIH_N2N_HO_Commit.request</para><para>MIH_N2N_HO_Complete.request</para><para>MIH_N2N_HO_Commlete.request</para><para>MIH_Get_Information.request</para><para>MIH_Push_Information.request </para></description></enumvalue><enumvalue name="mn_ho_candidate_query"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.request</para><para>MIH_Register.request</para><para>MIH_DeRegister.request</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request</para><para>MIH_Net_HO_Candidate_Query.request</para><para>MIH_MN_HO_Candidate_Query.request</para><para>MIH_N2N_HO_Query_Resources.request</para><para>MIH_MN_HO_Commit.request</para><para>MIH_Net_HO_Commit.request</para><para>MIH_N2N_HO_Commit.request</para><para>MIH_N2N_HO_Complete.request</para><para>MIH_N2N_HO_Commlete.request</para><para>MIH_Get_Information.request</para><para>MIH_Push_Information.request </para></description></enumvalue><enumvalue name="n2n_ho_query_resources"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.request</para><para>MIH_Register.request</para><para>MIH_DeRegister.request</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request</para><para>MIH_Net_HO_Candidate_Query.request</para><para>MIH_MN_HO_Candidate_Query.request</para><para>MIH_N2N_HO_Query_Resources.request</para><para>MIH_MN_HO_Commit.request</para><para>MIH_Net_HO_Commit.request</para><para>MIH_N2N_HO_Commit.request</para><para>MIH_N2N_HO_Complete.request</para><para>MIH_N2N_HO_Commlete.request</para><para>MIH_Get_Information.request</para><para>MIH_Push_Information.request </para></description></enumvalue><enumvalue name="mn_ho_commit"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.request</para><para>MIH_Register.request</para><para>MIH_DeRegister.request</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request</para><para>MIH_Net_HO_Candidate_Query.request</para><para>MIH_MN_HO_Candidate_Query.request</para><para>MIH_N2N_HO_Query_Resources.request</para><para>MIH_MN_HO_Commit.request</para><para>MIH_Net_HO_Commit.request</para><para>MIH_N2N_HO_Commit.request</para><para>MIH_N2N_HO_Complete.request</para><para>MIH_N2N_HO_Commlete.request</para><para>MIH_Get_Information.request</para><para>MIH_Push_Information.request </para></description></enumvalue><enumvalue name="net_ho_commit"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.request</para><para>MIH_Register.request</para><para>MIH_DeRegister.request</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request</para><para>MIH_Net_HO_Candidate_Query.request</para><para>MIH_MN_HO_Candidate_Query.request</para><para>MIH_N2N_HO_Query_Resources.request</para><para>MIH_MN_HO_Commit.request</para><para>MIH_Net_HO_Commit.request</para><para>MIH_N2N_HO_Commit.request</para><para>MIH_N2N_HO_Complete.request</para><para>MIH_N2N_HO_Commlete.request</para><para>MIH_Get_Information.request</para><para>MIH_Push_Information.request </para></description></enumvalue><enumvalue name="n2n_ho_commit"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.request</para><para>MIH_Register.request</para><para>MIH_DeRegister.request</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request</para><para>MIH_Net_HO_Candidate_Query.request</para><para>MIH_MN_HO_Candidate_Query.request</para><para>MIH_N2N_HO_Query_Resources.request</para><para>MIH_MN_HO_Commit.request</para><para>MIH_Net_HO_Commit.request</para><para>MIH_N2N_HO_Commit.request</para><para>MIH_N2N_HO_Complete.request</para><para>MIH_N2N_HO_Commlete.request</para><para>MIH_Get_Information.request</para><para>MIH_Push_Information.request </para></description></enumvalue><enumvalue name="mn_ho_complete"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.request</para><para>MIH_Register.request</para><para>MIH_DeRegister.request</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request</para><para>MIH_Net_HO_Candidate_Query.request</para><para>MIH_MN_HO_Candidate_Query.request</para><para>MIH_N2N_HO_Query_Resources.request</para><para>MIH_MN_HO_Commit.request</para><para>MIH_Net_HO_Commit.request</para><para>MIH_N2N_HO_Commit.request</para><para>MIH_N2N_HO_Complete.request</para><para>MIH_N2N_HO_Commlete.request</para><para>MIH_Get_Information.request</para><para>MIH_Push_Information.request </para></description></enumvalue><enumvalue name="n2n_ho_complete"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.request</para><para>MIH_Register.request</para><para>MIH_DeRegister.request</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request</para><para>MIH_Net_HO_Candidate_Query.request</para><para>MIH_MN_HO_Candidate_Query.request</para><para>MIH_N2N_HO_Query_Resources.request</para><para>MIH_MN_HO_Commit.request</para><para>MIH_Net_HO_Commit.request</para><para>MIH_N2N_HO_Commit.request</para><para>MIH_N2N_HO_Complete.request</para><para>MIH_N2N_HO_Commlete.request</para><para>MIH_Get_Information.request</para><para>MIH_Push_Information.request </para></description></enumvalue><enumvalue name="get_information"><default> msg_id&lt;4</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.request</para><para>MIH_Register.request</para><para>MIH_DeRegister.request</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request</para><para>MIH_Net_HO_Candidate_Query.request</para><para>MIH_MN_HO_Candidate_Query.request</para><para>MIH_N2N_HO_Query_Resources.request</para><para>MIH_MN_HO_Commit.request</para><para>MIH_Net_HO_Commit.request</para><para>MIH_N2N_HO_Commit.request</para><para>MIH_N2N_HO_Complete.request</para><para>MIH_N2N_HO_Commlete.request</para><para>MIH_Get_Information.request</para><para>MIH_Push_Information.request </para></description></enumvalue><enumvalue name="push_information"><default> msg_id&lt;4</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.request</para><para>MIH_Register.request</para><para>MIH_DeRegister.request</para><para>MIH_Event_Subscribe.request</para><para>MIH_Event_Unsubscribe.request</para><para>MIH_Link_Get_Parameters.request</para><para>MIH_Link_Configure_Thresholds.request</para><para>MIH_Link_Actions.request</para><para>MIH_Net_HO_Candidate_Query.request</para><para>MIH_MN_HO_Candidate_Query.request</para><para>MIH_N2N_HO_Query_Resources.request</para><para>MIH_MN_HO_Commit.request</para><para>MIH_Net_HO_Commit.request</para><para>MIH_N2N_HO_Commit.request</para><para>MIH_N2N_HO_Complete.request</para><para>MIH_N2N_HO_Commlete.request</para><para>MIH_Get_Information.request</para><para>MIH_Push_Information.request </para></description></enumvalue><description><para>MIH Request Message ID </para></description></enum><method-group name="public member functions"/><constructor><description><para>Construct an empty MIH Request Message helper. </para></description></constructor><constructor specifiers="explicit"><parameter name="m"><paramtype>mid</paramtype><description><para>The value of the MIH Message ID. </para></description></parameter><description><para>Construct an MIH Request Message helper.</para><para>
</para></description></constructor><constructor><parameter name="m"><paramtype>mid</paramtype><description><para>The value of the MIH Message ID. </para></description></parameter><parameter name="destination"><paramtype>const <classname>id</classname> &amp;</paramtype><description><para>The value of the MIH Message Destination MIHF ID. </para></description></parameter><description><para>Construct an MIH Request Message helper.</para><para>
</para></description></constructor></class></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/response.hpp"><namespace name="odtone"><namespace name="mih"><class name="response"><inherit access="public">odtone::mih::message_helper</inherit><description><para>This class allows parsing/generating MIH Response messages. </para></description><enum name="mid"><enumvalue name="capability_discover"><default> msg_id&lt;1</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.response</para><para>MIH_Register.response</para><para>MIH_DeRegister.response</para><para>MIH_Event_Subscribe.response</para><para>MIH_Event_Unsubscribe.response</para><para>MIH_Link_Get_Parameters.response</para><para>MIH_Link_Configure_Thresholds.response</para><para>MIH_Link_Actions.response</para><para>MIH_Net_HO_Candidate_Query.response</para><para>MIH_MN_HO_Candidate_Query.response</para><para>MIH_N2N_HO_Query_Resources.response</para><para>MIH_MN_HO_Commit.response</para><para>MIH_Net_HO_Commit.response</para><para>MIH_N2N_HO_Commit.response</para><para>MIH_N2N_HO_Complete.response</para><para>MIH_N2N_HO_Commlete.response</para><para>MIH_Get_Information.response </para></description></enumvalue><enumvalue name="mih_register"><default> msg_id&lt;1</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.response</para><para>MIH_Register.response</para><para>MIH_DeRegister.response</para><para>MIH_Event_Subscribe.response</para><para>MIH_Event_Unsubscribe.response</para><para>MIH_Link_Get_Parameters.response</para><para>MIH_Link_Configure_Thresholds.response</para><para>MIH_Link_Actions.response</para><para>MIH_Net_HO_Candidate_Query.response</para><para>MIH_MN_HO_Candidate_Query.response</para><para>MIH_N2N_HO_Query_Resources.response</para><para>MIH_MN_HO_Commit.response</para><para>MIH_Net_HO_Commit.response</para><para>MIH_N2N_HO_Commit.response</para><para>MIH_N2N_HO_Complete.response</para><para>MIH_N2N_HO_Commlete.response</para><para>MIH_Get_Information.response </para></description></enumvalue><enumvalue name="mih_deregister"><default> msg_id&lt;1</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.response</para><para>MIH_Register.response</para><para>MIH_DeRegister.response</para><para>MIH_Event_Subscribe.response</para><para>MIH_Event_Unsubscribe.response</para><para>MIH_Link_Get_Parameters.response</para><para>MIH_Link_Configure_Thresholds.response</para><para>MIH_Link_Actions.response</para><para>MIH_Net_HO_Candidate_Query.response</para><para>MIH_MN_HO_Candidate_Query.response</para><para>MIH_N2N_HO_Query_Resources.response</para><para>MIH_MN_HO_Commit.response</para><para>MIH_Net_HO_Commit.response</para><para>MIH_N2N_HO_Commit.response</para><para>MIH_N2N_HO_Complete.response</para><para>MIH_N2N_HO_Commlete.response</para><para>MIH_Get_Information.response </para></description></enumvalue><enumvalue name="event_subscribe"><default> msg_id&lt;1</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.response</para><para>MIH_Register.response</para><para>MIH_DeRegister.response</para><para>MIH_Event_Subscribe.response</para><para>MIH_Event_Unsubscribe.response</para><para>MIH_Link_Get_Parameters.response</para><para>MIH_Link_Configure_Thresholds.response</para><para>MIH_Link_Actions.response</para><para>MIH_Net_HO_Candidate_Query.response</para><para>MIH_MN_HO_Candidate_Query.response</para><para>MIH_N2N_HO_Query_Resources.response</para><para>MIH_MN_HO_Commit.response</para><para>MIH_Net_HO_Commit.response</para><para>MIH_N2N_HO_Commit.response</para><para>MIH_N2N_HO_Complete.response</para><para>MIH_N2N_HO_Commlete.response</para><para>MIH_Get_Information.response </para></description></enumvalue><enumvalue name="event_unsubscribe"><default> msg_id&lt;1</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.response</para><para>MIH_Register.response</para><para>MIH_DeRegister.response</para><para>MIH_Event_Subscribe.response</para><para>MIH_Event_Unsubscribe.response</para><para>MIH_Link_Get_Parameters.response</para><para>MIH_Link_Configure_Thresholds.response</para><para>MIH_Link_Actions.response</para><para>MIH_Net_HO_Candidate_Query.response</para><para>MIH_MN_HO_Candidate_Query.response</para><para>MIH_N2N_HO_Query_Resources.response</para><para>MIH_MN_HO_Commit.response</para><para>MIH_Net_HO_Commit.response</para><para>MIH_N2N_HO_Commit.response</para><para>MIH_N2N_HO_Complete.response</para><para>MIH_N2N_HO_Commlete.response</para><para>MIH_Get_Information.response </para></description></enumvalue><enumvalue name="link_get_parameters"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.response</para><para>MIH_Register.response</para><para>MIH_DeRegister.response</para><para>MIH_Event_Subscribe.response</para><para>MIH_Event_Unsubscribe.response</para><para>MIH_Link_Get_Parameters.response</para><para>MIH_Link_Configure_Thresholds.response</para><para>MIH_Link_Actions.response</para><para>MIH_Net_HO_Candidate_Query.response</para><para>MIH_MN_HO_Candidate_Query.response</para><para>MIH_N2N_HO_Query_Resources.response</para><para>MIH_MN_HO_Commit.response</para><para>MIH_Net_HO_Commit.response</para><para>MIH_N2N_HO_Commit.response</para><para>MIH_N2N_HO_Complete.response</para><para>MIH_N2N_HO_Commlete.response</para><para>MIH_Get_Information.response </para></description></enumvalue><enumvalue name="link_configure_thresholds"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.response</para><para>MIH_Register.response</para><para>MIH_DeRegister.response</para><para>MIH_Event_Subscribe.response</para><para>MIH_Event_Unsubscribe.response</para><para>MIH_Link_Get_Parameters.response</para><para>MIH_Link_Configure_Thresholds.response</para><para>MIH_Link_Actions.response</para><para>MIH_Net_HO_Candidate_Query.response</para><para>MIH_MN_HO_Candidate_Query.response</para><para>MIH_N2N_HO_Query_Resources.response</para><para>MIH_MN_HO_Commit.response</para><para>MIH_Net_HO_Commit.response</para><para>MIH_N2N_HO_Commit.response</para><para>MIH_N2N_HO_Complete.response</para><para>MIH_N2N_HO_Commlete.response</para><para>MIH_Get_Information.response </para></description></enumvalue><enumvalue name="link_actions"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.response</para><para>MIH_Register.response</para><para>MIH_DeRegister.response</para><para>MIH_Event_Subscribe.response</para><para>MIH_Event_Unsubscribe.response</para><para>MIH_Link_Get_Parameters.response</para><para>MIH_Link_Configure_Thresholds.response</para><para>MIH_Link_Actions.response</para><para>MIH_Net_HO_Candidate_Query.response</para><para>MIH_MN_HO_Candidate_Query.response</para><para>MIH_N2N_HO_Query_Resources.response</para><para>MIH_MN_HO_Commit.response</para><para>MIH_Net_HO_Commit.response</para><para>MIH_N2N_HO_Commit.response</para><para>MIH_N2N_HO_Complete.response</para><para>MIH_N2N_HO_Commlete.response</para><para>MIH_Get_Information.response </para></description></enumvalue><enumvalue name="net_ho_candidate_query"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.response</para><para>MIH_Register.response</para><para>MIH_DeRegister.response</para><para>MIH_Event_Subscribe.response</para><para>MIH_Event_Unsubscribe.response</para><para>MIH_Link_Get_Parameters.response</para><para>MIH_Link_Configure_Thresholds.response</para><para>MIH_Link_Actions.response</para><para>MIH_Net_HO_Candidate_Query.response</para><para>MIH_MN_HO_Candidate_Query.response</para><para>MIH_N2N_HO_Query_Resources.response</para><para>MIH_MN_HO_Commit.response</para><para>MIH_Net_HO_Commit.response</para><para>MIH_N2N_HO_Commit.response</para><para>MIH_N2N_HO_Complete.response</para><para>MIH_N2N_HO_Commlete.response</para><para>MIH_Get_Information.response </para></description></enumvalue><enumvalue name="mn_ho_candidate_query"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.response</para><para>MIH_Register.response</para><para>MIH_DeRegister.response</para><para>MIH_Event_Subscribe.response</para><para>MIH_Event_Unsubscribe.response</para><para>MIH_Link_Get_Parameters.response</para><para>MIH_Link_Configure_Thresholds.response</para><para>MIH_Link_Actions.response</para><para>MIH_Net_HO_Candidate_Query.response</para><para>MIH_MN_HO_Candidate_Query.response</para><para>MIH_N2N_HO_Query_Resources.response</para><para>MIH_MN_HO_Commit.response</para><para>MIH_Net_HO_Commit.response</para><para>MIH_N2N_HO_Commit.response</para><para>MIH_N2N_HO_Complete.response</para><para>MIH_N2N_HO_Commlete.response</para><para>MIH_Get_Information.response </para></description></enumvalue><enumvalue name="n2n_ho_query_resources"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.response</para><para>MIH_Register.response</para><para>MIH_DeRegister.response</para><para>MIH_Event_Subscribe.response</para><para>MIH_Event_Unsubscribe.response</para><para>MIH_Link_Get_Parameters.response</para><para>MIH_Link_Configure_Thresholds.response</para><para>MIH_Link_Actions.response</para><para>MIH_Net_HO_Candidate_Query.response</para><para>MIH_MN_HO_Candidate_Query.response</para><para>MIH_N2N_HO_Query_Resources.response</para><para>MIH_MN_HO_Commit.response</para><para>MIH_Net_HO_Commit.response</para><para>MIH_N2N_HO_Commit.response</para><para>MIH_N2N_HO_Complete.response</para><para>MIH_N2N_HO_Commlete.response</para><para>MIH_Get_Information.response </para></description></enumvalue><enumvalue name="mn_ho_commit"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.response</para><para>MIH_Register.response</para><para>MIH_DeRegister.response</para><para>MIH_Event_Subscribe.response</para><para>MIH_Event_Unsubscribe.response</para><para>MIH_Link_Get_Parameters.response</para><para>MIH_Link_Configure_Thresholds.response</para><para>MIH_Link_Actions.response</para><para>MIH_Net_HO_Candidate_Query.response</para><para>MIH_MN_HO_Candidate_Query.response</para><para>MIH_N2N_HO_Query_Resources.response</para><para>MIH_MN_HO_Commit.response</para><para>MIH_Net_HO_Commit.response</para><para>MIH_N2N_HO_Commit.response</para><para>MIH_N2N_HO_Complete.response</para><para>MIH_N2N_HO_Commlete.response</para><para>MIH_Get_Information.response </para></description></enumvalue><enumvalue name="net_ho_commit"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.response</para><para>MIH_Register.response</para><para>MIH_DeRegister.response</para><para>MIH_Event_Subscribe.response</para><para>MIH_Event_Unsubscribe.response</para><para>MIH_Link_Get_Parameters.response</para><para>MIH_Link_Configure_Thresholds.response</para><para>MIH_Link_Actions.response</para><para>MIH_Net_HO_Candidate_Query.response</para><para>MIH_MN_HO_Candidate_Query.response</para><para>MIH_N2N_HO_Query_Resources.response</para><para>MIH_MN_HO_Commit.response</para><para>MIH_Net_HO_Commit.response</para><para>MIH_N2N_HO_Commit.response</para><para>MIH_N2N_HO_Complete.response</para><para>MIH_N2N_HO_Commlete.response</para><para>MIH_Get_Information.response </para></description></enumvalue><enumvalue name="n2n_ho_commit"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.response</para><para>MIH_Register.response</para><para>MIH_DeRegister.response</para><para>MIH_Event_Subscribe.response</para><para>MIH_Event_Unsubscribe.response</para><para>MIH_Link_Get_Parameters.response</para><para>MIH_Link_Configure_Thresholds.response</para><para>MIH_Link_Actions.response</para><para>MIH_Net_HO_Candidate_Query.response</para><para>MIH_MN_HO_Candidate_Query.response</para><para>MIH_N2N_HO_Query_Resources.response</para><para>MIH_MN_HO_Commit.response</para><para>MIH_Net_HO_Commit.response</para><para>MIH_N2N_HO_Commit.response</para><para>MIH_N2N_HO_Complete.response</para><para>MIH_N2N_HO_Commlete.response</para><para>MIH_Get_Information.response </para></description></enumvalue><enumvalue name="mn_ho_complete"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.response</para><para>MIH_Register.response</para><para>MIH_DeRegister.response</para><para>MIH_Event_Subscribe.response</para><para>MIH_Event_Unsubscribe.response</para><para>MIH_Link_Get_Parameters.response</para><para>MIH_Link_Configure_Thresholds.response</para><para>MIH_Link_Actions.response</para><para>MIH_Net_HO_Candidate_Query.response</para><para>MIH_MN_HO_Candidate_Query.response</para><para>MIH_N2N_HO_Query_Resources.response</para><para>MIH_MN_HO_Commit.response</para><para>MIH_Net_HO_Commit.response</para><para>MIH_N2N_HO_Commit.response</para><para>MIH_N2N_HO_Complete.response</para><para>MIH_N2N_HO_Commlete.response</para><para>MIH_Get_Information.response </para></description></enumvalue><enumvalue name="n2n_ho_complete"><default> msg_id&lt;3</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.response</para><para>MIH_Register.response</para><para>MIH_DeRegister.response</para><para>MIH_Event_Subscribe.response</para><para>MIH_Event_Unsubscribe.response</para><para>MIH_Link_Get_Parameters.response</para><para>MIH_Link_Configure_Thresholds.response</para><para>MIH_Link_Actions.response</para><para>MIH_Net_HO_Candidate_Query.response</para><para>MIH_MN_HO_Candidate_Query.response</para><para>MIH_N2N_HO_Query_Resources.response</para><para>MIH_MN_HO_Commit.response</para><para>MIH_Net_HO_Commit.response</para><para>MIH_N2N_HO_Commit.response</para><para>MIH_N2N_HO_Complete.response</para><para>MIH_N2N_HO_Commlete.response</para><para>MIH_Get_Information.response </para></description></enumvalue><enumvalue name="get_information"><default> msg_id&lt;4</default></enumvalue><enumvalue name="value"><description><para>MIH_Capability_Discover.response</para><para>MIH_Register.response</para><para>MIH_DeRegister.response</para><para>MIH_Event_Subscribe.response</para><para>MIH_Event_Unsubscribe.response</para><para>MIH_Link_Get_Parameters.response</para><para>MIH_Link_Configure_Thresholds.response</para><para>MIH_Link_Actions.response</para><para>MIH_Net_HO_Candidate_Query.response</para><para>MIH_MN_HO_Candidate_Query.response</para><para>MIH_N2N_HO_Query_Resources.response</para><para>MIH_MN_HO_Commit.response</para><para>MIH_Net_HO_Commit.response</para><para>MIH_N2N_HO_Commit.response</para><para>MIH_N2N_HO_Complete.response</para><para>MIH_N2N_HO_Commlete.response</para><para>MIH_Get_Information.response </para></description></enumvalue><description><para>MIH Response Message ID </para></description></enum><method-group name="public member functions"/><constructor><description><para>Construct an empty MIH Response Message helper. </para></description></constructor><constructor specifiers="explicit"><parameter name="m"><paramtype>mid</paramtype><description><para>The value of the MIH Message ID. </para></description></parameter><description><para>Construct a MIH Response Message helper.</para><para>
</para></description></constructor><constructor><parameter name="m"><paramtype>mid</paramtype><description><para>The value of the MIH Message ID. </para></description></parameter><parameter name="destination"><paramtype>const <classname>id</classname> &amp;</paramtype><description><para>The value of the MIH Message Destination MIHF ID. </para></description></parameter><description><para>Construct an MIH Response Message helper.</para><para>
</para></description></constructor></class></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/tlv.hpp"><namespace name="odtone"><namespace name="mih"><struct name="bad_tlv"><description><para>Bad TLV exception. </para></description><method-group name="public member functions"/><constructor><description><para>Construct a bad TLV exception. </para></description></constructor></struct><struct name="base_tlv_"><template>
      <template-type-parameter name="ValueT"/>
      <template-nontype-parameter name="Value"><type>ValueT</type></template-nontype-parameter>
    </template><description><para>Base TLV. </para></description><method-group name="public static functions"><method name="serialize" cv=""><type>static bool</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="ar"><paramtype><classname>iarchive</classname> &amp;</paramtype><description><para>The input archive from where extract the TLV value. </para></description></parameter><parameter name="val"><paramtype>T &amp;</paramtype><description><para>The value to deserialize. </para></description></parameter><description><para>Deserialize the TLV type value.</para><para>

</para></description><returns><para>True if the value was deserialized or false otherwise. </para></returns></method><method name="serialize" cv=""><type>static void</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="ar"><paramtype><classname>oarchive</classname> &amp;</paramtype><description><para>The output archive to where insert the TLV value. </para></description></parameter><parameter name="val"><paramtype>T &amp;</paramtype><description><para>The value to serialize. </para></description></parameter><description><para>Serialize the TLV type value.</para><para>
</para></description></method></method-group></struct><struct name="tlv_"><template>
      <template-nontype-parameter name="Value"><type>uint8</type></template-nontype-parameter>
    </template><inherit access="public">odtone::mih::base_tlv_&lt; uint8, Value &gt;</inherit><description><para>MIH TLV </para></description><typedef name="tlv_serializer"><type><classname>tlv_</classname>&lt; Value &gt;</type></typedef></struct><struct name="tlv4_"><template>
      <template-nontype-parameter name="Value"><type>uint32</type></template-nontype-parameter>
    </template><inherit access="public">odtone::mih::base_tlv_&lt; uint32, Value &gt;</inherit><description><para>MIH TLV </para></description><typedef name="tlv_serializer"><type><classname>tlv4_</classname>&lt; Value &gt;</type></typedef></struct><struct name="oui_"><template>
      <template-nontype-parameter name="A"><type>uint8</type></template-nontype-parameter>
      <template-nontype-parameter name="B"><type>uint8</type></template-nontype-parameter>
      <template-nontype-parameter name="C"><type>uint8</type></template-nontype-parameter>
    </template><description><para>Vendor's IEEE organizationally unique identifier (OUI). </para></description><typedef name="tlv_serializer"><type><classname>oui_</classname>&lt; A, B, C &gt;</type></typedef><method-group name="public static functions"><method name="serialize" cv=""><type>static bool</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="ar"><paramtype><classname>iarchive</classname> &amp;</paramtype><description><para>The input archive from where extract the TLV value. </para></description></parameter><parameter name="val"><paramtype>T &amp;</paramtype><description><para>The value to deserialize. </para></description></parameter><description><para>Deserialize the TLV type value.</para><para>

</para></description><returns><para>True if the value was deserialized or false otherwise. </para></returns></method><method name="serialize" cv=""><type>static void</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="ar"><paramtype><classname>oarchive</classname> &amp;</paramtype><description><para>The output archive to where insert the TLV value. </para></description></parameter><parameter name="val"><paramtype>T &amp;</paramtype><description><para>The value to serialize. </para></description></parameter><description><para>Serialize the TLV type value.</para><para>
</para></description></method></method-group></struct><class name="tlv_type_"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="TLV"/>
    </template><description><para>The MIH types support serialization and deserialization for the input archive and output archive. However, these particular archives do not include the TLVs fields. So this class is responsible for managing the mandatory TLVs and for offering mechanisms to serialize and deserialize them. </para></description><typedef name="tlv_type"><type><classname>tlv_type_</classname>&lt; T, TLV &gt;</type></typedef><method-group name="public member functions"><method name="serialize" cv="const"><type>void</type><parameter name="ar"><paramtype><classname>iarchive</classname> &amp;</paramtype><description><para>The input archive from where extract the TLV value. </para></description></parameter><description><para>Deserialize the TLV type value.</para><para>
</para></description></method><method name="serialize" cv="const"><type>void</type><parameter name="ar"><paramtype><classname>oarchive</classname> &amp;</paramtype><description><para>The output archive to where serialize the TLV value. </para></description></parameter><description><para>Serialize the TLV type value.</para><para>
</para></description></method></method-group><constructor><parameter name="val"><paramtype>T &amp;</paramtype><description><para>The value of the TLV. </para></description></parameter><description><para>Construct a TLV of a particular type.</para><para>
</para></description></constructor></class><class-specialization name="tlv_type_"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="TLV"/>
    </template><specialization><template-arg>boost::optional&lt; T &gt;</template-arg><template-arg>TLV</template-arg></specialization><description><para>The MIH types support serialization and deserialization for the input archive and output archive. However, these particular archives do not include the TLVs fields. So this class is responsible for managing the optional TLVs and for offering mechanisms to serialize and deserialize them. </para></description><typedef name="tlv_type"><type><classname>tlv_type_</classname>&lt; boost::optional&lt; T &gt;, TLV &gt;</type></typedef><method-group name="public member functions"><method name="tlv_type_" cv=""><type/><parameter name="val"><paramtype>boost::optional&lt; T &gt; &amp;</paramtype><description><para>value of the TLV. </para></description></parameter><description><para>Construct a TLV of a particular type.</para><para>
</para></description></method><method name="serialize" cv="const"><type>void</type><parameter name="ar"><paramtype><classname>iarchive</classname> &amp;</paramtype><description><para>The input archive from where parse the TLV value. </para></description></parameter><description><para>Deserialize the TLV type value.</para><para>
</para></description></method><method name="serialize" cv="const"><type>void</type><parameter name="ar"><paramtype><classname>oarchive</classname> &amp;</paramtype><description><para>The output archive to where serialize the TLV value. </para></description></parameter><description><para>Serialize the TLV type value.</para><para>
</para></description></method></method-group></class-specialization><class name="tlv_cast_"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="TLV"/>
    </template><description><para>Cast between the number of TLV and the data type presented in it, and the correspondent TLV type. </para></description><method-group name="public member functions"><method name="operator()" cv="const"><type><classname>tlv_type</classname></type><parameter name="val"><paramtype>const T &amp;</paramtype><description><para>The value of the TLV. </para></description></parameter><description><para>Cast between the number of TLV and the data type presented in it, and the correspondent TLV type.</para><para>

</para></description><returns><para>The correspondent TLV type. </para></returns></method><method name="operator()" cv="const"><type><classname>tlv_optional_type</classname></type><parameter name="val"><paramtype>const boost::optional&lt; T &gt; &amp;</paramtype><description><para>The value of the TLV. </para></description></parameter><description><para>Cast between the number of TLV and the data type presented in it, and the correspondent TLV type. However it supports optional value.</para><para>

</para></description><returns><para>The correspondent TLV type. </para></returns></method></method-group></class><class name="is_tlv_type"><template>
      <template-type-parameter name="T"/>
    </template><description><para>This class allows to check if a given class is a TLV. It has only a boolean value that is true when the given class is a TLV, or false otherwise. </para></description><class name="false_t"/><data-member name="value" specifiers="static"><type>const bool</type></data-member><method-group name="private static functions"><method name="test" cv=""><type>static true_t</type><template>
          <template-type-parameter name="U"/>
        </template><parameter name=""><paramtype>typename U::tlv_type *</paramtype><default>0</default></parameter></method><method name="test" cv=""><type>static false_t</type><template>
          <template-type-parameter name="U"/>
        </template><parameter name=""><paramtype>...</paramtype></parameter></method></method-group></class><function name="operator&amp;"><type>boost::enable_if&lt; <classname>is_tlv_type</classname>&lt; T &gt;, <classname>iarchive</classname> &amp; &gt;::type</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="ar"><paramtype><classname>iarchive</classname> &amp;</paramtype></parameter><parameter name="val"><paramtype>const T &amp;</paramtype></parameter></function><function name="operator&amp;"><type>boost::enable_if&lt; <classname>is_tlv_type</classname>&lt; T &gt;, <classname>oarchive</classname> &amp; &gt;::type</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="ar"><paramtype><classname>oarchive</classname> &amp;</paramtype></parameter><parameter name="val"><paramtype>const T &amp;</paramtype></parameter></function></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/tlv_types.hpp"><namespace name="odtone"><namespace name="mih"><data-member name="tlv_source_id" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>id</classname>, <classname>tlv_</classname>&lt; 1 &gt; &gt;</type></data-member><data-member name="tlv_destination_id" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>id</classname>, <classname>tlv_</classname>&lt; 2 &gt; &gt;</type></data-member><data-member name="tlv_status" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>status</classname>, <classname>tlv_</classname>&lt; 3 &gt; &gt;</type></data-member><data-member name="tlv_link_type" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>link_type</classname>, <classname>tlv_</classname>&lt; 4 &gt; &gt;</type></data-member><data-member name="tlv_event_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>mih_evt_list</classname>, <classname>tlv_</classname>&lt; 5 &gt; &gt;</type></data-member><data-member name="tlv_command_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>mih_cmd_list</classname>, <classname>tlv_</classname>&lt; 6 &gt; &gt;</type></data-member><data-member name="tlv_query_type_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>iq_type_list</classname>, <classname>tlv_</classname>&lt; 7 &gt; &gt;</type></data-member><data-member name="tlv_transport_option_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>transport_list</classname>, <classname>tlv_</classname>&lt; 8 &gt; &gt;</type></data-member><data-member name="tlv_net_type_addr_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; net_type_addr_list, <classname>tlv_</classname>&lt; 9 &gt; &gt;</type></data-member><data-member name="tlv_mbb_ho_supp_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; mbb_ho_supp_list, <classname>tlv_</classname>&lt; 10 &gt; &gt;</type></data-member><data-member name="tlv_reg_request_code" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>reg_request_code</classname>, <classname>tlv_</classname>&lt; 11 &gt; &gt;</type></data-member><data-member name="tlv_valid_time_interval" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; uint32, <classname>tlv_</classname>&lt; 12 &gt; &gt;</type></data-member><data-member name="tlv_link_identifier" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>link_tuple_id</classname>, <classname>tlv_</classname>&lt; 13 &gt; &gt;</type></data-member><data-member name="tlv_new_link_identifier" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>link_tuple_id</classname>, <classname>tlv_</classname>&lt; 14 &gt; &gt;</type></data-member><data-member name="tlv_old_access_router" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; link_addr, <classname>tlv_</classname>&lt; 15 &gt; &gt;</type></data-member><data-member name="tlv_new_access_router" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; link_addr, <classname>tlv_</classname>&lt; 16 &gt; &gt;</type></data-member><data-member name="tlv_ip_renewal_flag" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; bool, <classname>tlv_</classname>&lt; 17 &gt; &gt;</type></data-member><data-member name="tlv_ip_mob_mgmt" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>ip_mob_mgmt</classname>, <classname>tlv_</classname>&lt; 18 &gt; &gt;</type></data-member><data-member name="tlv_ip_cfg_methods" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>ip_cfg_methods</classname>, <classname>tlv_</classname>&lt; 19 &gt; &gt;</type></data-member><data-member name="tlv_link_dn_reason" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>link_dn_reason</classname>, <classname>tlv_</classname>&lt; 20 &gt; &gt;</type></data-member><data-member name="tlv_time_interval" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; uint16, <classname>tlv_</classname>&lt; 21 &gt; &gt;</type></data-member><data-member name="tlv_link_gd_reason" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>link_gd_reason</classname>, <classname>tlv_</classname>&lt; 22 &gt; &gt;</type></data-member><data-member name="tlv_link_param_rpt_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; link_param_rpt_list, <classname>tlv_</classname>&lt; 23 &gt; &gt;</type></data-member><data-member name="tlv_dev_states_req" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>dev_states_req</classname>, <classname>tlv_</classname>&lt; 24 &gt; &gt;</type></data-member><data-member name="tlv_link_id_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; link_id_list, <classname>tlv_</classname>&lt; 25 &gt; &gt;</type></data-member><data-member name="tlv_dev_states_rsp_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; dev_states_rsp_list, <classname>tlv_</classname>&lt; 26 &gt; &gt;</type></data-member><data-member name="tlv_get_status_req_set" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>link_status_req</classname>, <classname>tlv_</classname>&lt; 27 &gt; &gt;</type></data-member><data-member name="tlv_get_status_rsp_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; status_rsp_list, <classname>tlv_</classname>&lt; 28 &gt; &gt;</type></data-member><data-member name="tlv_link_cfg_param_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; link_cfg_param_list, <classname>tlv_</classname>&lt; 29 &gt; &gt;</type></data-member><data-member name="tlv_link_cfg_status_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; link_cfg_status_list, <classname>tlv_</classname>&lt; 30 &gt; &gt;</type></data-member><data-member name="tlv_list_of_link_poa_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; list_of_link_poa_list, <classname>tlv_</classname>&lt; 31 &gt; &gt;</type></data-member><data-member name="tlv_preferred_link_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; rq_result_list, <classname>tlv_</classname>&lt; 32 &gt; &gt;</type></data-member><data-member name="tlv_ho_resource_query_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>qos_list</classname>, <classname>tlv_</classname>&lt; 33 &gt; &gt;</type></data-member><data-member name="tlv_ho_status" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>ho_status</classname>, <classname>tlv_</classname>&lt; 34 &gt; &gt;</type></data-member><data-member name="tlv_access_router_addr" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>ip_addr</classname>, <classname>tlv_</classname>&lt; 35 &gt; &gt;</type></data-member><data-member name="tlv_dhcp_server_addr" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>ip_addr</classname>, <classname>tlv_</classname>&lt; 36 &gt; &gt;</type></data-member><data-member name="tlv_fa_addr" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>ip_addr</classname>, <classname>tlv_</classname>&lt; 37 &gt; &gt;</type></data-member><data-member name="tlv_link_action_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; link_action_list, <classname>tlv_</classname>&lt; 38 &gt; &gt;</type></data-member><data-member name="tlv_link_action_rsp_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; link_action_rsp_list, <classname>tlv_</classname>&lt; 39 &gt; &gt;</type></data-member><data-member name="tlv_ho_result" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>ho_result</classname>, <classname>tlv_</classname>&lt; 40 &gt; &gt;</type></data-member><data-member name="tlv_resource_status" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; bool, <classname>tlv_</classname>&lt; 41 &gt; &gt;</type></data-member><data-member name="tlv_resource_ret_status" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; bool, <classname>tlv_</classname>&lt; 42 &gt; &gt;</type></data-member><data-member name="tlv_info_query_bin_data_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; iq_bin_data_list, <classname>tlv_</classname>&lt; 43 &gt; &gt;</type></data-member><data-member name="tlv_info_query_rdf_data_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; iq_rdf_data_list, <classname>tlv_</classname>&lt; 44 &gt; &gt;</type></data-member><data-member name="tlv_iq_rdf_schema_url" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; bool, <classname>tlv_</classname>&lt; 45 &gt; &gt;</type></data-member><data-member name="tlv_iq_rdf_schema_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; iq_rdf_schema_list, <classname>tlv_</classname>&lt; 46 &gt; &gt;</type></data-member><data-member name="tlv_max_response_size" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; uint16, <classname>tlv_</classname>&lt; 47 &gt; &gt;</type></data-member><data-member name="tlv_info_resp_bin_data_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; ir_bin_data_list, <classname>tlv_</classname>&lt; 48 &gt; &gt;</type></data-member><data-member name="tlv_info_resp_rdf_data_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; ir_rdf_data_list, <classname>tlv_</classname>&lt; 49 &gt; &gt;</type></data-member><data-member name="tlv_info_resp_rdf_schem_url_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; ir_rdf_schem_url_list, <classname>tlv_</classname>&lt; 50 &gt; &gt;</type></data-member><data-member name="tlv_info_resp_rdf_schem_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; ir_rdf_schem_list, <classname>tlv_</classname>&lt; 51 &gt; &gt;</type></data-member><data-member name="tlv_mobile_node_mihf_id" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>id</classname>, <classname>tlv_</classname>&lt; 52 &gt; &gt;</type></data-member><data-member name="tlv_query_res_report_flag" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; bool, <classname>tlv_</classname>&lt; 53 &gt; &gt;</type></data-member><data-member name="tlv_evt_cfg_info_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; evt_cfg_info_list, <classname>tlv_</classname>&lt; 54 &gt; &gt;</type></data-member><data-member name="tlv_target_network_info" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; tgt_net_info, <classname>tlv_</classname>&lt; 55 &gt; &gt;</type></data-member><data-member name="tlv_target_network_info_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; tgt_net_info_list, <classname>tlv_</classname>&lt; 56 &gt; &gt;</type></data-member><data-member name="tlv_assigned_resource_set" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>asgn_res_set</classname>, <classname>tlv_</classname>&lt; 57 &gt; &gt;</type></data-member><data-member name="tlv_link_det_info_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; link_det_info_list, <classname>tlv_</classname>&lt; 58 &gt; &gt;</type></data-member><data-member name="tlv_mn_link_id" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>link_id</classname>, <classname>tlv_</classname>&lt; 59 &gt; &gt;</type></data-member><data-member name="tlv_poa" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; link_addr, <classname>tlv_</classname>&lt; 60 &gt; &gt;</type></data-member><data-member name="tlv_unauthenticated_info_req" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; bool, <classname>tlv_</classname>&lt; 61 &gt; &gt;</type></data-member><data-member name="tlv_network_type" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>network_type</classname>, <classname>tlv_</classname>&lt; 62 &gt; &gt;</type></data-member><data-member name="tlv_request_resource_set" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>rq_res_set</classname>, <classname>tlv_</classname>&lt; 63 &gt; &gt;</type></data-member><data-member name="tlv_link_evt_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>link_evt_list</classname>, <classname>tlv_</classname>&lt; 101 &gt; &gt;</type></data-member><data-member name="tlv_link_cmd_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>link_cmd_list</classname>, <classname>tlv_</classname>&lt; 102 &gt; &gt;</type></data-member><data-member name="tlv_link_parameters_req" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; link_param_type_list, <classname>tlv_</classname>&lt; 103 &gt; &gt;</type></data-member><data-member name="tlv_link_parameters_status_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; link_param_list, <classname>tlv_</classname>&lt; 104 &gt; &gt;</type></data-member><data-member name="tlv_link_states_req" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>link_states_req</classname>, <classname>tlv_</classname>&lt; 105 &gt; &gt;</type></data-member><data-member name="tlv_link_states_rsp" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; link_states_rsp_list, <classname>tlv_</classname>&lt; 106 &gt; &gt;</type></data-member><data-member name="tlv_link_descriptor_req" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>link_desc_req</classname>, <classname>tlv_</classname>&lt; 107 &gt; &gt;</type></data-member><data-member name="tlv_link_descriptor_rsp" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; link_desc_rsp_list, <classname>tlv_</classname>&lt; 108 &gt; &gt;</type></data-member><data-member name="tlv_link_action" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>link_action</classname>, <classname>tlv_</classname>&lt; 109 &gt; &gt;</type></data-member><data-member name="tlv_link_ac_result" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>link_ac_result</classname>, <classname>tlv_</classname>&lt; 110 &gt; &gt;</type></data-member><data-member name="tlv_link_scan_rsp_list" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; link_scan_rsp_list, <classname>tlv_</classname>&lt; 111 &gt; &gt;</type></data-member><data-member name="tlv_link_det_info" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>link_det_info</classname>, <classname>tlv_</classname>&lt; 112 &gt; &gt;</type></data-member><data-member name="tlv_interface_type_addr" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>link_id</classname>, <classname>tlv_</classname>&lt; 113 &gt; &gt;</type></data-member><data-member name="tlv_mos_dscv" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>mos_dscv</classname>, <classname>tlv_</classname>&lt; 114 &gt; &gt;</type></data-member></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/types.hpp"/><header name="/home/carlos/Desktop/release/inc/odtone/mih/types/address.hpp"><namespace name="odtone"><namespace name="mih"><class name="transport_addr"><description><para>TRANSPORT_ADDR data type. </para></description><method-group name="protected member functions"/><constructor><parameter name="type"><paramtype>uint16</paramtype><description><para>Transport address type. </para></description></parameter><description><para>Construct a TRANSPORT_ADDR data type.</para><para>
</para></description></constructor><constructor><parameter name="type"><paramtype>uint16</paramtype><description><para>Transport address type. </para></description></parameter><parameter name="raw"><paramtype>const void *</paramtype><description><para>Raw bytes of the transport address. </para></description></parameter><parameter name="len"><paramtype>size_t</paramtype><description><para>Size of the transport address raw bytes. </para></description></parameter><description><para>Construct a TRANSPORT_ADDR data type.</para><para>
</para></description></constructor><method-group name="public member functions"><method name="type" cv="const"><type>uint16</type><description><para>Get the TRANSPORT_ADDR type.</para><para>
</para></description><returns><para>The transport address type. </para></returns></method><method name="type" cv=""><type>void</type><parameter name="type"><paramtype>const uint16</paramtype><description><para>The transport address type. </para></description></parameter><description><para>Set the TRANSPORT_ADDR type.</para><para>
</para></description></method><method name="get" cv="const"><type>const void *</type><description><para>Get the pointer to an array of characters which contains the transport address.</para><para>
</para></description><returns><para>Pointer to an internal array containing the transport address. </para></returns></method><method name="length" cv="const"><type>size_t</type><description><para>Get the lenght of the transport address string.</para><para>
</para></description><returns><para>The lenght of the transport address string. </para></returns></method><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the TRANSPORT_ADDR data type.</para><para>
</para></description></method></method-group></class><class name="mac_addr"><inherit access="public">odtone::mih::transport_addr</inherit><description><para>MAC_ADDR data type. </para></description><method-group name="public member functions"><method name="address" cv="const"><type>octet_string</type><description><para>Get the MAC address string (format: XX:XX:XX:XX:XX:XX).</para><para>
</para></description><returns><para>The MAC address string. </para></returns></method><method name="address" cv=""><type>void</type><parameter name="addr"><paramtype>const octet_string &amp;</paramtype><description><para>The MAC address string (format: XX:XX:XX:XX:XX:XX). </para></description></parameter><description><para>Set the MAC address.</para><para>
</para></description></method><method name="operator==" cv="const"><type>bool</type><parameter name="other"><paramtype>const <classname>mac_addr</classname> &amp;</paramtype><description><para>The MAC_ADDR to compare with. </para></description></parameter><description><para>Check if the MAC_ADDR is equal to another MAC_ADDR.</para><para>

</para></description><returns><para>True if they are equal or false otherwise. </para></returns></method></method-group><constructor><description><para>Construct an empty MAC_ADDR data type. <note><para>Transport address type = 6 </para></note>
</para></description></constructor><constructor specifiers="explicit"><parameter name="addr"><paramtype>const octet_string &amp;</paramtype><description><para>address MAC address string (format: XX:XX:XX:XX:XX:XX). </para></description></parameter><description><para>Construct an empty MAC_ADDR data type. <note><para>Transport address type = 6</para></note>

</para></description></constructor><constructor><parameter name="raw"><paramtype>const void *</paramtype><description><para>Raw bytes of the MAC address. </para></description></parameter><parameter name="len"><paramtype>size_t</paramtype><description><para>Lenght of the MAC address raw bytes. </para></description></parameter><description><para>Construct an empty MAC_ADDR data type. <note><para>Transport address type = 6</para></note>

</para></description></constructor><method-group name="friend functions"><method name="operator&lt;&lt;" cv=""><type>friend std::ostream &amp;</type><parameter name="out"><paramtype>std::ostream &amp;</paramtype><description><para>ostream. </para></description></parameter><parameter name="tp"><paramtype>const <classname>mac_addr</classname> &amp;</paramtype><description><para>MAC_ADDR data type. </para></description></parameter><description><para>MAC_ADDR data type output.</para><para>

</para></description><returns><para>ostream reference. </para></returns></method></method-group></class><struct name="l2_3gpp_2g_cell_id"><description><para>L2_3GPP_2G_CELL_ID data type. </para></description><data-member name="plmn_id"><type>uint8</type><description><para>PLMN_ID data type. </para></description></data-member><data-member name="_lac"><type>lac</type><description><para>LAC data type. </para></description></data-member><data-member name="_ci"><type>ci</type><description><para>CI data type. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the L2_3GPP_2G_CELL_ID data type.</para><para>
</para></description></method><method name="operator==" cv="const"><type>bool</type><parameter name="other"><paramtype>const <classname>l2_3gpp_2g_cell_id</classname> &amp;</paramtype><description><para>The L2_3GPP_2G_CELL_ID to compare with. </para></description></parameter><description><para>Check if the L2_3GPP_2G_CELL_ID is equal to another L2_3GPP_2G_CELL_ID.</para><para>

</para></description><returns><para>True if they are equal or false otherwise. </para></returns></method></method-group><method-group name="friend functions"><method name="operator&lt;&lt;" cv=""><type>friend std::ostream &amp;</type><parameter name="out"><paramtype>std::ostream &amp;</paramtype><description><para>ostream. </para></description></parameter><parameter name="addr"><paramtype>const <classname>l2_3gpp_2g_cell_id</classname> &amp;</paramtype><description><para>L2_3GPP_2G_CELL_ID data type. </para></description></parameter><description><para>L2_3GPP_2G_CELL_ID data type output.</para><para>

</para></description><returns><para>ostream reference. </para></returns></method></method-group></struct><struct name="l2_3gpp_3g_cell_id"><description><para>L2_3GPP_3G_CELL_ID data type. </para></description><data-member name="plmn_id"><type>uint8</type><description><para>PLMN_ID data type. </para></description></data-member><data-member name="_cell_id"><type>cell_id</type><description><para>CELL_ID data type. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the L2_3GPP_3G_CELL_ID data type.</para><para>
</para></description></method><method name="operator==" cv="const"><type>bool</type><parameter name="other"><paramtype>const <classname>l2_3gpp_3g_cell_id</classname> &amp;</paramtype><description><para>The L2_3GPP_3G_CELL_ID to compare with. </para></description></parameter><description><para>Check if the L2_3GPP_3G_CELL_ID is equal to another L2_3GPP_3G_CELL_ID.</para><para>

</para></description><returns><para>True if they are equal or false otherwise. </para></returns></method></method-group><method-group name="friend functions"><method name="operator&lt;&lt;" cv=""><type>friend std::ostream &amp;</type><parameter name="out"><paramtype>std::ostream &amp;</paramtype><description><para>ostream. </para></description></parameter><parameter name="addr"><paramtype>const <classname>l2_3gpp_3g_cell_id</classname> &amp;</paramtype><description><para>L2_3GPP_3G_CELL_ID data type. </para></description></parameter><description><para>L2_3GPP_3G_CELL_ID data type output.</para><para>

</para></description><returns><para>ostream reference. </para></returns></method></method-group></struct><struct name="l2_3gpp_addr"><description><para>L2_3GPP_ADDR data type. </para></description><data-member name="value"><type>octet_string</type><description><para>L2_3GPP_ADDR data type. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the L2_3GPP_ADDR data type.</para><para>
</para></description></method><method name="operator==" cv="const"><type>bool</type><parameter name="other"><paramtype>const <classname>l2_3gpp_addr</classname> &amp;</paramtype><description><para>The L2_3GPP_ADDR to compare with. </para></description></parameter><description><para>Check if the L2_3GPP_ADDR is equal to another L2_3GPP_ADDR.</para><para>

</para></description><returns><para>True if they are equal or false otherwise. </para></returns></method></method-group><method-group name="friend functions"><method name="operator&lt;&lt;" cv=""><type>friend std::ostream &amp;</type><parameter name="out"><paramtype>std::ostream &amp;</paramtype><description><para>ostream. </para></description></parameter><parameter name="addr"><paramtype>const <classname>l2_3gpp_addr</classname> &amp;</paramtype><description><para>L2_3GPP_ADDR data type. </para></description></parameter><description><para>L2_3GPP_ADDR data type output.</para><para>

</para></description><returns><para>ostream reference. </para></returns></method></method-group></struct><struct name="l2_3gpp2_addr"><description><para>Define L2_3GPP2_ADDR data type. </para></description><data-member name="value"><type>octet_string</type><description><para>L2_3GPP2_ADDR data type. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the L2_3GPP2_ADDR data type.</para><para>
</para></description></method><method name="operator==" cv="const"><type>bool</type><parameter name="other"><paramtype>const <classname>l2_3gpp2_addr</classname> &amp;</paramtype><description><para>The L2_3GPP2_ADDR to compare with. </para></description></parameter><description><para>Check if the L2_3GPP2_ADDR is equal to another L2_3GPP2_ADDR.</para><para>

</para></description><returns><para>True if they are equal or false otherwise. </para></returns></method></method-group><method-group name="friend functions"><method name="operator&lt;&lt;" cv=""><type>friend std::ostream &amp;</type><parameter name="out"><paramtype>std::ostream &amp;</paramtype><description><para>ostream. </para></description></parameter><parameter name="addr"><paramtype>const <classname>l2_3gpp2_addr</classname> &amp;</paramtype><description><para>L2_3GPP2_ADDR data type. </para></description></parameter><description><para>L2_3GPP2_ADDR data type output.</para><para>

</para></description><returns><para>ostream reference. </para></returns></method></method-group></struct><struct name="other_l2_addr"><description><para>Define OTHER_L2_ADDR data type. </para></description><data-member name="value"><type>octet_string</type><description><para>OTHER_L2_ADDR data type. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the OTHER_L2_ADDR data type.</para><para>
</para></description></method><method name="operator==" cv="const"><type>bool</type><parameter name="other"><paramtype>const <classname>other_l2_addr</classname> &amp;</paramtype><description><para>The OTHER_L2_ADDR to compare with. </para></description></parameter><description><para>Check if the OTHER_L2_ADDR is equal to another OTHER_L2_ADDR.</para><para>

</para></description><returns><para>True if they are equal or false otherwise. </para></returns></method></method-group><method-group name="friend functions"><method name="operator&lt;&lt;" cv=""><type>friend std::ostream &amp;</type><parameter name="out"><paramtype>std::ostream &amp;</paramtype><description><para>ostream. </para></description></parameter><parameter name="addr"><paramtype>const <classname>other_l2_addr</classname> &amp;</paramtype><description><para>OTHER_L2_ADDR data type. </para></description></parameter><description><para>OTHER_L2_ADDR data type output.</para><para>

</para></description><returns><para>ostream reference. </para></returns></method></method-group></struct><class name="ip_addr"><inherit access="public">odtone::mih::transport_addr</inherit><description><para>IP_ADDR data type. </para></description><enum name="type_ip_enum"><enumvalue name="none"><default> 0</default><description><para>None. </para></description></enumvalue><enumvalue name="ipv4"><default> 1</default><description><para>IP address version 4. </para></description></enumvalue><enumvalue name="ipv6"><default> 2</default><description><para>IP address version 6. </para></description></enumvalue><description><para>IP_ADDR type enumeration. </para></description></enum><method-group name="public member functions"><method name="address" cv="const"><type>octet_string</type><description><para>Get the IP address string.</para><para>
</para></description><returns><para>The IP address string. </para></returns></method><method name="address" cv=""><type>void</type><parameter name="addr"><paramtype>const octet_string &amp;</paramtype><description><para>The IP address string. </para></description></parameter><description><para>Set the IP address.</para><para>
</para></description></method><method name="operator==" cv="const"><type>bool</type><parameter name="other"><paramtype>const <classname>ip_addr</classname> &amp;</paramtype><description><para>The IP_ADDR to compare with. </para></description></parameter><description><para>Check if the IP_ADDR is equal to another IP_ADDR.</para><para>

</para></description><returns><para>True if they are equal or false otherwise. </para></returns></method></method-group><constructor><parameter name="tp"><paramtype>type_ip_enum</paramtype><default>none</default><description><para>IP address type. </para></description></parameter><description><para>Construct a IP_ADDR data type.</para><para>
</para></description></constructor><constructor><parameter name="tp"><paramtype>type_ip_enum</paramtype><description><para>IP address type. </para></description></parameter><parameter name="raw"><paramtype>const void *</paramtype><description><para>Raw bytes of the IP address. </para></description></parameter><parameter name="len"><paramtype>size_t</paramtype><description><para>Size of the IP address raw bytes. </para></description></parameter><description><para>Construct a IP_ADDR data type.</para><para>
</para></description></constructor><constructor specifiers="explicit"><parameter name="tp"><paramtype>type_ip_enum</paramtype><description><para>IP address type. </para></description></parameter><parameter name="addr"><paramtype>const octet_string &amp;</paramtype></parameter><description><para>Construct a IP_ADDR data type.</para><para>
</para></description></constructor><method-group name="friend functions"><method name="operator&lt;&lt;" cv=""><type>friend std::ostream &amp;</type><parameter name="out"><paramtype>std::ostream &amp;</paramtype><description><para>ostream. </para></description></parameter><parameter name="tp"><paramtype>const <classname>ip_addr</classname> &amp;</paramtype><description><para>IP_ADDR data type. </para></description></parameter><description><para>IP_ADDR data type output.</para><para>

</para></description><returns><para>ostream reference. </para></returns></method></method-group></class><enum name="transport_type_enum"><enumvalue name="l2"><default> 0</default><description><para>Layer 2 transport address. </para></description></enumvalue><enumvalue name="l3_or_higher"><default> 1</default><description><para>Layer 3 or higher transport address. </para></description></enumvalue><description><para>TRANSPORT_TYPE data type enumeration. </para></description></enum><typedef name="cell_id"><description><para>CELL_ID data type. </para></description><type>uint32</type></typedef><typedef name="lac"><description><para>LAC data type. </para></description><type>uint16</type></typedef><typedef name="ci"><description><para>CI data type. </para></description><type>uint16</type></typedef><typedef name="transport_type"><description><para>TRANSPORT_TYPE data type. </para></description><type><classname>enumeration</classname>&lt; transport_type_enum &gt;</type></typedef><typedef name="link_addr"><description><para>LINK_ADDR data type. </para></description><type>boost::variant&lt; <classname>mac_addr</classname>, <classname>l2_3gpp_3g_cell_id</classname>, <classname>l2_3gpp_2g_cell_id</classname>, <classname>l2_3gpp_addr</classname>, <classname>l2_3gpp2_addr</classname>, <classname>other_l2_addr</classname> &gt;</type></typedef><typedef name="link_addr_list"><description><para>LIST(LINK_ADDR) data type. </para></description><type>std::vector&lt; link_addr &gt;</type></typedef><typedef name="dhcp_serv"><description><para>DHCP_SERV data type. </para></description><type><classname>ip_addr</classname></type></typedef><typedef name="fn_agent"><description><para>FN_AGENT data type. </para></description><type><classname>ip_addr</classname></type></typedef><typedef name="acc_rtr"><description><para>ACC_RTR data type. </para></description><type><classname>ip_addr</classname></type></typedef></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/types/base.hpp"><namespace name="odtone"><namespace name="mih"><struct name="null"><description><para>Define NULL data type. </para></description><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the NULL data type.</para><para>
</para></description></method><method name="operator==" cv="const"><type>bool</type><parameter name=""><paramtype>const <classname>null</classname> &amp;</paramtype></parameter></method></method-group></struct><class name="bitmap"><template>
      <template-nontype-parameter name="N"><type>size_t</type></template-nontype-parameter>
      <template-type-parameter name="EnumT"/>
    </template><description><para>BITMAP data type. <note><para>N must be a multiple of 8. </para></note>
</para></description><method-group name="private member functions"><method name="ODTONE_STATIC_ASSERT" cv=""><type/><parameter name=""><paramtype>!</paramtype></parameter><parameter name=""><paramtype>"N must be a multiple of 8"</paramtype></parameter></method></method-group><method-group name="public member functions"><method name="clear" cv=""><type>void</type><description><para>Clear the BITMAP data type. </para></description></method><method name="clear" cv=""><type>void</type><parameter name="pos"><paramtype>EnumT</paramtype><description><para>The position on the bitmap to clear. </para></description></parameter><description><para>Clear the position.</para><para>
</para></description></method><method name="set" cv=""><type>void</type><parameter name="pos"><paramtype>EnumT</paramtype><description><para>The position on the bitmap to set. </para></description></parameter><description><para>Set the position.</para><para>
</para></description></method><method name="get" cv="const"><type>bool</type><parameter name="pos"><paramtype>EnumT</paramtype><description><para>The position on the bitmap to get. </para></description></parameter><description><para>Get the position value.</para><para>
</para></description></method><method name="merge" cv=""><type>void</type><parameter name="b"><paramtype><classname>bitmap</classname></paramtype><description><para>The BITMAP data type to merge with. </para></description></parameter><description><para>Merge the value of the bitmap with another BITMAP data type. <note><para>Both bitmaps must have the same size</para></note>

</para></description></method><method name="common" cv=""><type>void</type><parameter name="b"><paramtype><classname>bitmap</classname></paramtype><description><para>The BITMAP data type to compare with. </para></description></parameter><description><para>Set the common values between the BITMAP and another BITMAP data type. <note><para>Both bitmaps must have the same size</para></note>

</para></description></method><method name="except" cv=""><type>void</type><parameter name="b"><paramtype><classname>bitmap</classname></paramtype><description><para>The BITMAP data type with the values to clear. </para></description></parameter><description><para>Clear the values of the bitmap, if they are set on the given BITMAP. <note><para>Both bitmaps must have the same size</para></note>

</para></description></method><method name="full" cv=""><type>void</type><description><para>Set all poisition of the BITMAP data type. </para></description></method><method name="operator==" cv="const"><type>bool</type><parameter name="bit"><paramtype>const <classname>bitmap</classname> &amp;</paramtype><description><para>The BITMAP data type to compare with. </para></description></parameter><description><para>Check if the two bitmaps are equal. <note><para>Both bitmaps must have the same size</para></note>

</para></description></method><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the BITMAP data type.</para><para>
</para></description></method></method-group><constructor><description><para>Contruct an empty BITMAP data type. </para></description></constructor></class><struct name="percentage_exception"><description><para>Percentage exception. </para></description><method-group name="public member functions"/><constructor><description><para>Construct a percentage exception. </para></description></constructor></struct><class name="percentage"><description><para>PERCENTAGE data type. </para></description><method-group name="public member functions"><method name="conversion-operator" cv=""><type>uint</type><description><para>Get the PERCENTAGE data type value.</para><para>
</para></description><returns><para>The PERCENTAGE data type value. </para></returns></method><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the PERCENTAGE data type.</para><para>
</para></description></method></method-group><constructor><description><para>Construct a PERCENTAGE data type. It is initialize to 0%. </para></description></constructor><copy-assignment><parameter name="val"><paramtype>uint</paramtype><description><para>The percentage value. </para></description></parameter><description><para>Set the PERCENTAGE data type value.</para><para>

</para></description><returns><para>The reference to the PERCENTAGE data type. </para></returns></copy-assignment></class><class name="enumeration"><template>
      <template-type-parameter name="T"/>
    </template><description><para>ENUMERATED data type. </para></description><method-group name="private member functions"><method name="ODTONE_STATIC_ASSERT" cv=""><type/><parameter name=""><paramtype>boost::is_enum&lt; T &gt;::value</paramtype></parameter><parameter name=""><paramtype>"T must be an <classname>enumeration</classname>"</paramtype></parameter></method></method-group><method-group name="public member functions"><method name="get" cv="const"><type>T</type><description><para>Get the ENUMERATION data type value.</para><para>
</para></description><returns><para>The value of the ENUMERATION data type. </para></returns></method><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the ENUMERATION data type.</para><para>
</para></description></method><method name="operator==" cv="const"><type>bool</type><parameter name="val"><paramtype>T</paramtype><description><para>The value to compare with. </para></description></parameter><description><para>Check if the ENUMERATION value is equal to the argument value.</para><para>

</para></description><returns><para>True if they are equal or false otherwise. </para></returns></method><method name="operator!=" cv="const"><type>bool</type><parameter name="val"><paramtype>T</paramtype><description><para>The value to compare with. </para></description></parameter><description><para>Check if the ENUMERATION value is equal to the argument value.</para><para>

</para></description><returns><para>True if they are equal or false otherwise. </para></returns></method><method name="operator==" cv="const"><type>bool</type><parameter name="e"><paramtype>const <classname>enumeration</classname> &amp;</paramtype><description><para>The ENUMERATION to compare with. </para></description></parameter><description><para>Check if the ENUMERATION is equal to another ENUMERATION.</para><para>

</para></description><returns><para>True if they are equal or false otherwise. </para></returns></method><method name="operator!=" cv="const"><type>bool</type><parameter name="e"><paramtype>const <classname>enumeration</classname> &amp;</paramtype><description><para>The ENUMERATION to compare with. </para></description></parameter><description><para>Check if the ENUMERATION is equal to another ENUMERATION.</para><para>

</para></description><returns><para>True if they are equal or false otherwise. </para></returns></method></method-group><constructor><description><para>Construct an empty ENUMERATION data type. </para></description></constructor><constructor><parameter name="val"><paramtype>T</paramtype><description><para>The value of the ENUMERATION data type. </para></description></parameter><description><para>Construct an ENUMERATION data type.</para><para>
</para></description></constructor><copy-assignment><parameter name="val"><paramtype>T</paramtype><description><para>The value to assign to the ENUMERATION data type. </para></description></parameter><description><para>Set the ENUMERATION data type.</para><para>
</para></description></copy-assignment><method-group name="friend functions"><method name="operator&lt;&lt;" cv=""><type>friend std::ostream &amp;</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype><description><para>ostream. </para></description></parameter><parameter name="e"><paramtype>const <classname>enumeration</classname> &amp;</paramtype><description><para>ENUMERATION data type. </para></description></parameter><description><para>ENUMERATION data type output.</para><para>

</para></description><returns><para>ostream reference. </para></returns></method></method-group></class><enum name="status_enum"><enumvalue name="status_success"><default> 0</default><description><para>Status success. </para></description></enumvalue><enumvalue name="status_failure"><default> 1</default><description><para>Status failure. </para></description></enumvalue><enumvalue name="status_rejected"><default> 2</default><description><para>Status rejected. </para></description></enumvalue><enumvalue name="status_authorization_failure"><default> 3</default><description><para>Status authorization failure. </para></description></enumvalue><enumvalue name="status_network_error"><default> 4</default><description><para>Status network error. </para></description></enumvalue><description><para>STATUS data type enumeration. </para></description></enum><typedef name="octet"><description><para>OCTET data type. </para></description><type>uint8</type></typedef><typedef name="octet_string"><description><para>OCTET_STRING data type. </para></description><type>std::string</type></typedef><typedef name="status"><description><para>STATUS data type. </para></description><type><classname>enumeration</classname>&lt; status_enum &gt;</type></typedef><function name="operator&lt;&lt;"><type>std::ostream &amp;</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype><description><para>ostream. </para></description></parameter><parameter name="n"><paramtype>const <classname>null</classname> &amp;</paramtype><description><para>NULL data type. </para></description></parameter><description><para>NULL data type output.</para><para>

</para></description><returns><para>ostream reference. </para></returns></function></namespace></namespace><function name="operator++"><type>EnumT</type><template>
          <template-type-parameter name="EnumT"/>
        </template><parameter name="rs"><paramtype>EnumT &amp;</paramtype></parameter><parameter name=""><paramtype>int</paramtype></parameter><description><para>Define a postfix increment operator for enumeration types. </para></description></function></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/types/bin_query.hpp"><namespace name="odtone"><namespace name="mih"><struct name="querier_loc"><description><para>QUERIER_LOC data type. </para></description><data-member name="_location"><type>boost::variant&lt; <classname>null</classname>, location &gt;</type><description><para>Location information. </para></description></data-member><data-member name="_link_addr"><type>boost::variant&lt; <classname>null</classname>, link_addr &gt;</type><description><para>Link address. </para></description></data-member><data-member name="_nghb_radius"><type>boost::variant&lt; <classname>null</classname>, nghb_radius &gt;</type><description><para>Radius from the center point of querier’s location. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the QUERIER_LOC data type.</para><para>
</para></description></method></method-group><constructor><description><para>Construct an empty QUERIER_LOC data type. </para></description></constructor></struct><struct name="rpt_limit"><description><para>RPT_LIMIT data type. </para></description><data-member name="_max_ies"><type>uint16</type><description><para>Maximum number of IEs. </para></description></data-member><data-member name="_start_entry"><type>uint16</type><description><para>Start entry. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the RPT_LIMIT data type.</para><para>
</para></description></method></method-group><constructor><description><para>Construct an empty RPT_LIMIT data type. </para></description></constructor></struct><struct name="iq_bin_data"><description><para>IQ_BIN_DATA data type. </para></description><data-member name="_querier_loc"><type>boost::variant&lt; <classname>null</classname>, <classname>querier_loc</classname> &gt;</type><description><para>Querier's location. </para></description></data-member><data-member name="_net_type_inc"><type>boost::variant&lt; <classname>null</classname>, <classname>net_type_inc</classname> &gt;</type><description><para>Set of link types. </para></description></data-member><data-member name="_netwk_inc"><type>boost::variant&lt; <classname>null</classname>, netwk_inc &gt;</type><description><para>List of network identifiers. </para></description></data-member><data-member name="_rpt_templ"><type>boost::variant&lt; <classname>null</classname>, rpt_templ &gt;</type><description><para>List of IEs types. </para></description></data-member><data-member name="_rpt_limit"><type>boost::variant&lt; <classname>null</classname>, <classname>rpt_limit</classname> &gt;</type><description><para>Report limitation. </para></description></data-member><data-member name="_currency"><type>boost::variant&lt; <classname>null</classname>, <classname>curr_pref</classname> &gt;</type><description><para>Currency preference. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the IQ_BIN_DATA data type.</para><para>
</para></description></method></method-group><constructor><description><para>Construct an empty IQ_BIN_DATA data type. </para></description></constructor></struct><enum name="net_type_inc_enum"><enumvalue name="net_type_inc_gsm"><default> 0</default><description><para>GSM </para></description></enumvalue><enumvalue name="net_type_inc_gprs"><default> 1</default><description><para>GPRS </para></description></enumvalue><enumvalue name="net_type_inc_edge"><default> 2</default><description><para>EDGE </para></description></enumvalue><enumvalue name="net_type_inc_ethernet"><default> 3</default><description><para>Ethernet </para></description></enumvalue><enumvalue name="net_type_inc_wireless_other"><default> 4</default><description><para>Wireless other </para></description></enumvalue><enumvalue name="net_type_inc_ieee802_11"><default> 5</default><description><para>IEEE 802.11 </para></description></enumvalue><enumvalue name="net_type_inc_cdma2000"><default> 6</default><description><para>CDMA 2000 </para></description></enumvalue><enumvalue name="net_type_inc_umts"><default> 7</default><description><para>UMTS </para></description></enumvalue><enumvalue name="net_type_inc_cdma2000_hrpd"><default> 8</default><description><para>CDMA 2000 HRPD </para></description></enumvalue><enumvalue name="net_type_inc_ieee802_16"><default> 9</default><description><para>IEEE 802.16 </para></description></enumvalue><enumvalue name="net_type_inc_ieee802_20"><default> 10</default><description><para>IEEE 802.20 </para></description></enumvalue><enumvalue name="net_type_inc_ieee802_22"><default> 11</default><description><para>IEEE 802.22 </para></description></enumvalue><description><para>NET_TYPE_INC data type enumeration. </para></description></enum><typedef name="curr_pref"><description><para>CURR_PREG data type value. </para></description><type><classname>cost_curr</classname></type></typedef><typedef name="netwk_inc"><description><para>NETWK_INC data type value. </para></description><type>std::vector&lt; network_id &gt;</type></typedef><typedef name="nghb_radius"><description><para>NGHB_RADIUS data type value. </para></description><type>uint32</type></typedef><typedef name="ie_type"><description><para>IE_TYPE data type value. </para></description><type>uint32</type></typedef><typedef name="rpt_templ"><description><para>RTP_TEMPL data type value. </para></description><type>std::vector&lt; ie_type &gt;</type></typedef><typedef name="net_type_inc"><description><para>NET_TYPE_INC data type. </para></description><type><classname>bitmap</classname>&lt; 32, net_type_inc_enum &gt;</type></typedef><typedef name="iq_bin_data_list"><description><para>LIST(IQ_BIN_DATA) data type. </para></description><type>std::vector&lt; <classname>iq_bin_data</classname> &gt;</type></typedef></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/types/bin_response.hpp"><namespace name="odtone"><namespace name="mih"><class name="ir_bin_data"><description><para>IR_BIN_DATA data type. </para></description><struct name="unspecified_bool_t"><method-group name="public member functions"><method name="true_" cv=""><type>void</type></method></method-group></struct><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><parameter name="ar"><paramtype><classname>iarchive</classname> &amp;</paramtype><description><para>The archive from where deserialize the data type. </para></description></parameter><description><para>Deserialize the IR_BIN_DATA data type.</para><para>
</para></description></method><method name="serialize" cv=""><type>void</type><parameter name="ar"><paramtype><classname>oarchive</classname> &amp;</paramtype><description><para>The archive to where serialize the data type. </para></description></parameter><description><para>Serialize the IR_BIN_DATA data type.</para><para>
</para></description></method><method name="input" cv=""><type><classname>ir_bin_iarchive</classname></type><description><para>Get the IR_BIN_DATA input archive.</para><para>
</para></description><returns><para>The IR_BIN_DATA input archive. </para></returns></method><method name="output" cv=""><type><classname>ir_bin_oarchive</classname></type><description><para>Get the IR_BIN_DATA output archive.</para><para>
</para></description><returns><para>The IR_BIN_DATA output archive. </para></returns></method><method name="conversion-operator" cv=""><type>unspecified_bool</type></method><method name="operator!" cv=""><type>bool</type></method></method-group><constructor><description><para>Construct an empty IR_BIN_DATA data type. </para></description></constructor></class><struct name="ir_bin_iarchive_error"><description><para>ir_bin_archive_error exception. </para></description><method-group name="public member functions"/><constructor><description><para>Construct a ir_bin_iarchive_erro exception. </para></description></constructor></struct><class name="ir_bin_iarchive"><description><para>IR_BIN_DATA input archive. </para></description><method-group name="public member functions"><method name="operator&amp;" cv=""><type>boost::enable_if&lt; <classname>is_tlv_type</classname>&lt; T &gt;, <classname>ir_bin_iarchive</classname> &amp; &gt;::type</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="val"><paramtype>const T &amp;</paramtype><description><para>The value to serialize. </para></description></parameter><description><para>Serialize an IE to the IR_BIN_DATA data type.</para><para>
</para></description></method></method-group><constructor><parameter name="data"><paramtype><classname>ir_bin_data</classname> &amp;</paramtype><description><para>The <classname alt="odtone::mih::ir_bin_data">ir_bin_data</classname> from where extract the information. </para></description></parameter><description><para>Construct a <classname alt="odtone::mih::ir_bin_iarchive">ir_bin_iarchive</classname> from a <classname alt="odtone::mih::ir_bin_data">ir_bin_data</classname> data type.</para><para>
</para></description></constructor></class><class name="ir_bin_oarchive"><description><para>IR_BIN_DATA output archive. </para></description><method-group name="public member functions"><method name="operator&amp;" cv=""><type>boost::enable_if&lt; <classname>is_tlv_type</classname>&lt; T &gt;, <classname>ir_bin_oarchive</classname> &amp; &gt;::type</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="val"><paramtype>const T &amp;</paramtype><description><para>The value to deserialize. </para></description></parameter><description><para>Deserialize an IE from the IR_BIN_DATA data type.</para><para>
</para></description></method></method-group><constructor><parameter name="data"><paramtype><classname>ir_bin_data</classname> &amp;</paramtype></parameter><description><para>Construct a <classname alt="odtone::mih::ir_bin_iarchive">ir_bin_iarchive</classname>. </para></description></constructor></class><typedef name="ir_bin_data_list"><description><para>LIST(IR_BIN_DATA) data type. </para></description><type>std::vector&lt; <classname>ir_bin_data</classname> &gt;</type></typedef></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/types/capabilities.hpp"><namespace name="odtone"><namespace name="mih"><struct name="mbb_ho_supp"><description><para>MBB_HO_SUPP data type. </para></description><data-member name="first"><type><classname>network_type</classname></type><description><para>First network </para></description></data-member><data-member name="second"><type><classname>network_type</classname></type><description><para>Second network </para></description></data-member><data-member name="supported"><type>bool</type><description><para>Make before break supported </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the MBB_HO_SUPP data type.</para><para>
</para></description></method></method-group><constructor><description><para>Construct a MBB_HO_SUPP data type. </para></description></constructor></struct><enum name="mih_evt_list_enum"><enumvalue name="mih_evt_link_detected"><default> 0</default><description><para>Link detected </para></description></enumvalue><enumvalue name="mih_evt_link_up"><default> 1</default><description><para>Link up </para></description></enumvalue><enumvalue name="mih_evt_link_down"><default> 2</default><description><para>Link down </para></description></enumvalue><enumvalue name="mih_evt_link_parameters_report"><default> 3</default><description><para>Link parameters report </para></description></enumvalue><enumvalue name="mih_evt_link_going_down"><default> 4</default><description><para>Link doing down </para></description></enumvalue><enumvalue name="mih_evt_link_handover_imminent"><default> 5</default><description><para>Link handover imminent </para></description></enumvalue><enumvalue name="mih_evt_link_handover_complete"><default> 6</default><description><para>Link handover complete </para></description></enumvalue><enumvalue name="mih_evt_link_pdu_transmit_status"><default> 7</default><description><para>Link PDU transmit status </para></description></enumvalue><description><para>MIH_EVT_LIST data type enumeration. </para></description></enum><enum name="mih_cmd_list_enum"><enumvalue name="mih_cmd_link_get_parameters"><default> 0</default><description><para>Link get parameters </para></description></enumvalue><enumvalue name="mih_cmd_link_configure_thresholds"><default> 1</default><description><para>Link configure thresholds </para></description></enumvalue><enumvalue name="mih_cmd_link_actions"><default> 2</default><description><para>Link actions </para></description></enumvalue><enumvalue name="mih_cmd_net_ho_candidate_query"><default> 3</default><description><para>NET handover candidate query </para></description></enumvalue><enumvalue name="mih_cmd_net_ho_commit"><default> 3</default><description><para>NET handover commit </para></description></enumvalue><enumvalue name="mih_cmd_n2n_ho_query_resources"><default> 3</default><description><para>N2N handover query resources </para></description></enumvalue><enumvalue name="mih_cmd_n2n_ho_commit"><default> 3</default><description><para>N2N handover commit </para></description></enumvalue><enumvalue name="mih_cmd_n2n_ho_complete"><default> 3</default><description><para>N2N handover complete </para></description></enumvalue><enumvalue name="mih_cmd_mn_ho_candidate_query"><default> 4</default><description><para>MN handover candidate query </para></description></enumvalue><enumvalue name="mih_cmd_mn_ho_commit"><default> 4</default><description><para>MN handover commit </para></description></enumvalue><enumvalue name="mih_cmd_mn_ho_complete"><default> 4</default><description><para>MN handover complete </para></description></enumvalue><description><para>MIH_CMD_LIST data type enumeration. </para></description></enum><enum name="iq_type_list_enum"><enumvalue name="iq_type_binary_data"><default> 0</default><description><para>Binary data </para></description></enumvalue><enumvalue name="iq_type_rdf_data"><default> 1</default><description><para>RDF data </para></description></enumvalue><enumvalue name="iq_type_rdf_schema_url"><default> 2</default><description><para>RDF schema URL </para></description></enumvalue><enumvalue name="iq_type_rdf_schema"><default> 3</default><description><para>RDF schema </para></description></enumvalue><enumvalue name="iq_type_ie_network_type"><default> 4</default><description><para>IE network type </para></description></enumvalue><enumvalue name="iq_type_ie_operator_id"><default> 5</default><description><para>IE operator ID </para></description></enumvalue><enumvalue name="iq_type_ie_service_provider_id"><default> 6</default><description><para>IE service provider ID </para></description></enumvalue><enumvalue name="iq_type_ie_country_code"><default> 7</default><description><para>IE country code </para></description></enumvalue><enumvalue name="iq_type_ie_network_id"><default> 8</default><description><para>IE network ID </para></description></enumvalue><enumvalue name="iq_type_ie_network_aux_id"><default> 9</default><description><para>IE network auxiliar ID </para></description></enumvalue><enumvalue name="iq_type_ie_roaming_parteners"><default> 10</default><description><para>IE roaming parteners </para></description></enumvalue><enumvalue name="iq_type_ie_cost"><default> 11</default><description><para>IE cost </para></description></enumvalue><enumvalue name="iq_type_ie_network_qos"><default> 12</default><description><para>IE network QoS </para></description></enumvalue><enumvalue name="iq_type_ie_network_data_rate"><default> 13</default><description><para>IE network data rate </para></description></enumvalue><enumvalue name="iq_type_ie_net_regult_domain"><default> 14</default><description><para>IE NET result domain </para></description></enumvalue><enumvalue name="iq_type_ie_net_frequency_bands"><default> 15</default><description><para>IE NET frequency bands </para></description></enumvalue><enumvalue name="iq_type_ie_net_ip_cfg_methods"><default> 16</default><description><para>IE IP config methods </para></description></enumvalue><enumvalue name="iq_type_ie_net_capabilities"><default> 17</default><description><para>IE NET capabilities </para></description></enumvalue><enumvalue name="iq_type_ie_net_supported_lcp"><default> 18</default><description><para>IE NET supported LCP </para></description></enumvalue><enumvalue name="iq_type_ie_net_mob_mgmt_prot"><default> 19</default><description><para>IE NET mobility management protocl </para></description></enumvalue><enumvalue name="iq_type_ie_net_emserv_proxy"><default> 20</default><description><para>IE NET Server Proxy </para></description></enumvalue><enumvalue name="iq_type_ie_net_ims_proxy_cscf"><default> 21</default><description><para>IE NET IMS Proxy CSCF </para></description></enumvalue><enumvalue name="iq_type_ie_net_mobile_network"><default> 22</default><description><para>IE NET mobile network </para></description></enumvalue><enumvalue name="iq_type_ie_poa_link_addr"><default> 23</default><description><para>IE PoA link address </para></description></enumvalue><enumvalue name="iq_type_ie_poa_location"><default> 24</default><description><para>IE PoA location </para></description></enumvalue><enumvalue name="iq_type_ie_poa_channel_range"><default> 25</default><description><para>IE PoA channel range </para></description></enumvalue><enumvalue name="iq_type_ie_poa_system_info"><default> 26</default><description><para>IE PoA system info </para></description></enumvalue><enumvalue name="iq_type_ie_poa_subnet_info"><default> 27</default><description><para>IE PoA subnet info </para></description></enumvalue><enumvalue name="iq_type_ie_poa_ip_addr"><default> 28</default><description><para>IE PoA IP address </para></description></enumvalue><description><para>IQ_TYPE_LIST data type enumeration. </para></description></enum><enum name="transport_list_enum"><enumvalue name="transport_udp"><default> 0</default><description><para>UDP </para></description></enumvalue><enumvalue name="transport_tcp"><default> 1</default><description><para>TCP </para></description></enumvalue><description><para>TRANSPORT_LIST data type enumeration. </para></description></enum><typedef name="evt_cfg_info"><description><para>EVT_CFG_INFO data type. </para></description><type>boost::variant&lt; std::vector&lt; <classname>link_det_cfg</classname> &gt;, std::vector&lt; <classname>link_cfg_param</classname> &gt; &gt;</type></typedef><typedef name="evt_cfg_info_list"><description><para>LIST(EVT_CFG_INFO) data type. </para></description><type>std::vector&lt; evt_cfg_info &gt;</type></typedef><typedef name="mih_evt_list"><description><para>MIH_EVT_LIST data type. </para></description><type><classname>bitmap</classname>&lt; 32, mih_evt_list_enum &gt;</type></typedef><typedef name="mih_cmd_list"><description><para>MIH_CMD_LIST data type. </para></description><type><classname>bitmap</classname>&lt; 32, mih_cmd_list_enum &gt;</type></typedef><typedef name="iq_type_list"><description><para>IQ_TYPE_LIST data type. </para></description><type><classname>bitmap</classname>&lt; 64, iq_type_list_enum &gt;</type></typedef><typedef name="transport_list"><description><para>TRANSPORT_LIST data type. </para></description><type><classname>bitmap</classname>&lt; 16, transport_list_enum &gt;</type></typedef><typedef name="mbb_ho_supp_list"><description><para>LIST(MBB_HO_SUPP) data type. </para></description><type>std::vector&lt; <classname>mbb_ho_supp</classname> &gt;</type></typedef></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/types/handover.hpp"><namespace name="odtone"><namespace name="mih"><struct name="rq_result"><description><para>RQ_RESULT data type. </para></description><data-member name="poa_list"><type><classname>link_poa_list</classname></type><description><para>PoA list. </para></description></data-member><data-member name="poa_qos_list"><type><classname>qos_list</classname></type><description><para>Available resources for the PoA list. </para></description></data-member><data-member name="opt_ip_cfg_methods"><type>boost::variant&lt; <classname>null</classname>, bool, <classname>ip_cfg_methods</classname> &gt;</type><description><para>IP configuration method. </para></description></data-member><data-member name="opt_dhcp_serv"><type>boost::variant&lt; <classname>null</classname>, bool, <classname>dhcp_serv</classname> &gt;</type><description><para>DHCP server IP address. </para></description></data-member><data-member name="opt_fn_agnt"><type>boost::variant&lt; <classname>null</classname>, bool, <classname>fn_agent</classname> &gt;</type><description><para>Foreign agent IP address. </para></description></data-member><data-member name="opt_acc_rtr"><type>boost::variant&lt; <classname>null</classname>, bool, <classname>acc_rtr</classname> &gt;</type><description><para>Candidate access router IP address. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the RQ_RESULT data type.</para><para>
</para></description></method></method-group></struct><struct name="tgt_net_info_1"><description><para>Auxiliar TGT_NET_INFO data type. </para></description><data-member name="net"><type>network_id</type><description><para>Network identifier. </para></description></data-member><data-member name="aux_id"><type>boost::variant&lt; <classname>null</classname>, net_aux_id &gt;</type><description><para>Auxiliar network identifieer. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the auxiliar TGT_NET_INFO data type.</para><para>
</para></description></method></method-group></struct><struct name="rq_res_set"><description><para>REQ_RES_SET data type. </para></description><data-member name="mn_qos_list"><type><classname>qos_list</classname></type><description><para>Resources parameters. </para></description></data-member><data-member name="transport"><type>tsp_container</type><description><para>Transparent container. </para></description></data-member><data-member name="cause"><type><classname>ho_cause</classname></type><description><para>Handover cause. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the REQ_RES_SET data type.</para><para>
</para></description></method></method-group></struct><struct name="asgn_res_set"><description><para>ASGN_RES_SET data type. </para></description><data-member name="poa_qos_list"><type><classname>qos_list</classname></type><description><para>Resources parameters. </para></description></data-member><data-member name="transport"><type>tsp_container</type><description><para>Transparent container. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the ASGN_RES_SET data type.</para><para>
</para></description></method></method-group></struct><enum name="ho_status_enum"><enumvalue name="ho_status_permitted"><default> 0</default><description><para>Handover status permitted. </para></description></enumvalue><enumvalue name="ho_status_declined"><default> 1</default><description><para>Handover status declined. </para></description></enumvalue><description><para>HO_STATUS data type enumeration. </para></description></enum><enum name="ho_result_enum"><enumvalue name="ho_result_success"><default> 0</default><description><para>Handover result success. </para></description></enumvalue><enumvalue name="ho_result_failure"><default> 1</default><description><para>Handover result failure. </para></description></enumvalue><enumvalue name="ho_result_rejected"><default> 3</default><description><para>Handover result rejected. </para></description></enumvalue><description><para>HO_RESULT data type enumeration. </para></description></enum><enum name="ho_cause_enum"><enumvalue name="ho_cause_explicit_disconnect"><default> 0</default><description><para>Handover cause explicit disconnect. </para></description></enumvalue><enumvalue name="ho_cause_packet_timeout"><default> 1</default><description><para>Handover cause packet timeout. </para></description></enumvalue><enumvalue name="ho_cause_no_resource"><default> 2</default><description><para>Handover cause no resources. </para></description></enumvalue><enumvalue name="ho_cause_no_broadcast"><default> 3</default><description><para>Handover cause no broadcast. </para></description></enumvalue><enumvalue name="ho_cause_authentication_failure"><default> 4</default><description><para>Handover cause authentication failure. </para></description></enumvalue><enumvalue name="ho_cause_billing_failure"><default> 5</default><description><para>Handover cause billing failure. </para></description></enumvalue><description><para>HO_CAUSE data type enumeration. </para></description></enum><typedef name="ho_status"><description><para>HO_STATUS data type. </para></description><type><classname>enumeration</classname>&lt; ho_status_enum &gt;</type></typedef><typedef name="ho_result"><description><para>HO_RESULT data type. </para></description><type><classname>enumeration</classname>&lt; ho_result_enum &gt;</type></typedef><typedef name="ho_cause"><description><para>HO_CAUSE data type. </para></description><type><classname>enumeration</classname>&lt; ho_cause_enum &gt;</type></typedef><typedef name="rq_result_list"><description><para>LIST(RQ_RESULT) data type. </para></description><type>std::vector&lt; <classname>rq_result</classname> &gt;</type></typedef><typedef name="tgt_net_info"><description><para>TGT_NET_INFO data type. </para></description><type>boost::variant&lt; <classname>tgt_net_info_1</classname>, link_addr &gt;</type></typedef><typedef name="tgt_net_info_list"><description><para>LIST(TGT_NET_INFO) data type. </para></description><type>std::vector&lt; tgt_net_info &gt;</type></typedef><typedef name="predef_cfg_id"><description><para>PREDEF_CFG_ID data type. </para></description><type>sint8</type></typedef><typedef name="tsp_carrier"><description><para>TSP_CARRIER data type. </para></description><type>octet_string</type></typedef><typedef name="tsp_container"><description><para>TSP_CONTAINER data type. </para></description><type>boost::variant&lt; <classname>null</classname>, predef_cfg_id, tsp_carrier &gt;</type></typedef></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/types/identification.hpp"><namespace name="odtone"><namespace name="mih"><class name="id"><description><para>MIHF_ID data type. </para></description><method-group name="public member functions"><method name="assign" cv=""><type>void</type><parameter name="id"><paramtype>const octet_string &amp;</paramtype><description><para>MIHF ID string. </para></description></parameter><description><para>Assign the MIHF ID.</para><para>
</para></description></method><method name="to_string" cv="const"><type>const mih::octet_string &amp;</type><description><para>Get the MIHF_ID.</para><para>
</para></description><returns><para>The MIHF ID string. </para></returns></method><method name="operator==" cv="const"><type>bool</type><parameter name="other"><paramtype>const <classname>id</classname> &amp;</paramtype><description><para>MIHF ID to compare with. </para></description></parameter><description><para>Check if the MIHF_ID is equal to another MIHF_ID.</para><para>

</para></description><returns><para>True if they are equal or false otherwise. </para></returns></method><method name="operator!=" cv="const"><type>bool</type><parameter name="other"><paramtype>const <classname>id</classname> &amp;</paramtype><description><para>MIHF ID to compare with. </para></description></parameter><description><para>Check if the MIHF_ID is different of another MIHF_ID.</para><para>

</para></description><returns><para>True if they are different or false otherwise. </para></returns></method><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the MIHF_ID data type.</para><para>
</para></description></method></method-group><constructor><description><para>Construct an empty MIHF_ID. </para></description></constructor><constructor specifiers="explicit"><parameter name="id"><paramtype>const octet_string &amp;</paramtype><description><para>MIHF ID string. </para></description></parameter><description><para>Construct a MIHF_ID.</para><para>
</para></description></constructor></class></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/types/information.hpp"><namespace name="odtone"><namespace name="mih"><struct name="cost_curr"><description><para>COST_CURR data type. </para></description><data-member name="val"><type>uint8</type></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the COST_CURR data type.</para><para>
</para></description></method></method-group></struct><struct name="cost_value"><description><para>COST_VALUE data type. </para></description><data-member name="integer"><type>uint32</type><description><para>Cost value integer part </para></description></data-member><data-member name="fraction"><type>uint16</type><description><para>Cost value fraction part </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the COST_VALUE data type.</para><para>
</para></description></method></method-group></struct><struct name="cost"><description><para>COST data type. </para></description><data-member name="unit"><type><classname>cost_unit</classname></type><description><para>Cost unit </para></description></data-member><data-member name="value"><type><classname>cost_value</classname></type><description><para>Cost value </para></description></data-member><data-member name="curr"><type><classname>cost_curr</classname></type><description><para>Cost currency </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the COST data type.</para><para>
</para></description></method></method-group></struct><struct name="regu_domain"><description><para>REGU_DOMAIN data type. </para></description><data-member name="country_code"><type>cntry_code</type><description><para>Country code </para></description></data-member><data-member name="regulatory_class"><type>uint8</type><description><para>Regulatory class </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the REGU_DOMAIN data type.</para><para>
</para></description></method></method-group></struct><struct name="ch_range"><description><para>CH_RANGE data type. </para></description><data-member name="low"><type>uint32</type><description><para>Channel low range </para></description></data-member><data-member name="high"><type>uint32</type><description><para>Channel high range </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the CH_RANGE data type.</para><para>
</para></description></method></method-group></struct><struct name="gap"><description><para>GAP data type. </para></description><data-member name="ttg"><type>uint8</type><description><para>TTG - transmit/receive transition gap. </para></description></data-member><data-member name="rtg"><type>uint8</type><description><para>RTG - receive/transmit transition gap. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the GAP data type.</para><para>
</para></description></method></method-group></struct><struct name="burst_prof"><description><para>BURST_PROF data type. </para></description><data-member name="downbp"><type><classname>down_bp</classname></type><description><para>Downlink burst </para></description></data-member><data-member name="upbp"><type><classname>up_bp</classname></type><description><para>Uplink burst </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the BURST_PROF data type.</para><para>
</para></description></method></method-group></struct><struct name="cdma_codes"><description><para>CDMA_CODES data type. </para></description><data-member name="initcode"><type>init_code</type><description><para>Initial ranging code </para></description></data-member><data-member name="hocode"><type>ho_code</type><description><para>Handover ranging code </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the CDMA_CODES data type.</para><para>
</para></description></method></method-group></struct><struct name="dcd_udc"><description><para>DCD_UDC data type. </para></description><data-member name="baseid"><type>base_id</type><description><para>Base station identifier. </para></description></data-member><data-member name="bandwidth_"><type>bandwidth</type><description><para>Channel bandwidth in kb/s. </para></description></data-member><data-member name="ductrfreq"><type>du_ctr_freq</type><description><para>Downlink/Uplink center frequency in kHz. </para></description></data-member><data-member name="eirp_"><type>eirp</type><description><para>BS effective isotropic radiated power level </para></description></data-member><data-member name="gap_"><type><classname>gap</classname></type><description><para>GAP. </para></description></data-member><data-member name="burstprof"><type><classname>burst_prof</classname></type><description><para>Burst profile. </para></description></data-member><data-member name="cdmacodes"><type><classname>cdma_codes</classname></type><description><para>CDMA ranging codes. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the DCD_UDC data type.</para><para>
</para></description></method></method-group></struct><struct name="sib"><description><para>SIB data type. </para></description><data-member name="cellid"><type>cell_id</type><description><para>Cell identifier. </para></description></data-member><data-member name="fqcodenum"><type>fq_code_num</type><description><para>UMTS scrambling code, CDMA-2000 Walsh code. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the SIB data type.</para><para>
</para></description></method></method-group></struct><struct name="sys_params"><description><para>SYS_PARAMS data type. </para></description><data-member name="baseid"><type>base_id</type><description><para>Base station identifier. </para></description></data-member><data-member name="pilotpn"><type>pilot_pn</type><description><para>Pilot PN sequence offset index. </para></description></data-member><data-member name="freqid"><type>freq_id</type><description><para>Identifier of the carrier frequency. </para></description></data-member><data-member name="bandclass"><type>band_class</type><description><para>CDMA band class. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the SYS_PARAMS data type.</para><para>
</para></description></method></method-group></struct><struct name="parameters"><description><para>PARAMETERS data type. </para></description><data-member name="dcdudc"><type><classname>dcd_udc</classname></type><description><para>Downlink channel descriptor and the uplink channel descriptor. </para></description></data-member><data-member name="sib_"><type><classname>sib</classname></type><description><para>UMTS system information block. </para></description></data-member><data-member name="params"><type><classname>sys_params</classname></type><description><para>CDMA-2000 system parameters. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the PARAMETERS data type.</para><para>
</para></description></method></method-group></struct><struct name="network_type"><description><para>NETWORK_TYPE data type. </para></description><data-member name="link"><type>boost::variant&lt; <classname>null</classname>, <classname>link_type</classname> &gt;</type><description><para>Link type </para></description></data-member><data-member name="subtype"><type>boost::variant&lt; <classname>null</classname>, <classname>netsubtype</classname> &gt;</type><description><para>Link subtype </para></description></data-member><data-member name="typeext"><type>boost::variant&lt; <classname>null</classname>, type_ext &gt;</type><description><para>Link type extension </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the NETWORK_TYPE data type.</para><para>
</para></description></method></method-group><constructor><description><para>Construct an empty NETWORK_TYPE data type. </para></description></constructor><method-group name="friend functions"><method name="operator&lt;&lt;" cv=""><type>friend std::ostream &amp;</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype><description><para>ostream. </para></description></parameter><parameter name="nt"><paramtype>const <classname>network_type</classname> &amp;</paramtype><description><para>NETWORK_TYPE data type. </para></description></parameter><description><para>NETWORK_TYPE data type output.</para><para>

</para></description><returns><para>ostream reference. </para></returns></method></method-group></struct><struct name="system_info"><description><para>SYSTEM_INFO data type. </para></description><data-member name="nettype"><type><classname>network_type</classname></type><description><para>Network type. </para></description></data-member><data-member name="linkaddr"><type>link_addr</type><description><para>Link address. </para></description></data-member><data-member name="params"><type>boost::variant&lt; <classname>null</classname>, <classname>parameters</classname> &gt;</type><description><para>System information. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the SYSTEM_INFO data type.</para><para>
</para></description></method></method-group></struct><struct name="operator_id"><description><para>OPERATOR_ID data type. </para></description><data-member name="opname"><type>op_name</type><description><para>Operator name. </para></description></data-member><data-member name="opnamespace"><type><classname>op_namespace</classname></type><description><para>Operator namespace. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the OPERATOR_ID data type.</para><para>
</para></description></method></method-group></struct><struct name="net_type_addr"><description><para>NET_TYPE_ADDR data type. </para></description><data-member name="nettype"><type><classname>network_type</classname></type><description><para>Network type. </para></description></data-member><data-member name="addr"><type>link_addr</type><description><para>Link address. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the NET_TYPE_ADDR data type.</para><para>
</para></description></method></method-group><method-group name="friend functions"><method name="operator&lt;&lt;" cv=""><type>friend std::ostream &amp;</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype><description><para>ostream. </para></description></parameter><parameter name="nta"><paramtype>const <classname>net_type_addr</classname> &amp;</paramtype><description><para>NET_TYPE_ADDR data type. </para></description></parameter><description><para>NET_TYPE_ADDR data type output.</para><para>

</para></description><returns><para>ostream reference. </para></returns></method></method-group></struct><enum name="cost_unit_enum"><enumvalue name="cost_unit_second"><default> 0</default><description><para>Cost unit second </para></description></enumvalue><enumvalue name="cost_unit_minute"><default> 1</default><description><para>Cost unit minute </para></description></enumvalue><enumvalue name="cost_unit_hours"><default> 2</default><description><para>Cost unit hour </para></description></enumvalue><enumvalue name="cost_unit_day"><default> 3</default><description><para>Cost unit day </para></description></enumvalue><enumvalue name="cost_unit_week"><default> 4</default><description><para>Cost unit week </para></description></enumvalue><enumvalue name="cost_unit_month"><default> 5</default><description><para>Cost unit month </para></description></enumvalue><enumvalue name="cost_unit_year"><default> 6</default><description><para>Cost unit year </para></description></enumvalue><enumvalue name="cost_unit_free"><default> 7</default><description><para>Cost unit free </para></description></enumvalue><enumvalue name="cost_unit_flat_rate"><default> 8</default><description><para>Cost unit flat rate </para></description></enumvalue><description><para>COST_UNIT data type enumeration. </para></description></enum><enum name="netsubtype_enum"><enumvalue name="netsubtype_eth10"><default> 0</default><description><para>Ethernet - IEEE 802.3 - 10 Mb. </para></description></enumvalue><enumvalue name="netsubtype_eth100"><default> 1</default><description><para>Ethernet - IEEE 802.3 - 100 Mb. </para></description></enumvalue><enumvalue name="netsubtype_eth1000"><default> 2</default><description><para>Ethernet - IEEE 802.3 - 1000 Mb. </para></description></enumvalue><enumvalue name="netsubtype_iee80211_2_4GHz"><default> 0</default><description><para>Wireless - IEEE 802.11 - 2.4GHz </para></description></enumvalue><enumvalue name="netsubtype_iee80211_5GHz"><default> 1</default><description><para>Wireless - IEEE 802.11 - 5GHz </para></description></enumvalue><enumvalue name="netsubtype_iee80211_4_9GHz"><default> 2</default><description><para>Wireless - IEEE 802.11 - 4.9GHz </para></description></enumvalue><enumvalue name="netsubtype_iee80211_3_65GHz"><default> 3</default><description><para>Wireless - IEEE 802.11 - 3.65GHz </para></description></enumvalue><enumvalue name="netsubtype_iee80211_316THz"><default> 4</default><description><para>Wireless - IEEE 802.11 - 316Thz </para></description></enumvalue><enumvalue name="netsubtype_umts_rel99"><default> 0</default><description><para>Wireless - UMTS - Rel-99 </para></description></enumvalue><enumvalue name="netsubtype_umts_rel4"><default> 1</default><description><para>Wireless - UMTS - Rel-4 </para></description></enumvalue><enumvalue name="netsubtype_umts_rel5_hsdpa"><default> 2</default><description><para>Wireless - UMTS - Rel-5 (w/ HSDPA) </para></description></enumvalue><enumvalue name="netsubtype_umts_rel6_hsupa"><default> 3</default><description><para>Wireless - UMTS - Rel-6 (w/ HSUPA) </para></description></enumvalue><enumvalue name="netsubtype_umts_rel7_mimo"><default> 4</default><description><para>Wireless - UMTS - Rel-7 (MIMO/OFDM) </para></description></enumvalue><enumvalue name="netsubtype_umts_rel8"><default> 5</default><description><para>Wireless - UMTS - rel-8 </para></description></enumvalue><enumvalue name="netsubtype_cdma2000_hrpd_rev0"><default> 0</default><description><para>Wireless - CDMA-2000-HRPD - Rev-0 </para></description></enumvalue><enumvalue name="netsubtype_cdma2000_hrpd_revA"><default> 1</default><description><para>Wireless - CDMA-2000-HRPD - Rev-A </para></description></enumvalue><enumvalue name="netsubtype_cdma2000_hrpd_revB"><default> 2</default><description><para>Wireless - CDMA-2000-HRPD - Rev-B </para></description></enumvalue><enumvalue name="netsubtype_cdma2000_hrpd_revC"><default> 3</default><description><para>Wireless - CDMA-2000-HRPD - Rev-C </para></description></enumvalue><enumvalue name="netsubtype_iee80216_2_5GHz"><default> 0</default><description><para>Wireless - IEEE 802.16 - 2.5GHz </para></description></enumvalue><enumvalue name="netsubtype_iee80216_3_5GHz"><default> 1</default><description><para>Wireless - IEEE 802.16 - 3.5GHz </para></description></enumvalue><description><para>SUBTYPE data type enumeration. </para></description></enum><enum name="op_namespace_enum"><enumvalue name="op_namespace_gsm_umts"><default> 0</default><description><para>GSM/UMTS. </para></description></enumvalue><enumvalue name="op_namespace_cdma"><default> 1</default><description><para>CDMA. </para></description></enumvalue><enumvalue name="op_namespace_realm"><default> 2</default><description><para>REALM. </para></description></enumvalue><enumvalue name="op_namespace_itu_t_tsb"><default> 3</default><description><para>ITU-T/TSB. </para></description></enumvalue><enumvalue name="op_namespace_general"><default> 4</default><description><para>General. </para></description></enumvalue><description><para>OP_NAMESPACE data type enumeration. </para></description></enum><enum name="supported_lcp_enum"><enumvalue name="supported_lcp_null"><default> 0</default><description><para>NULL. </para></description></enumvalue><enumvalue name="supported_lcp_lldp"><default> 1</default><description><para>LLDP. </para></description></enumvalue><enumvalue name="supported_lcp_lbyr_with_lldp"><default> 2</default><description><para>LbyR with LLDP. </para></description></enumvalue><enumvalue name="supported_lcp_lldp_med"><default> 11</default><description><para>LLDP-MED. </para></description></enumvalue><enumvalue name="supported_lcp_lbyr_with_lld_med"><default> 12</default><description><para>LbyR with LLDP-MED. </para></description></enumvalue><enumvalue name="supported_lcp_u_tdoa"><default> 21</default><description><para>U-TDoA. </para></description></enumvalue><enumvalue name="supported_lcp_d_tdoa"><default> 22</default><description><para>D-TDoA. </para></description></enumvalue><enumvalue name="supported_lcp_dhcp"><default> 31</default><description><para>DHCP. </para></description></enumvalue><enumvalue name="supported_lcp_lbyr_with_dhcp"><default> 32</default><description><para>LbyR with DHCP. </para></description></enumvalue><enumvalue name="supported_lcp_oma_supl"><default> 41</default><description><para>OMA SUPL. </para></description></enumvalue><enumvalue name="supported_lcp_ieee_802_11"><default> 42</default><description><para>IEEE 802.11. </para></description></enumvalue><enumvalue name="supported_lcp_lbyr_with_ieee_802_11"><default> 43</default><description><para>LbyR with IEEE 802.11. </para></description></enumvalue><enumvalue name="supported_lcp_held"><default> 51</default><description><para>HELD. </para></description></enumvalue><enumvalue name="supported_lcp_lbyr_with_held"><default> 52</default><description><para>LbyR with HELD. </para></description></enumvalue><description><para>SUPPORTED_LCP data type enumeration. </para></description></enum><typedef name="net_aux_id"><description><para>NET_AUX_ID data type. </para></description><type>octet_string</type></typedef><typedef name="network_id"><description><para>NETWORK_ID data type. </para></description><type>octet_string</type></typedef><typedef name="band_class"><description><para>BAND_CLASS data type. </para></description><type>uint8</type></typedef><typedef name="bandwidth"><description><para>BANDWIDTH data type. </para></description><type>uint16</type></typedef><typedef name="base_id"><description><para>BASE_ID data type. </para></description><type>uint16</type></typedef><typedef name="cntry_code"><description><para>CNTRY_CODE data type. </para></description><type>uint16</type></typedef><typedef name="du_ctr_freq"><description><para>DU_CTR_FREQ data type. </para></description><type>sint64</type></typedef><typedef name="eirp"><description><para>EIRP data type. </para></description><type>sint8</type></typedef><typedef name="init_code"><description><para>INIT_CODE data type. </para></description><type>sint8</type></typedef><typedef name="ho_code"><description><para>HO_CODE data type. </para></description><type>sint8</type></typedef><typedef name="fq_code_num"><description><para>FQ_CODE_NUM data type. </para></description><type>sint16</type></typedef><typedef name="pilot_pn"><description><para>PILOT_PN data type. </para></description><type>sint16</type></typedef><typedef name="freq_id"><description><para>FREQ_ID data type. </para></description><type>sint16</type></typedef><typedef name="down_bp"><description><para>DOWN_BP data type. </para></description><type><classname>bitmap</classname>&lt; 256, uint8 &gt;</type></typedef><typedef name="up_bp"><description><para>UP_BP data type. </para></description><type><classname>bitmap</classname>&lt; 256, uint8 &gt;</type></typedef><typedef name="cost_unit"><description><para>COST_UNIT data type. </para></description><type><classname>enumeration</classname>&lt; cost_unit_enum &gt;</type></typedef><typedef name="data_rate"><description><para>DATA_RATE data type. </para></description><type>uint32</type></typedef><typedef name="freq_bands"><description><para>FREQ_BANDS data type. </para></description><type>std::vector&lt; uint32 &gt;</type></typedef><typedef name="netsubtype"><description><para>SUBTYPE data type. </para></description><type><classname>bitmap</classname>&lt; 64, netsubtype_enum &gt;</type></typedef><typedef name="type_ext"><description><para>TYPE_EXT data type. </para></description><type>octet_string</type></typedef><typedef name="op_name"><description><para>OP_NAME data type. </para></description><type>octet_string</type></typedef><typedef name="sp_id"><description><para>SP_ID data type. </para></description><type>octet_string</type></typedef><typedef name="op_namespace"><description><para>OP_NAMESPACE data type. </para></description><type><classname>enumeration</classname>&lt; op_namespace_enum &gt;</type></typedef><typedef name="roaming_ptns"><description><para>ROAMING_PTNS data type. </para></description><type>std::vector&lt; <classname>operator_id</classname> &gt;</type></typedef><typedef name="supported_lcp"><description><para>SUPPORTED_LCP data type. </para></description><type><classname>enumeration</classname>&lt; supported_lcp_enum &gt;</type></typedef><typedef name="proxy_addr"><description><para>PROXY_ADDR data type. </para></description><type>boost::variant&lt; <classname>ip4_addr</classname>, <classname>ip6_addr</classname>, fqdn &gt;</type></typedef><typedef name="net_type_addr_list"><description><para>LIST(NET_TYPE_ADDR) data type. </para></description><type>std::vector&lt; <classname>net_type_addr</classname> &gt;</type></typedef></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/types/information_elements.hpp"><namespace name="odtone"><namespace name="mih"><struct name="ie_poa_subnet_info_list"><description><para>PoA subnet info list IE type. </para></description><typedef name="base"><type>std::vector&lt; <classname>ie_poa_subnet_info</classname> &gt;</type></typedef><data-member name="vendor_ies"><type><classname>vendor_ie_list</classname></type></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><parameter name="ar"><paramtype><classname>oarchive</classname> &amp;</paramtype><description><para>The archive to where serialize the data type. </para></description></parameter><description><para>Serialize the PoA subnet info list IE type.</para><para>
</para></description></method><method name="serialize" cv=""><type>void</type><parameter name="ar"><paramtype><classname>iarchive</classname> &amp;</paramtype><description><para>The archive from where deserialize the data type. </para></description></parameter><description><para>Deserialize the PoA subnet info list IE type.</para><para>
</para></description></method></method-group></struct><struct name="ie_poa_ip_addr_list"><description><para>PoA IP address list IE type. </para></description><typedef name="base"><type>std::vector&lt; <classname>ie_poa_ip_addr</classname> &gt;</type></typedef><data-member name="vendor_ies"><type><classname>vendor_ie_list</classname></type></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><parameter name="ar"><paramtype><classname>oarchive</classname> &amp;</paramtype><description><para>The archive from where deserialize the data type. </para></description></parameter><description><para>Deserialize the PoA IP address list IE type.</para><para>
</para></description></method><method name="serialize" cv=""><type>void</type><parameter name="ar"><paramtype><classname>iarchive</classname> &amp;</paramtype><description><para>The archive to where serialize the data type. </para></description></parameter><description><para>Serialize the PoA IP address list IE type.</para><para>
</para></description></method></method-group></struct><struct name="ie_container_poa"><description><para>PoA IE type. </para></description><data-member name="poa_link_addr"><type>ie_poa_link_addr</type></data-member><data-member name="poa_location"><type>ie_poa_location</type></data-member><data-member name="poa_channel_range"><type><classname>ie_poa_channel_range</classname></type></data-member><data-member name="poa_system_info"><type><classname>ie_poa_system_info</classname></type></data-member><data-member name="poa_subnet_info"><type><classname>ie_poa_subnet_info_list</classname></type></data-member><data-member name="poa_ip_addr"><type><classname>ie_poa_ip_addr_list</classname></type></data-member><data-member name="vendor_ies"><type><classname>vendor_ie_list</classname></type></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive from/to where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the PoA IE type.</para><para>
</para></description></method><method name="serialize_opt_lists" cv=""><type>void</type><parameter name="ar"><paramtype><classname>iarchive</classname> &amp;</paramtype><description><para>The archive to where deserialize the data type. </para></description></parameter><description><para>Deserialize optional IEs.</para><para>
</para></description></method><method name="serialize_opt_lists" cv=""><type>void</type><parameter name="ar"><paramtype><classname>oarchive</classname> &amp;</paramtype><description><para>The archive from where serialize the data type. </para></description></parameter><description><para>Serialize optional IEs.</para><para>
</para></description></method></method-group></struct><class name="ie_container_poa_list"><description><para>PoA list IE type. </para></description><data-member name="vendor_ies"><type><classname>vendor_ie_list</classname></type></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><parameter name="ar"><paramtype><classname>oarchive</classname> &amp;</paramtype><description><para>The archive to where serialize the data type. </para></description></parameter><description><para>Serialize the PoA list IE type.</para><para>
</para></description></method><method name="serialize" cv=""><type>void</type><parameter name="ar"><paramtype><classname>iarchive</classname> &amp;</paramtype><description><para>The archive from where deserialize the data type. </para></description></parameter><description><para>Deserialize the PoA list IE type.</para><para>
</para></description></method></method-group></class><struct name="ie_container_network"><description><para>Network IE type. </para></description><data-member name="network_type"><type><classname>ie_network_type</classname></type></data-member><data-member name="operator_id"><type><classname>ie_operator_id</classname></type></data-member><data-member name="service_provider_id"><type>boost::optional&lt; ie_service_provider_id &gt;</type></data-member><data-member name="country_code"><type>boost::optional&lt; ie_country_code &gt;</type></data-member><data-member name="network_id"><type>boost::optional&lt; ie_network_id &gt;</type></data-member><data-member name="network_aux_id"><type>boost::optional&lt; ie_network_aux_id &gt;</type></data-member><data-member name="roaming_partners"><type>boost::optional&lt; ie_roaming_partners &gt;</type></data-member><data-member name="cost"><type>boost::optional&lt; <classname>ie_cost</classname> &gt;</type></data-member><data-member name="network_qos"><type>boost::optional&lt; <classname>ie_network_qos</classname> &gt;</type></data-member><data-member name="network_data_rate"><type>boost::optional&lt; ie_network_data_rate &gt;</type></data-member><data-member name="net_regulat_domain"><type>boost::optional&lt; <classname>ie_net_regulat_domain</classname> &gt;</type></data-member><data-member name="net_frequency_bands"><type>boost::optional&lt; ie_net_frequency_bands &gt;</type></data-member><data-member name="net_ip_cfg_methods"><type>boost::optional&lt; <classname>ie_net_ip_cfg_methods</classname> &gt;</type></data-member><data-member name="net_capabilities"><type>boost::optional&lt; <classname>ie_net_capabilities</classname> &gt;</type></data-member><data-member name="net_supported_lcp"><type>boost::optional&lt; <classname>ie_net_supported_lcp</classname> &gt;</type></data-member><data-member name="net_mob_mgmt_prot"><type>boost::optional&lt; <classname>ie_net_mob_mgmt_prot</classname> &gt;</type></data-member><data-member name="net_emserv_proxy"><type>boost::optional&lt; ie_net_emserv_proxy &gt;</type></data-member><data-member name="net_ims_proxy_cscf"><type>boost::optional&lt; ie_net_ims_proxy_cscf &gt;</type></data-member><data-member name="net_mobile_network"><type>boost::optional&lt; ie_net_mobile_network &gt;</type></data-member><data-member name="poas"><type><classname>ie_container_poa_list</classname></type></data-member><data-member name="vendor_ies"><type><classname>vendor_ie_list</classname></type></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the network IE type.</para><para>
</para></description></method><method name="serialize_opt_lists" cv=""><type>void</type><parameter name="ar"><paramtype><classname>iarchive</classname> &amp;</paramtype><description><para>The archive to where deserialize the data type. </para></description></parameter><description><para>Deserialize optional IEs.</para><para>
</para></description></method><method name="serialize_opt_lists" cv=""><type>void</type><parameter name="ar"><paramtype><classname>oarchive</classname> &amp;</paramtype><description><para>The archive from where serialize the data type. </para></description></parameter><description><para>Serialize optional IEs.</para><para>
</para></description></method></method-group></struct><class name="ie_container_list_of_networks"><description><para>Network list IE type. </para></description><data-member name="vendor_ies"><type><classname>vendor_ie_list</classname></type></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><parameter name="ar"><paramtype><classname>oarchive</classname> &amp;</paramtype><description><para>The archive to where serialize the data type. </para></description></parameter><description><para>Serialize the network list IE type.</para><para>
</para></description></method><method name="serialize" cv=""><type>void</type><parameter name="ar"><paramtype><classname>iarchive</classname> &amp;</paramtype><description><para>The archive from where deserialize the data type. </para></description></parameter><description><para>Deserialize the network list IE type.</para><para>
</para></description></method></method-group></class><typedef name="ie_network_type"><description><para>Network type IE type. </para></description><type><classname>network_type</classname></type></typedef><typedef name="ie_operator_id"><description><para>Operator ID IE type. </para></description><type><classname>operator_id</classname></type></typedef><typedef name="ie_service_provider_id"><description><para>Service provider ID IE type. </para></description><type>sp_id</type></typedef><typedef name="ie_country_code"><description><para>Countrry code IE type. </para></description><type>cntry_code</type></typedef><typedef name="ie_network_id"><description><para>Network ID IE type. </para></description><type>network_id</type></typedef><typedef name="ie_network_aux_id"><description><para>Auxiliar network ID IE type. </para></description><type>net_aux_id</type></typedef><typedef name="ie_roaming_partners"><description><para>Roaming partners IE type. </para></description><type>roaming_ptns</type></typedef><typedef name="ie_cost"><description><para>Cost IE type. </para></description><type><classname>cost</classname></type></typedef><typedef name="ie_network_qos"><description><para>Network QoS IE type. </para></description><type><classname>qos_list</classname></type></typedef><typedef name="ie_network_data_rate"><description><para>Network data rate IE type. </para></description><type>data_rate</type></typedef><typedef name="ie_net_regulat_domain"><description><para>Network regulatory class IE type. </para></description><type><classname>regu_domain</classname></type></typedef><typedef name="ie_net_frequency_bands"><description><para>Network frequency bands IE type. </para></description><type>freq_bands</type></typedef><typedef name="ie_net_ip_cfg_methods"><description><para>Network IP configuration methods IE type. </para></description><type><classname>ip_config</classname></type></typedef><typedef name="ie_net_capabilities"><description><para>Network capabilities IE type. </para></description><type><classname>net_caps</classname></type></typedef><typedef name="ie_net_supported_lcp"><description><para>Network supported LCP IE type. </para></description><type><classname>supported_lcp</classname></type></typedef><typedef name="ie_net_mob_mgmt_prot"><description><para>Network mobility management protocol IE type. </para></description><type><classname>ip_mob_mgmt</classname></type></typedef><typedef name="ie_net_emserv_proxy"><description><para>Network proxy PSAP IE type. </para></description><type>proxy_addr</type></typedef><typedef name="ie_net_ims_proxy_cscf"><description><para>Network IMS proxy P-CSCF IE type. </para></description><type>proxy_addr</type></typedef><typedef name="ie_net_mobile_network"><description><para>Network mobile IE type. </para></description><type>bool</type></typedef><typedef name="ie_poa_link_addr"><description><para>PoA link address IE type. </para></description><type>link_addr</type></typedef><typedef name="ie_poa_location"><description><para>PoA location IE type. </para></description><type>location</type></typedef><typedef name="ie_poa_channel_range"><description><para>PoA channel range IE type. </para></description><type><classname>ch_range</classname></type></typedef><typedef name="ie_poa_system_info"><description><para>PoA system information IE type. </para></description><type><classname>system_info</classname></type></typedef><typedef name="ie_poa_subnet_info"><description><para>PoA subnet information IE type. </para></description><type><classname>ip_subnet_info</classname></type></typedef><typedef name="ie_poa_ip_addr"><description><para>PoA IP address IE type. </para></description><type><classname>ip_addr</classname></type></typedef><data-member name="tlv_ie_network_type" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>ie_network_type</classname>, <classname>tlv4_</classname>&lt; 0x10000000 &gt; &gt;</type><description><para>List of networks container. </para></description></data-member><data-member name="tlv_ie_operator_id" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>ie_operator_id</classname>, <classname>tlv4_</classname>&lt; 0x10000001 &gt; &gt;</type></data-member><data-member name="tlv_ie_service_provider_id" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; ie_service_provider_id, <classname>tlv4_</classname>&lt; 0x10000002 &gt; &gt;</type></data-member><data-member name="tlv_ie_country_code" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; ie_country_code, <classname>tlv4_</classname>&lt; 0x10000003 &gt; &gt;</type></data-member><data-member name="tlv_ie_network_id" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; ie_network_id, <classname>tlv4_</classname>&lt; 0x10000100 &gt; &gt;</type></data-member><data-member name="tlv_ie_network_aux_id" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; ie_network_aux_id, <classname>tlv4_</classname>&lt; 0x10000101 &gt; &gt;</type></data-member><data-member name="tlv_ie_roaming_partners" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; ie_roaming_partners, <classname>tlv4_</classname>&lt; 0x10000102 &gt; &gt;</type></data-member><data-member name="tlv_ie_cost" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>ie_cost</classname>, <classname>tlv4_</classname>&lt; 0x10000103 &gt; &gt;</type></data-member><data-member name="tlv_ie_network_qos" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>ie_network_qos</classname>, <classname>tlv4_</classname>&lt; 0x10000105 &gt; &gt;</type></data-member><data-member name="tlv_ie_network_data_rate" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; ie_network_data_rate, <classname>tlv4_</classname>&lt; 0x10000106 &gt; &gt;</type></data-member><data-member name="tlv_ie_net_regulat_domain" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>ie_net_regulat_domain</classname>, <classname>tlv4_</classname>&lt; 0x10000107 &gt; &gt;</type></data-member><data-member name="tlv_ie_net_frequency_bands" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; ie_net_frequency_bands, <classname>tlv4_</classname>&lt; 0x10000108 &gt; &gt;</type></data-member><data-member name="tlv_ie_net_ip_cfg_methods" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>ie_net_ip_cfg_methods</classname>, <classname>tlv4_</classname>&lt; 0x10000109 &gt; &gt;</type></data-member><data-member name="tlv_ie_net_capabilities" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>ie_net_capabilities</classname>, <classname>tlv4_</classname>&lt; 0x1000010A &gt; &gt;</type></data-member><data-member name="tlv_ie_net_supported_lcp" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>ie_net_supported_lcp</classname>, <classname>tlv4_</classname>&lt; 0x1000010B &gt; &gt;</type></data-member><data-member name="tlv_ie_net_mob_mgmt_prot" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>ie_net_mob_mgmt_prot</classname>, <classname>tlv4_</classname>&lt; 0x1000010C &gt; &gt;</type></data-member><data-member name="tlv_ie_net_emserv_proxy" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; ie_net_emserv_proxy, <classname>tlv4_</classname>&lt; 0x1000010D &gt; &gt;</type></data-member><data-member name="tlv_ie_net_ims_proxy_cscf" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; ie_net_ims_proxy_cscf, <classname>tlv4_</classname>&lt; 0x1000010E &gt; &gt;</type></data-member><data-member name="tlv_ie_net_mobile_network" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; ie_net_mobile_network, <classname>tlv4_</classname>&lt; 0x1000010F &gt; &gt;</type></data-member><data-member name="tlv_ie_poa_link_addr" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; ie_poa_link_addr, <classname>tlv4_</classname>&lt; 0x10000200 &gt; &gt;</type></data-member><data-member name="tlv_ie_poa_location" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; ie_poa_location, <classname>tlv4_</classname>&lt; 0x10000201 &gt; &gt;</type></data-member><data-member name="tlv_ie_poa_channel_range" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>ie_poa_channel_range</classname>, <classname>tlv4_</classname>&lt; 0x10000202 &gt; &gt;</type></data-member><data-member name="tlv_ie_poa_system_info" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>ie_poa_system_info</classname>, <classname>tlv4_</classname>&lt; 0x10000203 &gt; &gt;</type></data-member><data-member name="tlv_ie_poa_subnet_info" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>ie_poa_subnet_info</classname>, <classname>tlv4_</classname>&lt; 0x10000204 &gt; &gt;</type></data-member><data-member name="tlv_ie_poa_ip_addr" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>ie_poa_ip_addr</classname>, <classname>tlv4_</classname>&lt; 0x10000205 &gt; &gt;</type></data-member><data-member name="tlv_ie_container_poa" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>ie_container_poa</classname>, <classname>tlv4_</classname>&lt; 0x10000302 &gt; &gt;</type></data-member><data-member name="tlv_ie_container_network" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>ie_container_network</classname>, <classname>tlv4_</classname>&lt; 0x10000301 &gt; &gt;</type></data-member><data-member name="tlv_ie_container_list_of_networks" specifiers="static"><type>const <classname>tlv_cast_</classname>&lt; <classname>ie_container_list_of_networks</classname>, <classname>tlv4_</classname>&lt; 0x10000300 &gt; &gt;</type></data-member></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/types/ipconfig.hpp"><namespace name="odtone"><namespace name="mih"><struct name="ip4_addr"><description><para>IP4_ADDR data type. </para></description><data-member name="addr"><type>uint8</type><description><para>IPv4 byte values </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the IP4_ADDR data type.</para><para>
</para></description></method></method-group></struct><struct name="ip6_addr"><description><para>IP6_ADDR data type. </para></description><data-member name="addr"><type>uint8</type><description><para>IPv6 byte values </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the IP6_ADDR data type.</para><para>
</para></description></method></method-group></struct><struct name="ip_config"><description><para>IP_CONFIG data type. </para></description><data-member name="ipcfgmethods"><type><classname>ip_cfg_methods</classname></type><description><para>IP configuration methods </para></description></data-member><data-member name="dhcpserv"><type>boost::variant&lt; <classname>null</classname>, <classname>dhcp_serv</classname> &gt;</type><description><para>DHCP IP address </para></description></data-member><data-member name="fnagent"><type>boost::variant&lt; <classname>null</classname>, <classname>fn_agent</classname> &gt;</type><description><para>Foreign Agent IP Address </para></description></data-member><data-member name="accrtr"><type>boost::variant&lt; <classname>null</classname>, <classname>acc_rtr</classname> &gt;</type><description><para>Candidate access router IP address. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the IP_CONFIG data type.</para><para>
</para></description></method></method-group></struct><struct name="ip_subnet_info"><description><para>IP_SUBNET_INFO data type. </para></description><data-member name="ipprefixlen"><type>ip_prefix_len</type><description><para>Network prefix IP Address lenght </para></description></data-member><data-member name="ipaddr"><type><classname>ip_addr</classname></type><description><para>Network prefix IP address </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the IP_SUBNET_INFO data type.</para><para>
</para></description></method></method-group></struct><enum name="ip_cfg_methods_enum"><enumvalue name="ip_cfg_ipv4_static"><default> 0</default><description><para>IPv4 static configuration. </para></description></enumvalue><enumvalue name="ip_cfg_ipv4_dynamic"><default> 1</default><description><para>IPv4 dynamic configuration (DHCPv4). </para></description></enumvalue><enumvalue name="ip_cfg_ipv4_mobile_fa"><default> 2</default><description><para>Mobile IPv4 with FA-CoA. </para></description></enumvalue><enumvalue name="ip_cfg_ipv4_mobile"><default> 3</default><description><para>Mobile IPv4 without FA (Co-located CoA). </para></description></enumvalue><enumvalue name="ip_cfg_ipv6_stateless"><default> 11</default><description><para>IPv6 stateless address configuration. </para></description></enumvalue><enumvalue name="ip_cfg_ipv6_stateful"><default> 12</default><description><para>IPv6 stateful address configuration (DHCPv6). </para></description></enumvalue><enumvalue name="ip_cfg_ipv6_manual"><default> 13</default><description><para>IPv6 manual configuration. </para></description></enumvalue><description><para>IP_CFG_METHODS data type enumeration. </para></description></enum><enum name="ip_mob_mgmt_enum"><enumvalue name="ip_mob_ipv4"><default> 0</default><description><para>Mobile IPv4 </para></description></enumvalue><enumvalue name="ip_mob_ipv4_regional_registration"><default> 1</default><description><para>Mobile IPv4 Regional Registration </para></description></enumvalue><enumvalue name="ip_mob_ipv6"><default> 2</default><description><para>Mobile IPv6 </para></description></enumvalue><enumvalue name="ip_mob_hierarchical_ipv6"><default> 3</default><description><para>Hiearchical Mobile IPv6 </para></description></enumvalue><enumvalue name="ip_mob_low_latency_handoffs"><default> 4</default><description><para>Low Latency Handoffs </para></description></enumvalue><enumvalue name="ip_mob_ipv6_fast_handovers"><default> 5</default><description><para>Mobile IPv6 Fast Handovers </para></description></enumvalue><enumvalue name="ip_mob_IKEv2"><default> 6</default><description><para>IKEv2 Mobility and Multihoming Protocol </para></description></enumvalue><description><para>IP_MOB_MGMT data type enumeration. </para></description></enum><typedef name="ip_cfg_methods"><description><para>IP_CFG_METHODS data type. </para></description><type><classname>bitmap</classname>&lt; 32, ip_cfg_methods_enum &gt;</type></typedef><typedef name="ip_mob_mgmt"><description><para>IP_MOB_MGMT data type. </para></description><type><classname>bitmap</classname>&lt; 16, ip_mob_mgmt_enum &gt;</type></typedef><typedef name="fqdn"><description><para>FQDN data type. </para></description><type>octet_string</type></typedef><typedef name="ip_prefix_len"><description><para>IP_PREFIX_LEN data type. </para></description><type>uint8</type></typedef><typedef name="ip_renewal_flag"><description><para>IP_RENEWAL_FLAG data type. </para></description><type>bool</type></typedef></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/types/link.hpp"><namespace name="odtone"><namespace name="mih"><struct name="threshold"><description><para>THRESHOLD data type. </para></description><enum name="type_ip_enum"><enumvalue name="above_threshold"><default> 0</default><description><para>Above threshold. </para></description></enumvalue><enumvalue name="below_threshold"><default> 1</default><description><para>Below threshold. </para></description></enumvalue><description><para>Threshold direction enumeration. </para></description></enum><data-member name="threshold_val"><type>uint16</type><description><para>Threshold value. </para></description></data-member><data-member name="threshold_x_dir"><type><classname>enumeration</classname>&lt; type_ip_enum &gt;</type><description><para>Threshold Direction. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the THRESHOLD data type.</para><para>
</para></description></method></method-group></struct><struct name="link_action"><description><para>LINK_ACTION data type. </para></description><data-member name="type"><type><classname>link_ac_type</classname></type><description><para>Link action type. </para></description></data-member><data-member name="attr"><type><classname>link_ac_attr</classname></type><description><para>Link action attribute. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the LINK_ACTION data type.</para><para>
</para></description></method></method-group></struct><struct name="link_id"><description><para>LINK_ID data type. </para></description><data-member name="type"><type><classname>link_type</classname></type><description><para>Link address type. </para></description></data-member><data-member name="addr"><type>link_addr</type><description><para>Link address. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the LINK_ID data type.</para><para>
</para></description></method><method name="operator==" cv="const"><type>bool</type><parameter name="other"><paramtype>const <classname>link_id</classname> &amp;</paramtype><description><para>The LINK_ID to compare to. </para></description></parameter><description><para>Check if the LINK_ID data type is equal to another LINK_ID.</para><para>

</para></description><returns><para>True if they are equal or false otherwise. </para></returns></method></method-group><constructor><description><para>Construct an empty LINK_ID data type. </para></description></constructor></struct><class name="link_tuple_id"><inherit access="public">odtone::mih::link_id</inherit><description><para>LINK_TUPLE_ID data type. </para></description><data-member name="poa_addr"><type>boost::variant&lt; <classname>null</classname>, link_addr &gt;</type><description><para>PoA link address. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the LINK_TUPLE_ID data type.</para><para>
</para></description></method><method name="operator==" cv="const"><type>bool</type><parameter name="other"><paramtype>const <classname>link_tuple_id</classname> &amp;</paramtype><description><para>The LINK_TUPLE_ID to compare to. </para></description></parameter><description><para>Check if the LINK_TUPLE_ID data type is equal to another LINK_TUPLE_ID.</para><para>

</para></description><returns><para>True if they are equal or false otherwise. </para></returns></method></method-group><constructor><description><para>Construct an empty LINK_TUPLE_ID data type. </para></description></constructor></class><struct name="link_scan_rsp"><description><para>LINK_SCAN_RSP data type. </para></description><data-member name="id"><type>link_addr</type><description><para>Link address. </para></description></data-member><data-member name="net_id"><type>octet_string</type><description><para>Network identifier. </para></description></data-member><data-member name="signal"><type>sig_strength</type><description><para>Signal strength. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the LINK_SCAN_RSP data type.</para><para>
</para></description></method></method-group></struct><struct name="link_action_req"><description><para>LINK_ACTION_REQ data type. </para></description><data-member name="id"><type><classname>link_id</classname></type><description><para>Link identifier. </para></description></data-member><data-member name="addr"><type>boost::variant&lt; <classname>null</classname>, link_addr &gt;</type><description><para>PoA link address. </para></description></data-member><data-member name="action"><type><classname>link_action</classname></type><description><para>Link action. </para></description></data-member><data-member name="ex_time"><type>link_ac_ex_time</type><description><para>Link action execution time. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the LINK_ACTION_REQ data type.</para><para>
</para></description></method></method-group></struct><struct name="link_action_rsp"><description><para>LINK_ACTION_RSP data type. </para></description><data-member name="id"><type><classname>link_id</classname></type><description><para>Link identifier. </para></description></data-member><data-member name="result"><type><classname>link_ac_result</classname></type><description><para>Link action result. </para></description></data-member><data-member name="scan_list"><type>boost::variant&lt; <classname>null</classname>, link_scan_rsp_list &gt;</type><description><para>Link action response list. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the LINK_ACTION_RSP data type.</para><para>
</para></description></method></method-group></struct><struct name="link_det_cfg"><description><para>LINK_DET_CFG data type. </para></description><data-member name="network_id"><type>boost::variant&lt; <classname>null</classname>, octet_string &gt;</type><description><para>Network identifier. </para></description></data-member><data-member name="signal"><type>boost::variant&lt; <classname>null</classname>, sig_strength &gt;</type><description><para>Signal strength. </para></description></data-member><data-member name="link_data_rate"><type>boost::variant&lt; <classname>null</classname>, uint32 &gt;</type><description><para>Link data rate. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the LINK_DET_CFG data type.</para><para>
</para></description></method></method-group></struct><struct name="link_status_req"><description><para>LINK_STATUS_REQ data type. </para></description><data-member name="_states_req"><type><classname>link_states_req</classname></type><description><para>Link states to be requested. </para></description></data-member><data-member name="_param_type_list"><type>link_param_type_list</type><description><para>Link parameter type list. </para></description></data-member><data-member name="_desc_req"><type><classname>link_desc_req</classname></type><description><para>Link dsecriptors. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the LINK_STATUS_REQ data type.</para><para>
</para></description></method></method-group></struct><struct name="link_param"><description><para>LINK_PARAM data type. </para></description><data-member name="type"><type>link_param_type</type><description><para>Link parameter type. </para></description></data-member><data-member name="value"><type>boost::variant&lt; link_param_val, qos_param_val &gt;</type><description><para>Link parameter value. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the LINK_PARAM data type.</para><para>
</para></description></method></method-group></struct><struct name="link_param_report"><description><para>LINK_PARAM_RPT data type. </para></description><data-member name="param"><type><classname>link_param</classname></type><description><para>Link parameter. </para></description></data-member><data-member name="thold"><type>boost::variant&lt; <classname>null</classname>, <classname>threshold</classname> &gt;</type><description><para>Threshold. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the LINK_PARAM_RPT data type.</para><para>
</para></description></method></method-group><constructor><description><para>Construct a LINK_PARAM_RPT data type. </para></description></constructor></struct><struct name="link_cfg_param"><description><para>LINK_CFG_PARAM data type. </para></description><data-member name="type"><type>link_param_type</type><description><para>Link parameter type. </para></description></data-member><data-member name="timer_interval"><type>boost::variant&lt; <classname>null</classname>, uint16 &gt;</type><description><para>Timer interval. </para></description></data-member><data-member name="action"><type><classname>th_action</classname></type><description><para>Action to apply to the listed thresholds. </para></description></data-member><data-member name="threshold_list"><type>std::vector&lt; <classname>threshold</classname> &gt;</type><description><para>Thresholds. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the LINK_CFG_PARAM data type.</para><para>
</para></description></method></method-group></struct><struct name="link_cfg_status"><description><para>LINK_CFG_STATUS data type. </para></description><data-member name="type"><type>link_param_type</type><description><para>Link parameter type. </para></description></data-member><data-member name="thold"><type><classname>threshold</classname></type><description><para>Threshold. </para></description></data-member><data-member name="status"><type>config_status</type><description><para>Link parameter configuration status. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the LINK_CFG_STATUS data type.</para><para>
</para></description></method></method-group></struct><struct name="link_det_info"><description><para>LINK_DET_INFO data type. </para></description><data-member name="id"><type><classname>link_tuple_id</classname></type><description><para>Link tuple identifier. </para></description></data-member><data-member name="network_id"><type>octet_string</type><description><para>Network identifier. </para></description></data-member><data-member name="net_aux_id"><type>octet_string</type><description><para>Auxiliar network identifier. </para></description></data-member><data-member name="signal"><type>sig_strength</type><description><para>Signal strength. </para></description></data-member><data-member name="sinr"><type>uint16</type><description><para>SINR. </para></description></data-member><data-member name="data_rate"><type>uint32</type><description><para>Link data rate. </para></description></data-member><data-member name="mih_capabilities"><type><classname>link_mihcap_flag</classname></type><description><para>MIH capabilities. </para></description></data-member><data-member name="net_capabilities"><type><classname>net_caps</classname></type><description><para>Network capabilities. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the LINK_DET_INFO data type.</para><para>
</para></description></method></method-group></struct><struct name="link_poa_list"><description><para>LINK_POA_LIST data type. </para></description><data-member name="id"><type><classname>link_id</classname></type><description><para>Link identifier. </para></description></data-member><data-member name="addr_list"><type>link_addr_list</type><description><para>Link address list. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the LINK_POA_LIST data type.</para><para>
</para></description></method></method-group></struct><struct name="link_status_rsp"><description><para>LINK_STATUS_RSP data type. </para></description><data-member name="states_rsp_list"><type>link_states_rsp_list</type><description><para>Link states response list. </para></description></data-member><data-member name="param_list"><type>link_param_list</type><description><para>Link parameter list. </para></description></data-member><data-member name="desc_rsp_list"><type>link_desc_rsp_list</type><description><para>Link descriptors response list. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the LINK_STATUS_RSP data type.</para><para>
</para></description></method></method-group></struct><struct name="status_rsp"><description><para>SEQUENCE(LINK_ID,LINK_STATUS_RSP) data type. </para></description><data-member name="id"><type><classname>link_id</classname></type><description><para>Link identifier. </para></description></data-member><data-member name="rsp"><type><classname>link_status_rsp</classname></type><description><para>Link status response. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the SEQUENCE(LINK_ID,LINK_STATUS_RSP) data type.</para><para>
</para></description></method></method-group></struct><enum name="op_mode_enum"><enumvalue name="op_mode_normal"><default> 0</default><description><para>Normal mode. </para></description></enumvalue><enumvalue name="op_mode_power_saving"><default> 1</default><description><para>Power saving mode. </para></description></enumvalue><enumvalue name="op_mode_powered_down"><default> 2</default><description><para>Powered Down. </para></description></enumvalue><description><para>OP_MODE data type enumeration. </para></description></enum><enum name="dev_states_req_enum"><enumvalue name="dev_state_device_info"><default> 0</default><description><para>Device information. </para></description></enumvalue><enumvalue name="dev_state_batt_level"><default> 1</default><description><para>Battery level. </para></description></enumvalue><description><para>DEV_STATES_REQ data type enumeration. </para></description></enum><enum name="link_states_req_enum"><enumvalue name="link_states_req_op_mode"><default> 0</default><description><para>Operation mode. </para></description></enumvalue><enumvalue name="link_states_req_channel_id"><default> 1</default><description><para>Channel identifier. </para></description></enumvalue><description><para>LINK_STATES_REQ data type enumeration. </para></description></enum><enum name="link_ac_result_enum"><enumvalue name="link_ac_success"><default> 0</default><description><para>Success. </para></description></enumvalue><enumvalue name="link_ac_failure"><default> 1</default><description><para>Failure. </para></description></enumvalue><enumvalue name="link_ac_refused"><default> 2</default><description><para>Refused. </para></description></enumvalue><enumvalue name="link_ac_incapable"><default> 3</default><description><para>Incapable. </para></description></enumvalue><description><para>LINK_AC_RESULT data type enumeration. </para></description></enum><enum name="link_ac_type_enum"><enumvalue name="link_ac_type_none"><default> 0</default><description><para>None. </para></description></enumvalue><enumvalue name="link_ac_type_disconnect"><default> 1</default><description><para>Link disconnect. </para></description></enumvalue><enumvalue name="link_ac_type_low_power"><default> 2</default><description><para>Link low power. </para></description></enumvalue><enumvalue name="link_ac_type_power_down"><default> 3</default><description><para>Link power down. </para></description></enumvalue><enumvalue name="link_ac_type_power_up"><default> 4</default><description><para>Link power up. </para></description></enumvalue><description><para>LINK_AC_TYPE data type enumeration. </para></description></enum><enum name="link_ac_attr_enum"><enumvalue name="link_ac_attr_scan"><default> 0</default><description><para>Link scan. </para></description></enumvalue><enumvalue name="link_ac_attr_res_retain"><default> 1</default><description><para>Link resource retain. </para></description></enumvalue><enumvalue name="link_ac_attr_data_fwd_req"><default> 2</default><description><para>Link data forward. </para></description></enumvalue><description><para>LINK_AC_ATTR data type enumeration. </para></description></enum><enum name="th_action_enum"><enumvalue name="th_action_normal"><default> 0</default><description><para>Set normal threshold. </para></description></enumvalue><enumvalue name="th_action_one_shot"><default> 1</default><description><para>Set one-shot threshold. </para></description></enumvalue><enumvalue name="th_action_cancel"><default> 2</default><description><para>Cancel threshold. </para></description></enumvalue><description><para>TH_ACTION data type enumeration. </para></description></enum><enum name="link_type_enum"><enumvalue name="link_type_gsm"><default> 1</default><description><para>Wireless - GSM. </para></description></enumvalue><enumvalue name="link_type_gprs"><default> 2</default><description><para>Wireless - GPRS. </para></description></enumvalue><enumvalue name="link_type_edge"><default> 3</default><description><para>Wireless - EDGE. </para></description></enumvalue><enumvalue name="link_type_ethernet"><default> 15</default><description><para>Ethernet. </para></description></enumvalue><enumvalue name="link_type_wireless_other"><default> 18</default><description><para>Wireless - Other. </para></description></enumvalue><enumvalue name="link_type_802_11"><default> 19</default><description><para>Wireless - IEEE 802.11. </para></description></enumvalue><enumvalue name="link_type_cdma2000"><default> 22</default><description><para>Wireless - CDMA-2000. </para></description></enumvalue><enumvalue name="link_type_umts"><default> 23</default><description><para>Wireless - UMTS. </para></description></enumvalue><enumvalue name="link_type_cdma2000_hrpd"><default> 24</default><description><para>Wireless - CDMA-2000-HRPD. </para></description></enumvalue><enumvalue name="link_type_802_16"><default> 27</default><description><para>Wireless - IEEE 802.16. </para></description></enumvalue><enumvalue name="link_type_802_20"><default> 28</default><description><para>Wireless - IEEE 802.20. </para></description></enumvalue><enumvalue name="link_type_802_22"><default> 29</default><description><para>Wireless - IEEE 802.22. </para></description></enumvalue><description><para>LINK_TYPE data type enumeration. </para></description></enum><enum name="link_dn_reason_enum"><enumvalue name="link_dn_reason_explicit_disconnect"><default> 0</default><description><para>Explicit disconnect. </para></description></enumvalue><enumvalue name="link_dn_reason_packet_timeout"><default> 1</default><description><para>Packet timeout. </para></description></enumvalue><enumvalue name="link_dn_reason_no_resource"><default> 2</default><description><para>No resource. </para></description></enumvalue><enumvalue name="link_dn_reason_no_broadcast"><default> 3</default><description><para>No broadcast. </para></description></enumvalue><enumvalue name="link_dn_reason_authentication_failure"><default> 4</default><description><para>Authentication failure. </para></description></enumvalue><enumvalue name="link_dn_reason_billing_failure"><default> 5</default><description><para>Billing failure. </para></description></enumvalue><description><para>LINK_DN_REASON data type enumeration. </para></description></enum><enum name="link_gd_reason_enum"><enumvalue name="link_gd_reason_explicit_disconnect"><default> 0</default><description><para>Explicit disconnect. </para></description></enumvalue><enumvalue name="link_gd_reason_link_parameter_degrading"><default> 1</default><description><para>Link parameter degrading. </para></description></enumvalue><enumvalue name="link_gd_reason_low_power"><default> 2</default><description><para>Low power. </para></description></enumvalue><enumvalue name="link_gd_reason_no_resource"><default> 3</default><description><para>No resource. </para></description></enumvalue><description><para>LINK_GD_REASON data type enumeration. </para></description></enum><enum name="link_mihcap_flag_enum"><enumvalue name="link_mihcap_event_service"><default> 1</default><description><para>Event service. </para></description></enumvalue><enumvalue name="link_mihcap_command_service"><default> 2</default><description><para>Command service. </para></description></enumvalue><enumvalue name="link_mihcap_information_service"><default> 3</default><description><para>Information service. </para></description></enumvalue><description><para>LINK_MIHCAP_FLAG data type enumeration. </para></description></enum><enum name="link_param_gen_enum"><enumvalue name="link_param_gen_data_rate"><default> 0</default><description><para>Data rate. </para></description></enumvalue><enumvalue name="link_param_gen_signal_strength"><default> 1</default><description><para>Signal strength. </para></description></enumvalue><enumvalue name="link_param_gen_sinr"><default> 2</default><description><para>SINR. </para></description></enumvalue><enumvalue name="link_param_gen_throughput"><default> 3</default><description><para>Throughput. </para></description></enumvalue><enumvalue name="link_param_gen_packet_error_rate"><default> 4</default><description><para>Packet error rate. </para></description></enumvalue><description><para>LINK_PARAM_GEN data type enumeration. </para></description></enum><enum name="link_param_gg_enum"><enumvalue name="link_param_gg_rx_qual"><default> 0</default><description><para>RxQual. </para></description></enumvalue><enumvalue name="link_param_gg_rs_lev"><default> 1</default><description><para>RsLev. </para></description></enumvalue><enumvalue name="link_param_gg_mean_bep"><default> 2</default><description><para>Mean BEP. </para></description></enumvalue><enumvalue name="link_param_gg_st_dev_bep"><default> 3</default><description><para>StDev BEP. </para></description></enumvalue><description><para>LINK_PARAM_GG data type enumeration. </para></description></enum><enum name="link_param_edge_enum"><description><para>LINK_PARAM_EDGE data type enumeration. </para></description></enum><enum name="link_param_eth_enum"><description><para>LINK_PARAM_ETH data type enumeration. </para></description></enum><enum name="link_param_802_11_enum"><enumvalue name="link_param_802_11_rssi"><default> 0</default><description><para>RSSI. </para></description></enumvalue><enumvalue name="link_param_802_11_no_qos"><default> 1</default><description><para>No QoS resource available. </para></description></enumvalue><enumvalue name="link_param_802_11_multicast_packet_loss_rate"><default> 2</default><description><para>Multicast packet loss rate. </para></description></enumvalue><description><para>LINK_PARAM_802_11 data type enumeration. </para></description></enum><enum name="link_param_c2k_enum"><enumvalue name="link_param_c2k_pilot_strength"><default> 0</default><description><para>Pilot strength. </para></description></enumvalue><description><para>LINK_PARAM_C2K data type enumeration. </para></description></enum><enum name="link_param_ffd_enum"><enumvalue name="link_param_ffd_cpich_rscp"><default> 0</default><description><para>CPICH RSCP. </para></description></enumvalue><enumvalue name="link_param_ffd_pccpch_rscp"><default> 1</default><description><para>PCCPCH RSCP. </para></description></enumvalue><enumvalue name="link_param_ffd_ultra_carrie_rssi"><default> 2</default><description><para>UTRA carrier RSSI. </para></description></enumvalue><enumvalue name="link_param_ffd_gsm_carrie_rssi"><default> 3</default><description><para>GSM carrier RSSI. </para></description></enumvalue><enumvalue name="link_param_ffd_cpich_ec_no"><default> 4</default><description><para>CPICH Ec/No. </para></description></enumvalue><enumvalue name="link_param_ffd_transport_channel_bler"><default> 5</default><description><para>Transport channel BLER. </para></description></enumvalue><enumvalue name="link_param_ffd_ue"><default> 6</default><description><para>UE transmitted power. </para></description></enumvalue><description><para>LINK_PARAM_FFD data type enumeration. </para></description></enum><enum name="link_param_hrpd_enum"><enumvalue name="link_param_hrpd_pilot_strength"><default> 0</default><description><para>HRPD pilot strength. </para></description></enumvalue><description><para>LINK_PARAM_HRPD data type enumeration. </para></description></enum><enum name="link_param_802_16_enum"><description><para>LINK_PARAM_802_16 data type enumeration. </para></description></enum><enum name="link_param_802_20_enum"><description><para>LINK_PARAM_802_20 data type enumeration. </para></description></enum><enum name="link_param_802_22_enum"><description><para>LINK_PARAM_802_22 data type enumeration. </para></description></enum><enum name="link_evt_list_enum"><enumvalue name="evt_link_detected"><default> 0</default><description><para>Link detected </para></description></enumvalue><enumvalue name="evt_link_up"><default> 1</default><description><para>Link up </para></description></enumvalue><enumvalue name="evt_link_down"><default> 2</default><description><para>Link down </para></description></enumvalue><enumvalue name="evt_link_parameters_report"><default> 3</default><description><para>Link parameters report </para></description></enumvalue><enumvalue name="evt_link_going_down"><default> 4</default><description><para>Link doing down </para></description></enumvalue><enumvalue name="evt_link_handover_imminent"><default> 5</default><description><para>Link handover imminent </para></description></enumvalue><enumvalue name="evt_link_handover_complete"><default> 6</default><description><para>Link handover complete </para></description></enumvalue><enumvalue name="evt_link_pdu_transmit_status"><default> 7</default><description><para>Link PDU transmit status </para></description></enumvalue><description><para>LINK_EVT_LIST data type enumeration. </para></description></enum><enum name="link_cmd_list_enum"><enumvalue name="cmd_link_event_subscribe"><default> 1</default><description><para>Event subscribe. </para></description></enumvalue><enumvalue name="cmd_link_event_unsubscribe"><default> 2</default><description><para>Event unsubscribe. </para></description></enumvalue><enumvalue name="cmd_link_get_parameters"><default> 3</default><description><para>Get parameters. </para></description></enumvalue><enumvalue name="cmd_link_configure_thresholds"><default> 4</default><description><para>Configure thresholds. </para></description></enumvalue><enumvalue name="cmd_link_action"><default> 5</default><description><para>Action. </para></description></enumvalue><description><para>LINK_CMD_LIST data type enumeration. </para></description></enum><enum name="link_desc_req_enum"><enumvalue name="link_desc_req_classes_of_service_supported"><default> 0</default><description><para>Number of classes of services supported. </para></description></enumvalue><enumvalue name="link_desc_req_queues_supported"><default> 1</default><description><para>Number of queues supported. </para></description></enumvalue><description><para>LINK_DESC_REQ_LIST data type enumeration. </para></description></enum><enum name="net_caps_enum"><enumvalue name="net_caps_security"><default> 0</default><description><para>Security. </para></description></enumvalue><enumvalue name="net_caps_qos_0"><default> 1</default><description><para>QoS Class 0. </para></description></enumvalue><enumvalue name="net_caps_qos_1"><default> 2</default><description><para>QoS Class 1. </para></description></enumvalue><enumvalue name="net_caps_qos_2"><default> 3</default><description><para>QoS Class 2. </para></description></enumvalue><enumvalue name="net_caps_qos_3"><default> 4</default><description><para>QoS Class 3. </para></description></enumvalue><enumvalue name="net_caps_qos_4"><default> 5</default><description><para>QoS Class 4. </para></description></enumvalue><enumvalue name="net_caps_qos_5"><default> 6</default><description><para>QoS Class 5. </para></description></enumvalue><enumvalue name="net_caps_internet"><default> 7</default><description><para>Internet access. </para></description></enumvalue><enumvalue name="net_caps_emergency_services"><default> 8</default><description><para>Emergency services. </para></description></enumvalue><enumvalue name="net_caps_mih"><default> 9</default><description><para>MIH capability. </para></description></enumvalue><description><para>NET_CAPS data type enumeration. </para></description></enum><typedef name="batt_level"><description><para>BATT_LEVEL data type. </para></description><type>uint8</type></typedef><typedef name="num_cos"><description><para>NUM_COS data type. </para></description><type>uint8</type></typedef><typedef name="num_queue"><description><para>NUM_QUEUE data type. </para></description><type>uint8</type></typedef><typedef name="channel_id"><description><para>CHANNEL_ID data type. </para></description><type>uint16</type></typedef><typedef name="config_status"><description><para>CONFIG_STATUS data type. </para></description><type>bool</type></typedef><typedef name="device_info"><description><para>DEVICE_INFO data type. </para></description><type>octet_string</type></typedef><typedef name="link_ac_ex_time"><description><para>LINK_AC_EX_TIME data type. </para></description><type>uint16</type></typedef><typedef name="sig_strength"><description><para>SIG_STRENGTH data type. </para></description><type>boost::variant&lt; sint8, <classname>percentage</classname> &gt;</type></typedef><typedef name="link_res_status"><description><para>LINK_RES_STATUS data type. </para></description><type>bool</type></typedef><typedef name="op_mode"><description><para>OP_MODE data type. </para></description><type><classname>enumeration</classname>&lt; op_mode_enum &gt;</type></typedef><typedef name="link_states_rsp"><description><para>LINK_STATES_RSP data type. </para></description><type>boost::variant&lt; <classname>op_mode</classname>, channel_id &gt;</type></typedef><typedef name="link_states_rsp_list"><description><para>LIST(LINK_STATES_RSP) data type. </para></description><type>std::vector&lt; link_states_rsp &gt;</type></typedef><typedef name="link_desc_rsp"><description><para>LINK_DESC_RSP data type. </para></description><type>boost::variant&lt; num_cos, num_queue &gt;</type></typedef><typedef name="link_desc_rsp_list"><description><para>LIST(LINK_DESC_RSP) data type. </para></description><type>std::vector&lt; link_desc_rsp &gt;</type></typedef><typedef name="dev_states_req"><description><para>DEV_STATES_REQ data type. </para></description><type><classname>bitmap</classname>&lt; 16, dev_states_req_enum &gt;</type></typedef><typedef name="dev_states_rsp"><description><para>DEV_STATES_RSP data type. </para></description><type>boost::variant&lt; device_info, batt_level &gt;</type></typedef><typedef name="dev_states_rsp_list"><description><para>LIST(DEV_STATES_RSP) data type. </para></description><type>std::vector&lt; dev_states_rsp &gt;</type></typedef><typedef name="link_states_req"><description><para>LINK_STATES_REQ data type. </para></description><type><classname>bitmap</classname>&lt; 16, link_states_req_enum &gt;</type></typedef><typedef name="link_states_req_list"><description><para>LIST(LINK_STATES_REQ) data type. </para></description><type>std::vector&lt; <classname>link_states_req</classname> &gt;</type></typedef><typedef name="link_ac_result"><description><para>LINK_AC_RESULT data type. </para></description><type><classname>enumeration</classname>&lt; link_ac_result_enum &gt;</type></typedef><typedef name="link_ac_type"><description><para>LINK_AC_TYPE data type. </para></description><type><classname>enumeration</classname>&lt; link_ac_type_enum &gt;</type></typedef><typedef name="link_ac_attr"><description><para>LINK_AC_ATTR data type. </para></description><type><classname>bitmap</classname>&lt; 8, link_ac_attr_enum &gt;</type></typedef><typedef name="th_action"><description><para>TH_ACTION data type. </para></description><type><classname>enumeration</classname>&lt; th_action_enum &gt;</type></typedef><typedef name="link_type"><description><para>LINK_TYPE data type. </para></description><type><classname>enumeration</classname>&lt; link_type_enum &gt;</type></typedef><typedef name="link_dn_reason"><description><para>LINK_DN_REASON data type. </para></description><type><classname>enumeration</classname>&lt; link_dn_reason_enum &gt;</type></typedef><typedef name="link_gd_reason"><description><para>LINK_GD_REASON data type. </para></description><type><classname>enumeration</classname>&lt; link_gd_reason_enum &gt;</type></typedef><typedef name="link_mihcap_flag"><description><para>LINK_MIHCAP_FLAG data type. </para></description><type><classname>bitmap</classname>&lt; 8, link_mihcap_flag_enum &gt;</type></typedef><typedef name="link_param_gen"><description><para>LINK_PARAM_GEM data type. </para></description><type><classname>enumeration</classname>&lt; link_param_gen_enum &gt;</type></typedef><typedef name="link_param_qos"><description><para>LINK_PARAM_QOS data type. </para></description><type>uint8</type></typedef><typedef name="link_param_gg"><description><para>LINK_PARAM_GG data type. </para></description><type><classname>enumeration</classname>&lt; link_param_gg_enum &gt;</type></typedef><typedef name="link_param_edge"><description><para>LINK_PARAM_EDGE data type. </para></description><type><classname>enumeration</classname>&lt; link_param_edge_enum &gt;</type></typedef><typedef name="link_param_eth"><description><para>LINK_PARAM_ETH data type. </para></description><type><classname>enumeration</classname>&lt; link_param_eth_enum &gt;</type></typedef><typedef name="link_param_802_11"><description><para>LINK_PARAM_802_11 data type. </para></description><type><classname>enumeration</classname>&lt; link_param_802_11_enum &gt;</type></typedef><typedef name="link_param_c2k"><description><para>LINK_PARAM_C2K data type. </para></description><type><classname>enumeration</classname>&lt; link_param_c2k_enum &gt;</type></typedef><typedef name="link_param_ffd"><description><para>LINK_PARAM_FFD data type. </para></description><type><classname>enumeration</classname>&lt; link_param_ffd_enum &gt;</type></typedef><typedef name="link_param_hrpd"><description><para>LINK_PARAM_HRPD data type. </para></description><type><classname>enumeration</classname>&lt; link_param_hrpd_enum &gt;</type></typedef><typedef name="link_param_802_16"><description><para>LINK_PARAM_802_16 data type. </para></description><type><classname>enumeration</classname>&lt; link_param_802_16_enum &gt;</type></typedef><typedef name="link_param_802_20"><description><para>LINK_PARAM_802_20 data type. </para></description><type><classname>enumeration</classname>&lt; link_param_802_20_enum &gt;</type></typedef><typedef name="link_param_802_22"><description><para>LINK_PARAM_802_22 data type. </para></description><type><classname>enumeration</classname>&lt; link_param_802_22_enum &gt;</type></typedef><typedef name="link_id_list"><description><para>LIST(LINK_ID) data type. </para></description><type>std::vector&lt; <classname>link_id</classname> &gt;</type></typedef><typedef name="link_scan_rsp_list"><description><para>LIST(LINK_SCAN_RSP) data type. </para></description><type>std::vector&lt; <classname>link_scan_rsp</classname> &gt;</type></typedef><typedef name="link_action_list"><description><para>LIST(LINK_ACTION_REQ) data type. </para></description><type>std::vector&lt; <classname>link_action_req</classname> &gt;</type></typedef><typedef name="link_action_rsp_list"><description><para>LIST(LINK_ACTION_RSP) data type. </para></description><type>std::vector&lt; <classname>link_action_rsp</classname> &gt;</type></typedef><typedef name="link_evt_list"><description><para>LINK_EVT_LIST data type. </para></description><type><classname>bitmap</classname>&lt; 32, link_evt_list_enum &gt;</type></typedef><typedef name="link_cmd_list"><description><para>LINK_CMD_LIST data type. </para></description><type><classname>bitmap</classname>&lt; 32, link_cmd_list_enum &gt;</type></typedef><typedef name="link_param_type"><description><para>LINK_PARAM_TYPE data type. </para></description><type>boost::variant&lt; <classname>link_param_gen</classname>, link_param_qos, <classname>link_param_gg</classname>, <classname>link_param_edge</classname>, <classname>link_param_eth</classname>, <classname>link_param_802_11</classname>, <classname>link_param_c2k</classname>, <classname>link_param_ffd</classname>, <classname>link_param_hrpd</classname>, <classname>link_param_802_16</classname>, <classname>link_param_802_20</classname>, <classname>link_param_802_22</classname> &gt;</type></typedef><typedef name="link_param_type_list"><description><para>LIST(LINK_PARAM_TYPE) data type. </para></description><type>std::vector&lt; link_param_type &gt;</type></typedef><typedef name="link_desc_req"><description><para>LINK_DESC_REQ data type. </para></description><type><classname>bitmap</classname>&lt; 16, link_desc_req_enum &gt;</type></typedef><typedef name="link_param_val"><description><para>LINK_PARAM_VAL data type. </para></description><type>uint16</type></typedef><typedef name="link_param_list"><description><para>LINK_PARAM_LIST data type. </para></description><type>std::vector&lt; <classname>link_param</classname> &gt;</type></typedef><typedef name="link_param_rpt_list"><description><para>LIST(LINK_PARAM_RPT) data type. </para></description><type>std::vector&lt; <classname>link_param_report</classname> &gt;</type></typedef><typedef name="link_cfg_param_list"><description><para>LIST(LINK_CFG_PARAM) data type. </para></description><type>std::vector&lt; <classname>link_cfg_param</classname> &gt;</type></typedef><typedef name="link_cfg_status_list"><description><para>LIST(LINK_CFG_STATUS) data type. </para></description><type>std::vector&lt; <classname>link_cfg_status</classname> &gt;</type></typedef><typedef name="net_caps"><description><para>NET_CAPS data type. </para></description><type><classname>bitmap</classname>&lt; 32, net_caps_enum &gt;</type></typedef><typedef name="link_det_info_list"><description><para>LIST(LINK_DET_INFO) data type. </para></description><type>std::vector&lt; <classname>link_det_info</classname> &gt;</type></typedef><typedef name="list_of_link_poa_list"><description><para>LIST(LINK_POA_LIST) data type. </para></description><type>std::vector&lt; <classname>link_poa_list</classname> &gt;</type></typedef><typedef name="link_status_rsp_list"><description><para>LIST(LINK_STATUS_RSP) data type. </para></description><type>std::vector&lt; <classname>link_status_rsp</classname> &gt;</type></typedef><typedef name="status_rsp_list"><description><para>LIST(SEQUENCE(LINK_ID,LINK_STATUS_RSP)) data type. </para></description><type>std::vector&lt; <classname>status_rsp</classname> &gt;</type></typedef></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/types/location.hpp"><namespace name="odtone"><namespace name="mih"><struct name="bin_civic_location"><description><para>BIN_CIVIC_LOCATION data type. </para></description><data-member name="_country_code"><type>cntry_code</type><description><para>Country code. </para></description></data-member><data-member name="_civic_addr"><type>civic_addr</type><description><para>Civic address. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the BIN_CIVIC_LOCATION data type.</para><para>
</para></description></method></method-group></struct><typedef name="xml_civic_location"><description><para>XML_CIVIC_LOCATION data type. </para></description><type>octet_string</type></typedef><typedef name="civic_addr"><description><para>CIVIC_ADDR data type. </para></description><type>octet_string</type></typedef><typedef name="bin_geo_location"><description><para>BIN_GEO_LOCATION data type. </para></description><type>boost::array&lt; uint8, 16 &gt;</type></typedef><typedef name="xml_geo_location"><description><para>XML_GEO_LOCATION data type. </para></description><type>octet_string</type></typedef><typedef name="civic_location"><description><para>CIVIC_LOCATION data type. </para></description><type>boost::variant&lt; <classname>bin_civic_location</classname>, xml_civic_location &gt;</type></typedef><typedef name="geo_location"><description><para>GEO_LOCATION data type. </para></description><type>boost::variant&lt; bin_geo_location, xml_geo_location &gt;</type></typedef><typedef name="location"><description><para>LOCATION data type. </para></description><type>boost::variant&lt; civic_location, geo_location, cell_id &gt;</type></typedef></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/types/odtone.hpp"><namespace name="odtone"><namespace name="mih"><struct name="mos_info"><description><para>Define MOS_INFO data type. </para></description><data-member name="id"><type><classname>mih::id</classname></type><description><para>PoS identifier. </para></description></data-member><data-member name="ip"><type><classname>ip_addr</classname></type><description><para>PoS IP address. </para></description></data-member><data-member name="port"><type>uint16</type><description><para>PoS listening port. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the MOS_INFO data type.</para><para>
</para></description></method><method name="operator==" cv="const"><type>bool</type><parameter name="other"><paramtype>const <classname>mos_info</classname> &amp;</paramtype><description><para>The MOS_INFO to compare with. </para></description></parameter><description><para>Check if the MOS_INFO is equal to another MOS_INFO.</para><para>

</para></description><returns><para>True if they are equal or false otherwise. </para></returns></method></method-group></struct><struct name="mos_dscv"><description><para>Define MOS_DSCV data type. </para></description><data-member name="is"><type>std::vector&lt; <classname>mos_info</classname> &gt;</type><description><para>List of PoS providing IS. </para></description></data-member><data-member name="cs"><type>std::vector&lt; <classname>mos_info</classname> &gt;</type><description><para>List of PoS providing CS. </para></description></data-member><data-member name="es"><type>std::vector&lt; <classname>mos_info</classname> &gt;</type><description><para>List of PoS providing ES. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the MOS_DSCV data type.</para><para>
</para></description></method></method-group></struct></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/types/qos.hpp"><namespace name="odtone"><namespace name="mih"><struct name="pk_delay"><description><para>PK_DELAY data type. </para></description><data-member name="cos"><type>cos_id</type><description><para>Class of service identifier. </para></description></data-member><data-member name="value"><type>uint16</type><description><para>Value of the parameter. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the PK_DELAY data type.</para><para>
</para></description></method></method-group></struct><struct name="min_pk_tx_delay"><inherit access="public">odtone::mih::pk_delay</inherit><description><para>MIN_PK_TX_DELAY data type. </para></description></struct><struct name="avg_pk_tx_delay"><inherit access="public">odtone::mih::pk_delay</inherit><description><para>AVG_PK_TX_DELAY data type. </para></description></struct><struct name="max_pk_tx_delay"><inherit access="public">odtone::mih::pk_delay</inherit><description><para>MAX_PK_TX_DELAY data type. </para></description></struct><struct name="pk_delay_jitter"><inherit access="public">odtone::mih::pk_delay</inherit><description><para>PK_DELAY_JITTER data type. </para></description></struct><struct name="pk_loss_rate"><inherit access="public">odtone::mih::pk_delay</inherit><description><para>PK_LOSS_RATE data type. </para></description></struct><struct name="qos_list"><description><para>QOS_LIST data type. </para></description><data-member name="cos"><type>num_cos_types</type><description><para>Maximum number of differentiable classes ofservice supported. </para></description></data-member><data-member name="min_pk_delay_lst"><type>min_pk_tx_delay_list</type><description><para>Minimum packet transfer delay list. </para></description></data-member><data-member name="avg_pk_tx_delay_lst"><type>avg_pk_tx_delay_list</type><description><para>Average packet transfer delay list. </para></description></data-member><data-member name="max_pk_tx_delay_lst"><type>max_pk_tx_delay_list</type><description><para>Maximum packet transfer delay list. </para></description></data-member><data-member name="pk_delay_jitter_lst"><type>pk_delay_jitter_list</type><description><para>Packet transfer delay jitter list. </para></description></data-member><data-member name="pk_loss_rate_lst"><type>pk_loss_rate_list</type><description><para>Packet loss rate list. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the QOS_LIST data type.</para><para>
</para></description></method></method-group></struct><typedef name="num_cos_types"><description><para>NUM_COS_TYPE data type. </para></description><type>uint8</type></typedef><typedef name="cos_id"><description><para>COS_ID data type. </para></description><type>uint8</type></typedef><typedef name="min_pk_tx_delay_list"><description><para>LIST(MIN_PK_TX_DELAY) data type. </para></description><type>std::vector&lt; <classname>min_pk_tx_delay</classname> &gt;</type></typedef><typedef name="avg_pk_tx_delay_list"><description><para>LIST(AVG_PK_TX_DELAY) data type. </para></description><type>std::vector&lt; <classname>avg_pk_tx_delay</classname> &gt;</type></typedef><typedef name="max_pk_tx_delay_list"><description><para>LIST(MAX_PK_TX_DELAY) data type. </para></description><type>std::vector&lt; <classname>max_pk_tx_delay</classname> &gt;</type></typedef><typedef name="pk_delay_jitter_list"><description><para>LIST(PK_DELAY_JITTER) data type. </para></description><type>std::vector&lt; <classname>pk_delay_jitter</classname> &gt;</type></typedef><typedef name="pk_loss_rate_list"><description><para>LIST(PK_LOSS_RATE) data type. </para></description><type>std::vector&lt; <classname>pk_loss_rate</classname> &gt;</type></typedef><typedef name="qos_param_val"><description><para>QOS_PARAM_VAL data type. </para></description><type>boost::variant&lt; num_cos_types, min_pk_tx_delay_list, avg_pk_tx_delay_list, max_pk_tx_delay_list, pk_delay_jitter_list, pk_loss_rate_list &gt;</type></typedef></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/types/rdf_query.hpp"><namespace name="odtone"><namespace name="mih"><struct name="iq_rdf_data"><description><para>IQ_RDF_DATA data type. </para></description><data-member name="_mime"><type>boost::variant&lt; <classname>null</classname>, octet_string &gt;</type><description><para>MIME type. </para></description></data-member><data-member name="_data"><type>octet_string</type><description><para>Value of the MIME. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the IQ_RDF_DATA data type.</para><para>
</para></description></method></method-group><constructor><description><para>Construct a IQ_RDF_DATA data type. </para></description></constructor></struct><typedef name="iq_rdf_schema"><description><para>IQ_RDF_SCHEMA data type. </para></description><type>octet_string</type></typedef><typedef name="iq_rdf_schema_list"><description><para>LIST(IQ_RDF_SCHEMA) data type. </para></description><type>std::vector&lt; iq_rdf_schema &gt;</type></typedef><typedef name="iq_rdf_data_list"><description><para>LIST(IQ_RDF_DATA) data type. </para></description><type>std::vector&lt; <classname>iq_rdf_data</classname> &gt;</type></typedef></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/types/rdf_response.hpp"><namespace name="odtone"><namespace name="mih"><struct name="ir_rdf_data"><description><para>IR_RDF_DATA data type. </para></description><data-member name="_mime"><type>boost::variant&lt; <classname>null</classname>, octet_string &gt;</type><description><para>MIME type. </para></description></data-member><data-member name="_data"><type>octet_string</type><description><para>Value of the MIME. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the IQ_RDF_DATA data type.</para><para>
</para></description></method></method-group><constructor><description><para>Construct a IR_RDF_DATA data type. </para></description></constructor></struct><struct name="ir_rdf_schem"><description><para>IR_RDF_SCHEM data type. </para></description><data-member name="_mime"><type>boost::variant&lt; <classname>null</classname>, octet_string &gt;</type><description><para>MIME type. </para></description></data-member><data-member name="_data"><type>octet_string</type><description><para>Value of the MIME. </para></description></data-member><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><template>
          <template-type-parameter name="ArchiveT"/>
        </template><parameter name="ar"><paramtype>ArchiveT &amp;</paramtype><description><para>The archive to/from where serialize/deserialize the data type. </para></description></parameter><description><para>Serialize/deserialize the IQ_RDF_DATA data type.</para><para>
</para></description></method></method-group><constructor><description><para>Construct a IQ_RDF_SCHEM data type. </para></description></constructor></struct><typedef name="ir_rdf_schem_url"><description><para>IR_RDF_SCHEM_URL data type. </para></description><type>octet_string</type></typedef><typedef name="ir_rdf_schem_url_list"><description><para>LIST(IR_RDF_SCHEM_URL) data type. </para></description><type>std::vector&lt; ir_rdf_schem_url &gt;</type></typedef><typedef name="ir_rdf_data_list"><description><para>LIST(IR_RDF_DATA) data type. </para></description><type>std::vector&lt; <classname>ir_rdf_data</classname> &gt;</type></typedef><typedef name="ir_rdf_schem_list"><description><para>LIST(IR_RDF_SCHEM) data type. </para></description><type>std::vector&lt; <classname>ir_rdf_schem</classname> &gt;</type></typedef></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/types/registration.hpp"><namespace name="odtone"><namespace name="mih"><enum name="reg_request_code_enum"><enumvalue name="reg_request_registration"><default> 0</default><description><para>Registration. </para></description></enumvalue><enumvalue name="reg_request_re_registration"><default> 1</default><description><para>Re-Registration. </para></description></enumvalue><description><para>REQ_REQUEST_CODE data type enumeration. </para></description></enum><typedef name="reg_request_code"><description><para>REQ_REQUEST_CODE data type. </para></description><type><classname>enumeration</classname>&lt; reg_request_code_enum &gt;</type></typedef></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/mih/types/vendor_ie.hpp"><namespace name="odtone"><namespace name="mih"><class name="vendor_ie"><description><para>Define VENDOR_IE data type. </para></description><method-group name="public member functions"><method name="id" cv="const"><type>uint32</type><description><para>Get the Vendor_IE type.</para><para>
</para></description><returns><para>The Vendor_IE type. </para></returns></method><method name="serialize" cv=""><type>bool</type><parameter name="ar"><paramtype><classname>iarchive</classname> &amp;</paramtype><description><para>The archive from where deserialize the data type. </para></description></parameter><description><para>Deserialize the Vendor_IE data type.</para><para>
</para></description></method><method name="serialize" cv=""><type>void</type><parameter name="ar"><paramtype><classname>oarchive</classname> &amp;</paramtype><description><para>The archive to where serialize the data type. </para></description></parameter><description><para>Serialize the Vendor_IE data type.</para><para>
</para></description></method></method-group><constructor><description><para>Construct an empty Vendor_IE data type. </para></description></constructor><constructor><parameter name="lhs"><paramtype>const <classname>vendor_ie</classname> &amp;</paramtype><description><para>Vendor_IE to copy. </para></description></parameter><description><para>Construct a Vendor_IE data type from another Vendor_IE data type.</para><para>
</para></description></constructor><copy-assignment><parameter name="lhs"><paramtype>const <classname>vendor_ie</classname> &amp;</paramtype><description><para>Vendor_IE to copy. </para></description></parameter><description><para>Copy a Vendor_IE data type from another Vendor_IE data type.</para><para>
</para></description></copy-assignment></class><class name="vendor_ie_list"><description><para>Define LIST(Vendor_IE) data type. </para></description><method-group name="public member functions"><method name="serialize" cv=""><type>void</type><parameter name="ar"><paramtype><classname>oarchive</classname> &amp;</paramtype><description><para>The archive to where serialize the data type. </para></description></parameter><description><para>Serialize the LIST(Vendor_IE) data type.</para><para>
</para></description></method><method name="serialize" cv=""><type>void</type><parameter name="ar"><paramtype><classname>iarchive</classname> &amp;</paramtype><description><para>The archive from where deserialize the data type. </para></description></parameter><description><para>Deserialize the LIST(Vendor_IE) data type.</para><para>
</para></description></method></method-group></class><function name="is_vendor_ie"><type>bool</type><parameter name="id"><paramtype>uint32</paramtype><description><para>TLV type. </para></description></parameter><description><para>Check if the IE belongs to the Vendor_IE type.</para><para>

</para></description><returns><para>True if the IE belonds to the Vendor_IE type or false otherwise. </para></returns></function></namespace></namespace></header></library-reference>
