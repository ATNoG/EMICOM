[/==============================================================================
 / Brief   : SAP Library Documentation
 / Authors : Carlos Guimaraes <cguimaraes@av.it.pt>
 /------------------------------------------------------------------------------
 / ODTONE - Open Dot Twenty One
 /
 / Copyright (C) 2010 Universidade Aveiro
 / Copyright (C) 2010 Instituto de Telecomunicações - Pólo Aveiro
 /
 / This software is distributed under a license. The full license
 / agreement can be found in the file LICENSE in this distribution.
 / This software may not be copied, modified, sold or distributed
 / other than expressed in the named license agreement.
 /
 / This software is distributed without any warranty.
 /=============================================================================]

[section:index_sap ODTONE SAP]

The SAP API contains a set of IO service classes to send and receive MIH messages.
The implementation is modeled after boost::asio and only supports asynchronous
operation. IO services ([link odtone.library.index_sap.odtone_sap_user_class odtone::sap::user]
 and [link odtone.library.index_sap.odtone_sap_link_class odtone::sap::link]) are provided to
implement User SAP's and Link SAP's.

It's important to be familiar with the boost::asio library. It's also recommend
to be familiar with boost::function and boost::bind.

[section:sap_classes 2. Classes]

[link odtone.library.index_sap.odtone_sap_class 2.1. odtone::sap::sap Class Reference]

[link odtone.library.index_sap.odtone_sap_user_class 2.2. odtone::sap::user Class Reference]

[link odtone.library.index_sap.odtone_sap_link_class 2.3. odtone::sap::link Class Reference]

[endsect]


[section:odtone_sap_class 2.1. odtone::sap::sap Class Reference]

[heading Detailed Description]

[$./../../../images/odtone::sap::sap.png]

[*SAP Base Class]

This class derive from boost::noncopyable in order to prohibit copy construction
and copy assignment. Thus, [link odtone.library.index_sap.odtone_sap_class odtone::sap::sap]
class has protected constructor and destructor members and should be used only
as a base class.

This will be the base class to [link odtone.library.index_sap.odtone_sap_user_class odtone::sap::user]
and [link odtone.library.index_sap.odtone_sap_link_class odtone::sap::link] as is documented later
in this document.

[heading Namespace]

``
	namespace odtone::sap
``

[endsect]

[section:odtone_sap_user_class 2.2. odtone::sap::user Class Reference]

[heading Detailed Description]

[$./../../../images/odtone::sap::user.png]

[*User SAP IO Service]

This module handles the communication between User SAP implementations and the MIHF.
After being initialized it must be running by invoking the run() method of the
provided boost::asio::io_service.

It is necessary to define handle routines that will be called when a message is
received or sent. This offers a simple mechanism to process received message and
to report the success or failure in delivering a sent message.

[heading Namespace]

``
	namespace odtone::sap
``

[heading Public Member Functions]

``
	user(const mih::config& cfg, boost::asio::io_service& io, const handler& h);
	~user();
	void async_send(mih::message& pm, const handler& h);
``

[heading Constructor & Destructor Documentation]

``
	user(const mih::config& cfg,
	     boost::asio::io_service& io,
	     const handler& h);
``

Construct an User SAP IO Service.

The handler callback is invoked when an message is received, offering a simple
way to process incoming messages.

The signature of the callback is:

``
	void(odtone::mih::message&, const boost::system::error_code&)
``

[*Parameters:]

*[*cfg] - configuration with the parameters for MIH User port, MIHF ip:port and receive
*[*io] - generic IO service
*[*h] - handler callback as a function pointer/object

[*Throws:]

*boost::system::error_code

______________________________________________________________________________

``
	~user();
``

Destructor for User SAP IO Service.

______________________________________________________________________________


[heading Member Function Documentation]

``
	void async_send(mih::message& p,
                    const handler& h = handler());
``

Send the MIH message to the local MIHF asynchronously.

After the message is sent, the callback is called with the response message or
to report failure in delivering the message to the MIHF.

This method returns immediately.

[*Parameters:]

*[*msg] - MIH message to send
*[*h] - completion/response callback handler as a function pointer/object

[endsect]


[section:odtone_sap_link_class 2.3. odtone::sap::link Class Reference]

[heading Detailed Description]

[$./../../../images/odtone::sap::link.png]

[*Link SAP IO Service.]

This module handles the communication between Link SAP implementations and the
MIHF. After being initialized it must be running by invoking the run() method of
the provided boost::asio::io_service.

It is necessary to define handle routines that will be called when a message is
received or sent. This offers a simple mechanism to process received message and
to report the success or failure in delivering a sent message.

[heading Namespace]

``
	namespace odtone::sap
``

[heading Public Member Functions]

``
	link(const mih::config& cfg, boost::asio::io_service& io, const default_handler& h);
	~link();
	void async_send(mih::message& p, const handler& h = handler());
``

[heading Constructor & Destructor Documentation]

``
	link(const mih::config& cfg,
		 boost::asio::io_service& io,
		 const default_handler& h);
``

Construct a Link SAP IO Service.

The handler callback is invoked when a message is received such as a request
message.

The signature of the callback is:

``
	void(odtone::mih::message&, const boost::system::error_code&)
``

[*Parameters:]

*[*cfg] - configuration with the parameters for MIH Link SAP port, MIHF ip:port
and receive buffer size.
*[*io] - generic IO service.
*[*h] - handler callback as a function pointer/object.

[*Throws:]

*boost::system::error_code

______________________________________________________________________________

``
	~link();
``

Destructor for Link SAP IO Service.

______________________________________________________________________________


[heading Member Function Documentation]
``
	void async_send(mih::message& p,
                    const handler& h = handler());
``

Send the MIH message to the local MIHF asynchronously.

After the message is sent, the callback is called to report the success or
failure in delivering the message to the MIHF.

This method retuns immediately.

[*Parameters:]

*[*msg] - MIH message to send
*[*h] - completion callback handler as a function pointer/object

[endsect]

[section:sap_tutorial 3. Tutorial]
The tutorial programs in this section shows how to use ODTONE SAP to develop
simple SAPs.

[*Receiving MIH Messages]

In this example we have very basic running MIH User SAP that only receives
MIH messages (MIH Link SAP implementation is similar):

To receive messages, we need a callback handler:

``
	void event_handler(odtone::mih::message& pm, const boost::system::error_code& ec)
	{
		if (ec) {
			//do something with the error
			return;
		}

		switch (pm.mid()) {
			case odtone::indication::link_up:
				//...
				break;

			default:
				//...
		}
	}
``

And a simple main:

``
	int main()
	{
		boost::asio::io_service ios;
		odtone::mih::config cfg;
		odtone::sap::user mih_usr(cfg, ios, &event_handler);

		ios.run();
	}
``

[*Sending MIH Messages]

In this second example we added the ability to send MIH messages
(MIH Link SAP implementation is similar):

To send messages, we need a callback handler:

``
	void register_response_handler(odtone::mih::message& msg, const boost::system::error_code& ec)
	{
		if (ec) {
			//do something with the error
			return;
		}

		odtone::mih::status st;

		msg >> odtone::mih::response()
			 & odtone::mih::tlv_status(st);

		//...
	}
``

And a few modifications in the main to send the message:

``
	int main()
	{
		boost::asio::io_service ios;
		odtone::mih::config cfg;
		odtone::sap::user usr(cfg, ios, &event_handler);

		msg << odtone::mih::request(odtone::mih::request::mih_register);

		usr.async_send(msg, &register_response_handler);

		ios.run();
	}
``

[endsect]

[endsect]
