[/==============================================================================
 / Brief   : ODTONE Base Documentation
 / Authors : Carlos Guimaraes <cguimaraes@av.it.pt>
 / Authors : Bruno Santos     <bsantos@av.it.pt>
 /------------------------------------------------------------------------------
 / ODTONE - Open Dot Twenty One
 /
 / Copyright (C) 2009-2011 Universidade Aveiro
 / Copyright (C) 2009-2011 Instituto de Telecomunicações - Pólo Aveiro
 /
 / This software is distributed under a license. The full license
 / agreement can be found in the file LICENSE in this distribution.
 / This software may not be copied, modified, sold or distributed
 / other than expressed in the named license agreement.
 /
 / This software is distributed without any warranty.
 /=============================================================================]

[article ODTONE
    [quickbook 1.5]
    [version 0.3]
    [authors [Guimarães, Carlos]]
    [authors [Santos, Bruno]]
    [copyright 2009-2012 Universidade Aveiro]
    [copyright 2009-2012 Instituto de Telecomunicações - Pólo Aveiro]
    [license
        This software is distributed under a license. The full license
		agreement can be found in the LICENSE in this distribution.
		This software may not be copied, modified, sold or distributed
		other than expressed in the named license agreement.

		This software is distributed without any warranty.
    ]
    [source-mode c++]
]

[section:intro Introduction]

[h3 What is this?]

ODTONE stands for Open Dot Twenty ONE and it is an open-source implementation of
the Media Independent Handover framework from the IEEE 802.21 Media Independent
Handover Services standard, using C++ APIs.

[h3 What does it do?]

ODTONE supplies the implementation of a MIHF, supporting its inherent services
(Media Independent Event Service (MIES), Media Independent Command Service (MIIS)
and Media Independent Command Service (MICS), as well as supporting mechanisms
(Capability Discovery, MIHF Registration, Event Registration, etc.).
It also provides a set of APIs to enable ODTONE users to implement their own
MIH-Users and Link SAPs and to interface with ODTONE's MIHF.

[h3 What differences can be found regarding other IEEE 802.21 implementations?]

ODTONE aims to implement a MIHF that is capable of being deployed in multiple
operating systems. In a first stage, it will support GNU/Linux, followed by
Microsoft NT-based operating systems and others. This means this implementation
will be decoupled of highly dependent operating system mechanisms.

[h3 What does this mean?]

ODTONE's implementation aims to provide a MIHF that will work as a base for user's
scenarios and which will enable the users to implement their own MIH_SAP and
MIH_LINK_SAP. ODTONE provides a simple and flexible interface for the
development of these SAPs, handling MIH Protocol messages and state transitions.

[h3 How can I contribute?]

As was previously mentioned, ODTONE focuses on the MIHF and API's that will
enable users to implement their own MIH_SAP and MIH_LINK_SAP. This means that
it will be entirely up to the user to implement their MIH-Users and LINK technology
support. We would be more than happy to known about your work on these matters!

[h3 Changes in this release]

ODTONE 0.3 - Open Dot Twenty ONE.

*Added IPv4/IPv6 support.
*Added MIH Confirm Messages.
*Added internal Link SAP/MIH User discovery mechanism.
*Added support for multiple Link SAPs.
*MIHF capabilities are configured at Link SAPs.
*Fixed MIH Protocol state machines.
*New documentation: general documentation and incode documentation (that could be generated with Doxygen).


[endsect]

[section:getStart Getting Started]

[h1 Installation]

As ODTONE is developed to work in several platforms, we won't provide
detailed tutorials for each mainstream operating system. We
will rather present the main guidelines for installing ODTONE and any relevant
notes on specific platforms that might prove an obstacle.

[h3 1. Required Dependencies]

In order to correctly use ODTONE, you must first make sure that you have the
required dependencies:

* *Boost Developer libraries (v1.47)*

[h4 1.1. Boost Quick Guide]
Boost is required to compile ODTONE, so in order to correctly use ODTONE
you must first make sure you have the Boost libraries sources and Boost.Build
installed in your system.

*Download the Boost library(v1.47) [@http://www.boost.org/ boost's website]
and unpack it. We recommend that you unpack it in a project directory next to
odtone.

[teletype]``
projects/
    |
    +-- boost_1_47_0/
    |
    +-- odtone/
``

*To install Boost.Build got to 'boost_1_47_0/tools/build/v2/'. On unix like
systems run './bootstrap.sh' and then 'sudo ./b2 install'.
On windows like systems run 'bootstrap.bat' and then 'b2 install'.

To compile ODTONE go to 'odtone' and run 'b2'.

[important Consult the Boost.Build documentation for more details]

[h3 2. Getting ODTONE]

[*In a tarball]

You can get the ODTONE source code tarball from our
[@http://helios.av.it.pt/projects/odtone/files project page].
Then just unpack it and you are ready to compile and install ODTONE.

[*From the git repository]

You can create your own local copy of the ODTONE by cloning the git repository from
[@http://helios.av.it.pt/projects/odtone/repository ODTONE repository].
``
[*Username:] user
[*-- No password]
``

To clone the git repository you must run the next command:
``
	git clone https://user@helios.av.it.pt/git/odtone/ odtone
``

Then, in order to get the last changes in the code,
you can checkout the "dev/master" branch:
``
	git checkout -b <your branch name> origin/dev/master
``

[h3 3. Compiling ODTONE]

Once you have obtained the ODTONE source code and have assured that you have
the right dependencies you can compile it. ODTONE does not require any special
procedures or layout for installation.

[table Platform Support
    [[]        [x86-32]                 [x86-64]                 [ARM]]
    [[Linux]   [[$./images/check.png]]  [[$./images/check.png]]  [[$./images/check.png]] ]
    [[Windows] [[$./images/check.png]]  [[$./images/check.png]]  [[$./images/interrogation.png]]  ]
]

[note *For Linux*

We recommend GCC. Most distributions already come with the necessary
pre-requisites, you may additionally need to install g++.
]

[note *For Windows*

We recommend MSVC. You will need to download and install the latest Windows
SDK. This already comes with all pre-requisite libraries and toolchains.]

[note *For Android*

Android Bionic headers have several missing definitions for sockets and
networking, this makes ODTONE impossible to compile with the Android SDK.
However, since Android is based on linux, it is possible to compile ODTONE with
the CodeSourcery GNU Toolchain for ARM Processors, at the expense of a bigger
binary, since we have to link all libraries statically. The target must be
arm-none-linux-gnueabi.

Prebuild binaries are available at
[@http://www.codesourcery.com/sgpp/lite/arm CodeSourcery]

In order to setup user-config.jam for Android, you must add the following line
(without quotes):

"[~using gcc : android	: path-to-toolset/arm-none-linux-gnueabi-g++ : <linkflags>"-Wl,--whole-archive -lpthread -Wl,--no-whole-archive -lc" ;]"

To use the Android toolset, pass the command line option "[~toolset=gcc-android]"
to Boost.Build.

The Android SDK has the necessary tools to run, debug and deploy the ODTONE
binaries.]

[h3 4. Generate Doxygen Documentation]
As a supplement to this documentation, it is possible to generate incode documentation.
This can be done using Doxygen, which parses the sources and generates the documentation.
Doxygen uses a configuration file to determine all of its settings.

To simplify the creation of a configuration file, Doxygen can create a template
configuration file for you. To do this call Doxygen from the command line with
the -g option:

	doxygen -g <config-file>

To generate the documentation you can now enter:

	doxygen <config-file>


[heading ODTONE User Guide]

[h4 Configuration]

[*ODTONE-MIHF]

The MIHF can be configured based on a set of parameters, which can be
configured either using an configuration file or passing them directly
in the command line. The available configurable parameters are presented
next:

``
	MIHF Configuration Options:
	   --help                               Display configuration options
	   --conf.file arg (=odtone.conf)       Configuration file
	   --conf.recv_buff_len arg (=4096)     Receive buffer length
	   --mihf.id arg (=mihf)                MIHF ID
	   --mihf.ip arg (=127.0.0.1)           MIHF IP
	   --mihf.remote_port arg (=4551)       Remote MIHF communication port
	   --mihf.local_port arg (=1025)        Local SAPs communication port
	   --mihf.peers arg                     List of peer MIHFs
	   --mihf.users arg                     List of local MIH-Users
	   --mihf.links arg                     List of local Links SAPs
	   --mihf.transport arg (=udp, tcp)     List of supported transport protocols
	   --mihf.link_response_time arg (=300) Link SAP response time (milliseconds)
	   --mihf.link_delete arg (=2)          Link SAP response fails to forget
	   --enable_broadcast                   Allows broadcast messages
	   --log arg (=1)                       Log level [0-4]
``

[note
All configurable parameters are self-explained and, therefore,
we will only mention those that are more complex to configure.

[*List of peer MIHFs:] Comma separated list of remote MIHF's.

Usage: mihf.peers = <mihf id> <ip> <port>, ...

[*List of local MIH-Users:] Comma separated list of local MIH User SAP.

Usage: mihf.users = <user sap id> <port> <mbbhandover>, ...

[*List of local Link SAPs:] Comma separated list of local MIH Link SAPs.

Usage: mihf.links = <link sap id> <port> <techonoly type> <interface>, ...

[*List of suppoted transport protocols:] Comma separed list of the
transport protocols available. For now UDP and TCP protocols are supported.

Usage: mihf.transport = <udp/tcp>, ...

]

[*SAP's]
``
	MIH Usr Configuration:
	   --help                           Display configuration options
	   --conf.file arg (=mih_usr.conf)  Configuration file
	   --conf.recv_buff_len arg (=4096) Receive buffer length
	   --conf.port arg (=1234)          Listening port
	   --user.id arg (=user)            MIH-User ID
	   --user.handover arg (=1)         MIH-User handover support
	   --mihf.ip arg (=127.0.0.1)       Local MIHF IP address
	   --mihf.local_port arg (=1025)    Local MIHF communication port
	   --dest arg                       MIHF destination
``

``
	MIH Link SAP Configuration:
	     --help                           Display configuration options
	     --conf.file arg (=link_sap.conf) Configuration file
	     --conf.recv_buff_len arg (=4096) Receive buffer length
	     --link.id arg (=link)            Link SAP ID
	     --link.port arg (=1235)          Listening Port
	     --link.tec arg                   Technology type
	     --link.link_addr_list arg        Interface address
	     --link.event_list arg            List of supported events
	     --link.command_list arg          List of supported commands
	     --mihf.ip arg (=127.0.0.1)       Local MIHF IP
	     --mihf.id arg (=local-mihf)      Local MIHF ID
	     --mihf.local_port arg (=1025)    Local MIHF communication port
``

[note
All configurable parameters are self-explained and, therefore,
we will only mention those that are more complex to configure.

[*Technology type:] Network interface card technology.
Supported values: GSM, GPRS, EDGE, 802.3, Other, 802_11, CDMA2000, UMTS,
CDMA2000-HRPD, 802_16, 802_20, 802_22.

Usage: tec = <NIC technology>

[*Interface Address:] Network interface card address.

Usage: link_addr = <interface address>

[*List of supported events:] Comma separated list of the Link SAP's supported events.

Usage: event_list = <link event 1>, <link event 2>, (...), <link event N>

[*List of supported events:] Comma separated list of the Link SAP's supported commands.

Usage: command_list = <link command 1>, <link command 2>, (...), <link command N>

]

[h4 Local Demo]

The local demo consists in a simple experiment to demonstrate simple message
exchange between the MIHF, the MIH-User and the Link SAP. It allows you to see
how events are generated by the Link SAP and then reported to a MIH-User
that has subscribed to these events.

[$./images/local_demo.png]

[*Configuration]

In order to properly run the local demo you will need to edit the default
Link SAP configuration in order to identify the interface
that it will manage (['tec] and ['link_addr] properties).

[*Running Demo]

The best way to run this demo is to open 3 terminals.
On the first terminal start ODTONE-MIHF and on another terminal
start the Link SAP. You can see that, at Link SAP bootstrap, the Link SAP
will register itself with its the local MIHF. Now it's time to start the
MIH-User, on your remaining terminal. If all went well the MIH-User
has requested for the capabilities of the local MIHF and
printed out some information about the discovered interfaces (those that you
previously configured. For each discovered interface, the MIH-User will
subscribe to all supported events.

Now you can trigger some events by just disconnecting, disabling or shutting down
your network cable/interface or wireless card (according to what you configured).
You can see that the event notifications are propagated from the Link SAP to
the MIH-User.

[h4 Remote Demo]

The remote demo shows the ability of a MIH-User to obtain
event notifications that happens on a Link SAP located on another machine.
You are required to have two machines for this experiment. The first machine
will host an ODTONE-MIHF (mihf1) and the MIH-User, while the second will host
an ODTONE-MIHF (mihf2) and the Link_SAP.

[$./images/remote_demo.png]

[*Configuration]

Autonomous remote MIHF discovery is not yet implemented,
so you need to configure the remote MIHF's IP addresses and port
on each one of the MIHFs. Edit the ODTONE-MIHF configuration file and add an entry
to peers MIHFs in the form:

	<mihf_id> <ip> <port>

where <mihf_id> is the identifier of the remote MIHF, <ip> and <port>
are the IP address and port of the remote MIHF respectively.

[note You need to edit the configuration file on both machines]

The mihf1 configuration file must look like:
``
	[mihf]
	id = mihf1
	local_port = 1025
	remote_port = 4551
	peers = mihf2 <mihf1_IP_address> 4551
``

The mihf2 configuration file must look like:
``
	[mihf]
	id = mihf2
	local_port = 1025
	remote_port = 4551
	peers = mihf1 <mihf2_IP_address> 4551
``

[note If you are using an Android emulator, the web traffic is routed through your
development machine. So, the IP address assigned to Android emulator is the IP
address of your machine. The development machine can be reached from Android
emulator through 10.0.2.2.]

[*Running Demo]

On the machine that host the mihf2 start a terminal and run ODTONE-MIHF. Then, on another
terminal start the Link SAP.

On the machine that host the mihf1 start a terminal and run ODTONE-MIHF. Then, on another
terminal start the MIH-User with the configurable parameter ['--dest mihf2]. The ['--dest] option
tells the MIH-User to set the MIHF destination field of the frame to mihf2.

Now, like in the local demo, you can trigger some events by just disconnecting, disabling or shutting down
your network cable/interface or wireless card (according to what you configured).
You can see that the event notifications are propagated from the Link SAP to
the MIH-User.

[endsect]


[section:library Libraries]

[variablelist
    [[ODTONE Base] [
    The ODTONE BASE library contains a set of classes which offers several helper
	mechanisms (such as debug, list management, log, exceptions and random values
    generation) to facilitate the information management.]]

    [[ODTONE MIH] [
    The ODTONE MIH library defines all MIH data types presented in the 802.21
    standard. In addition, it provides a set of classes which facilitates
    the creation and parsing of MIH messages.]]

    [[ODTONE SAP] [
    The ODTONE SAP library contains a set of I/O service classes, providing the ability
    to send and receive MIH messages. The implementation is based on the
    boost::asio and it only supports asynchronous operation.
    [*Note:] It is important to be familiar with the boost::asio library.
    It is also recommend to be familiar with boost::function and
    boost::bind.]]
]

[xinclude ../odtone_base_lib.xml]
[xinclude ../odtone_mih_lib.xml]
[xinclude ../odtone_sap_lib.xml]

[endsect]


[section:app Applications]

[variablelist

    [[[link odtone.app.mihf_index ODTONE-MIHF]]
    [The MIHF is the central entity of the IEEE 802.21 standard, defined
    as a logical entity whose purpose is to facilitate handover decisions
    to the network selector entity. Its purpose is achieved by providing
    the inputs to higher layers through abstract services and communicating
    with the lower layers of the mobility-management protocol stack through
    technology-specific interfaces. By other words, the MIHF provides
    mechanisms that enable the upper layers to manage and control the
    handover procedure in a media independent way.]]

    [[[link odtone.app.mih_usr_index MIH-User]]
    [The MIH-User specifies a media independent interface between the MIHF and
     upper layers of the mobility management protocol stack. The upper layers need to
     register with the MIHF as users to receive MIHF-generated events and
     link-layer events which are originated at lower layers. MIH-Users
     directly send commands to the local MIHF using the service primitives
     available in the 802.21 standard.]]

    [[[link odtone.app.miis_index MIIS Server]]
    [The MIIS Server provides details about the characteristics and
	services provided by the serving and neighbor networks. The information
	enables effective system access and effective handover decisions.]]

    [[[link odtone.app.link_sap_index Link_SAP]]
    [The Link SAP specifies an abstract media dependent interface between the MIHF
     and the lower layers media-specific protocol stacks of technologies such as IEEE 802.3,
     IEEE 802.11, IEEE 802.16, 3GPP and 3GPP2.]]

    [[[link odtone.app.client_index Client]]
    [The ['client] is a simple application that lets you send any message
     to a particular destination. In this way, it is possible to send a specific message
     to a choosen destination in order to test is behaviour easily and quickly.]]

    [[[link odtone.app.dummyserver_index Dummyserver]]
    [The ['dummyserver] is a simple application that, as the name implies, works like
     a dummy server. It is always listening (at port 4000) for incoming messages and
     it outputs them in the console.]]
]

[include app/mihf.qbk]
[include app/mih_usr.qbk]
[include app/miis.qbk]
[include app/link_sap.qbk]
[include app/client.qbk]
[include app/dummyserver.qbk]

[endsect]

[section:license License]
[h4 GNU LESSER GENERAL PUBLIC LICENSE]

[h5 Version 3, 29 June 2007]

Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.

This version of the GNU Lesser General Public License incorporates
the terms and conditions of version 3 of the GNU General Public
License, supplemented by the additional permissions listed below.

[h6 0. Additional Definitions.]

As used herein, "this License" refers to version 3 of the GNU Lesser
General Public License, and the "GNU GPL" refers to version 3 of the GNU
General Public License.

"The Library" refers to a covered work governed by this License,
other than an Application or a Combined Work as defined below.

An "Application" is any work that makes use of an interface provided
by the Library, but which is not otherwise based on the Library.
Defining a subclass of a class defined by the Library is deemed a mode
of using an interface provided by the Library.

A "Combined Work" is a work produced by combining or linking an
Application with the Library.  The particular version of the Library
with which the Combined Work was made is also called the "Linked
Version".

The "Minimal Corresponding Source" for a Combined Work means the
Corresponding Source for the Combined Work, excluding any source code
for portions of the Combined Work that, considered in isolation, are
based on the Application, and not on the Linked Version.

The "Corresponding Application Code" for a Combined Work means the
object code and/or source code for the Application, including any data
and utility programs needed for reproducing the Combined Work from the
Application, but excluding the System Libraries of the Combined Work.

[h6 1. Exception to Section 3 of the GNU GPL.]

You may convey a covered work under sections 3 and 4 of this License
without being bound by section 3 of the GNU GPL.

[h6 2. Conveying Modified Versions.]

If you modify a copy of the Library, and, in your modifications, a
facility refers to a function or data to be supplied by an Application
that uses the facility (other than as an argument passed when the
facility is invoked), then you may convey a copy of the modified
version:

[*a)] under this License, provided that you make a good faith effort to
ensure that, in the event an Application does not supply the
function or data, the facility still operates, and performs
whatever part of its purpose remains meaningful, or

[*b)] under the GNU GPL, with none of the additional permissions of
this License applicable to that copy.

[h6 3. Object Code Incorporating Material from Library Header Files.]

The object code form of an Application may incorporate material from
a header file that is part of the Library.  You may convey such object
code under terms of your choice, provided that, if the incorporated
material is not limited to numerical parameters, data structure
layouts and accessors, or small macros, inline functions and templates
(ten or fewer lines in length), you do both of the following:

[*a)] Give prominent notice with each copy of the object code that the
Library is used in it and that the Library and its use are
covered by this License.

[*b)] Accompany the object code with a copy of the GNU GPL and this license
document.

[h6 4. Combined Works.]

You may convey a Combined Work under terms of your choice that,
taken together, effectively do not restrict modification of the
portions of the Library contained in the Combined Work and reverse
engineering for debugging such modifications, if you also do each of
the following:

[*a)] Give prominent notice with each copy of the Combined Work that
the Library is used in it and that the Library and its use are
covered by this License.

[*b)] Accompany the Combined Work with a copy of the GNU GPL and this license
document.

[*c)] For a Combined Work that displays copyright notices during
execution, include the copyright notice for the Library among
these notices, as well as a reference directing the user to the
copies of the GNU GPL and this license document.

[*d)] Do one of the following:

[*i)] Convey the Minimal Corresponding Source under the terms of this
License, and the Corresponding Application Code in a form
suitable for, and under terms that permit, the user to
recombine or relink the Application with a modified version of
the Linked Version to produce a modified Combined Work, in the
manner specified by section 6 of the GNU GPL for conveying
Corresponding Source.

[*ii)] Use a suitable shared library mechanism for linking with the
Library.  A suitable mechanism is one that (a) uses at run time
a copy of the Library already present on the user's computer
system, and (b) will operate properly with a modified version
of the Library that is interface-compatible with the Linked
Version.

[*e)] Provide Installation Information, but only if you would otherwise
be required to provide such information under section 6 of the
GNU GPL, and only to the extent that such information is
necessary to install and execute a modified version of the
Combined Work produced by recombining or relinking the
Application with a modified version of the Linked Version. (If
you use option 4d0, the Installation Information must accompany
the Minimal Corresponding Source and Corresponding Application
Code. If you use option 4d1, you must provide the Installation
Information in the manner specified by section 6 of the GNU GPL
for conveying Corresponding Source.)

[h6 5. Combined Libraries.]

You may place library facilities that are a work based on the
Library side by side in a single library together with other library
facilities that are not Applications and are not covered by this
License, and convey such a combined library under terms of your
choice, if you do both of the following:

[*a)] Accompany the combined library with a copy of the same work based
on the Library, uncombined with any other library facilities,
conveyed under the terms of this License.

[*b)] Give prominent notice with the combined library that part of it
is a work based on the Library, and explaining where to find the
accompanying uncombined form of the same work.

[h6 6. Revised Versions of the GNU Lesser General Public License.]

The Free Software Foundation may publish revised and/or new versions
of the GNU Lesser General Public License from time to time. Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.

Each version is given a distinguishing version number. If the
Library as you received it specifies that a certain numbered version
of the GNU Lesser General Public License "or any later version"
applies to it, you have the option of following the terms and
conditions either of that published version or of any later version
published by the Free Software Foundation. If the Library as you
received it does not specify a version number of the GNU Lesser
General Public License, you may choose any version of the GNU Lesser
General Public License ever published by the Free Software Foundation.

If the Library as you received it specifies that a proxy can decide
whether future versions of the GNU Lesser General Public License shall
apply, that proxy's public statement of acceptance of any version is
permanent authorization for you to choose that version for the
Library.
[endsect]
