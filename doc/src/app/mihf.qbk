[/==============================================================================
 / Brief   : MIHF Documentation
 / Authors : Carlos Guimaraes <cguimaraes@av.it.pt>
 /------------------------------------------------------------------------------
 / ODTONE - Open Dot Twenty One
 /
 / Copyright (C) 2010 Universidade Aveiro
 / Copyright (C) 2010 Instituto de Telecomunicações - Pólo Aveiro
 /
 / This software is distributed under a license. The full license
 / agreement can be found in the file LICENSE in this distribution.
 / This software may not be copied, modified, sold or distributed
 / other than expressed in the named license agreement.
 /
 / This software is distributed without any warranty.
 /=============================================================================]

[article ODTONE
    [quickbook 1.5]
    [version 0.2]
    [authors [Guimarães, Carlos]]
    [copyright 2010 Universidade Aveiro]
    [copyright 2010 Instituto de Telecomunicações - Pólo Aveiro]
    [license
        This software is distributed under a license. The full license
		agreement can be found in the LICENSE in this distribution.
		This software may not be copied, modified, sold or distributed
		other than expressed in the named license agreement.

		This software is distributed without any warranty.
    ]
    [source-mode c++]
]

[section:mihf_index Index]
[endsect]

[section:mihf_overview 1. Overview]

MIHF is a logical entity that facilitates handover decision making. MIH Users
make handover decisions based on inputs from the MIHF. It provides abstracted
services to higher layers. The service primitives defined by this interface are
based on the technology-specific protocol entities of the different access
networks. The MIHF communicates with the lower layers of the mobility-management
protocol stack through technology-specific interfaces.

In other words, the MIHF is a management entity that obtains link-layer
information from lower layers of different protocol stacks and also from other
remote nodes. The MIHF coordinates handover decision making with other peer MIHF
in the network.

The MIH Protocol provides capability for transferring MIH Messages between peer
MIHF entities at L2 or at L3. These messages transfer information about different
available networks and also provide network switching and handover capability
across different networks.

The following image illustrate the position of the MIHF in a protocol stack and
the interaction of the MIHF with other elements of the system. All exchanges
between the MIHF and other functional entities occur through service primitives,
grouped in service access points (SAPs).

[$./../../images/mihf.png]

[endsect]

[section:mihf_getStart 2. Getting Started]


[section Configuration]

For now the MIHFs capabilities are read from configuration files. Future
versions will inquire the available Link SAPs for the required information.
There are other parameters that can be configured either using an configuration
file or passing them directly in command line.

	MIHF Configuration Options:
	   --help                           Display configuration options
	   --conf.file arg (=odtone.conf)   Configuration File
	   --conf.recv_buff_len arg (=4096) Receive Buffer Length
	   --mihf.id arg (=mihf)            MIHF Id
	   --mihf.ip arg (=127.0.0.1)       MIHF Ip
	   --mihf.peers arg                 List of peer MIHFs
	   --mihf.users arg (=user 1234)    List of User SAPs
	   --mihf.links arg (=link 1235)    List of Links SAPs
	   --mihf.remote_port arg (=4551)   MIHF Remote Communications Port
	   --mihf.local_port arg (=1025)    MIHF Local Communications Port
	   --mihf.event_list arg            MIHF List of supported events
	   --mihf.link_addr_list arg        MIHF Network Type list
	   --enable_broadcast               MIHF responds to broadcast messages
	   --log arg (=1)                   MIHF log level [0-4]

[note
*List of peer MIHF's*

Comma separated list of remote MIHF's. If you want to test remote MIHF communication
add an entry here with the IP address of the remote MIHF.

Usage: <mihf id> <ip> <port>

*List of Users SAPs*

Comma separated list of local MIH User SAPs id's and ports. For the default demo
just use as is.

Usage: <user sap id> <port>

*List of Links SAPs*

Comma separated list of local MIH Link SAPs id's and ports. For the default demo
just use as is.

Usage: <link sap id> <port>

*MIHF Network Type list*

Comma separated list of network types that we broadcast on Capability_Discover.requests
For this static configuration, we only support declaring link identifiers with
the mac address. Future version will inquire the available Link SAPs for their
capabilities.

Usage: <link identifier> <mac address>

*MIHF List of supported events*

Comma separated list of the MIHF's supported events.

Usage: <link event 1>, <link event 2>, (...), <link event N>
]

[heading Example]

Automatic remote peer MIHF discovery is not yet implemented,
so you need to add the remote MIHF's IP address and port number to the
configuration file. Edit the file and add an entry to peers in the form:
<mihf_id> <ip> <port> where <mihf_id> is the identifier of the remote MIHF,
<ip> and <port> are the IP address and port of the remote MIHF.

[note You need to edit the configuration file on both machines]

On the machine with the mihf1 the configuration file can look like:

	[mihf]
	id = mihf1
	local_port = 1025
	remote_port = 4551
	peers = mihf2 <mihf1_IP_address> 4551
	users = user 1234

On the machine with the mihf2 the configuration file can look like:

	[mihf]
	id = mihf2
	local_port = 1025
	remote_port = 4551
	peers = mihf1 <mihf2_IP_address> 4551
	links = link 1235
	link_addr_list = 802_11 <mac_address>,ethernet <mac_address>
	event_list = link_detected, link_up, link_down,
	link_parameters_report, link_going_down,
	link_handover_imminent, link_handover_complete



[endsect]


[section Running]

The ODTONE-MIHF must be executed passing directly, in command line, the location
of the configuration file.

E.g.: ./odtone-mihf --conf.file=./src/mihf/odtone.conf

[endsect]

[endsect]

[section:mihf_internal_arch 3. MIHF Internal Architecture]

[section MIHF Architecture overview]

[$./../../images/mihf_arch.jpg]

[endsect]

[heading Components]

[h5 Listening Services: classes ['udp_listner] and ['tcp_listner]]

[$./../../images/listening_services.jpg]

The classes ['udp_listener] and ['tcp_listener] are wrappers around the
boost::asio::ip::udp and boost::asio::ip::tcp and are responsible for handling
UDP and TCP communications, respectively.

The MIHF receives messages from two different sources, other MIHFs and local
SAPs. If a message is from another MIHF, the message must be processed by the
transaction state machines, as defined in the standard. If it is from a local
SAP the transaction state machines are bypassed to reduce the number of messages
exchanged locally.

A dispatch method is supplied when a listening service is instantiated, and is
called when a valid message is received.

If the listening service is responsible for remote communications, a reference
to a ['message_in] instance should be passed on the constructor. If it is
responsible for local communications, a reference to the ['sac_dispatch] method
should be supplied.

[h5 message_in]

[$./../../images/message_in.jpg]

The ['message_in] checks the transaction_pool for a pending transaction for
the incoming message, or if a new source transaction must be created and
then added to the transaction pool.

Then proceeds to run the newly created, or found, transaction.

[h5 Service Access Controller]

[$./../../images/service_access_controller.jpg]

The service access controller is split in ['sac_dispatch] and ['sac_process_message],
because the transaction state machines, defined in the standard, expect a
global function that processes the incoming message, and returns a boolean
indicating that a response message was generated. This complicates matters
because we don't want to run the local messages through the transaction
state machines.

The ['sac_dispatch] is called by the local communications listening service
and checks if the message id is supported. If so, the message is processed by
a previously declared handler.

The ['sac_process_message] is a global function called by the transaction
state machines that checks if the message id is supported by the MIHF, but
doesn't try to send the message directly, it just returns to the transaction
state machine that called it.
Registering a callback handler for a MIH message is done with the
['sac_register_callback] function.

[h5 MIHF Services]

[$./../../images/mihf_services.jpg]

These refer to the Event Service, Command Service, Service Management and
Information Service that are responsible for handling the different kind of
messages.

A local transaction pool is supplied to handle pending transactions from local
SAPs. A user might request to send a message to a peer MIHF, and in order to
forward it the response some state must be stored.

[h5 transmit]

[$./../../images/transmit.jpg]

This class is used by the MIHFs services, and checks if the MIH destination
identifier of the message is in the local address book. If it is, the message is
for a local SAP and the udp_send method is called to send the message. If it's
not in the local address book the message is forwarded to the ['message_out].

[h5 message_out]

[$./../../images/message_out.jpg]

Checks, in the transaction pool, if the outgoing message belongs to a pending
transaction, if so the transaction is run and eventually the message is sent.

[h5 net_sap]

[$./../../images/net_sap.jpg]

This class, when called, checks if the MIH destination identifier is in the
remote address book, if so the message is sent using on of ['udp_send] or
['tcp_send].

[h5 udp_send and tcp_send]

[$./../../images/udp_send_and_tcp_send.jpg]

These are functions that send a message using the specified protocol.

The classes ['udp_send] and ['tcp_send] are responsible for handling UDP and TCP
communications, respectively.

[section Helper classes]

[h5 meta_message]

A ['meta_message] is a derived class from
[@file:../../../libs/mihLib/odtone/odtone_mih_message_class.html odtone::mih::message]
with added metadata.

The metadata indicates if the message was received on the loopback interface,
and also the IP and port of the sender of the message. It's useful mostly due to
broadcast messages.

[h5 address_book]

This class is used to store information on how to communicate with other
entities. An address book (local_abook) is instantiated to store information on
local SAPs. Another (remote_abook) is instantiated to store information of peer
MIHFs.

[endsect]

[endsect]

[section:mihf_backtrace 4. Function Backtrace]

[section Local MIH Capability Discover Request (MIH_User)]

[*Description]

1) User sends a Capability Discover Request to find the Local MIHFs capabilities.

2) MIHF sends a Capability Discover Response to the User.

[$./../../images/local_mih_capability_discover_request(mih_user).png]

[endsect]

[section Remote MIH Capability Discover Request (MIH_User)]

[*Description]

1) User sends a Capability Discover Request to find a peer MIHFs capabilities.

2) Local MIHF forwards request to peer MIHF.

[$./../../images/remote_mih_capability_discover_request(mih_user).png]

[endsect]

[section Remote MIH Capability Discover Request (Peer MIHF)]

[*Description]

1) MIHF receives a Capability Discover Request from a peer MIHF.

2) MIHF sends a Capability Discover Response to the peer MIHF.

[$./../../images/remote_mih_capability_discover_request(peer_mihf).png]

[endsect]

[section Remote MIH Capability Discover Response (Peer MIHF)]

[*Description]

1) Peer MIHF received Capability Discover Request and has responded with a
Capability Discover Response.

2) Local MIHF sends a Capability Discover Confirm to the User.

[$./../../images/remote_mih_capability_discover_response(peer_mihf).png]

[endsect]

[endsect]



[section:mihf_internals 5. ODTONE MIHF internals]

[section Internal Communications use UDP sockets on loopback interface]

Internal communications are communications between the MIHF and local SAPs
(users and link). ODTONE uses UDP sockets binded to the loopback interface
(127.0.0.1) for exchanging messages between these entities.

[endsect]

[section MIH confirm messages must set the opcode to 0 (zero)]

Chapter 7 of the MIH standard defines the primitives that should be supported
by an implementation. These primitives show how a SAP can interact with a MIHF.

Chapter 8, of the same standard, defines the message MIH protocol messages for
remote communications (communications between MIHFs).

The ODTONE implementation uses the messages defined on chapter 8 to implement
the primitives of chapter 7.

Please note that the MIHF sends confirm messages to SAPs and response messages
to MIHFs, and that the MIH protocol allocates 16 bits for the MIH message ID,
2 of those are for the opcode. The opcode defines if a message is a request,
response or indication. So, with 2 bits we can encode 4 values, 3 are already
taken, this leaves 1 available combination for the missing confirm primitives.
Confirm primitives set the opcode to 0 (zero).

[endsect]

[section TCP Support not enabled but supported]

There is a wrapper (['tcp_listener]) for handling TCP communications, but a
method for reading from the configuration file and enabling TCP support, for
the MIHF is not implemented.

The ['tcp_listener] class was discussed in detail in a
[link odtone.mihf_internal_arch.listening_services__classes__emphasis_udp_listner__emphasis__and__emphasis_tcp_listner__emphasis_ previous chapter.]

[endsect]

[section IPv6 not enabled but supported]

By default all communications are IPv4. To enable IPv6 a configuration option
should be supplied and checked on MIHF boostrap. This should be trivial to
support.

	Example, on src/mihf/main.cpp:479 change to:
    udp_listener remotelistener(io, ip::udp::v6(), "::::", rport, rdispatch);

[endsect]

[section Differences in the state machines]

[heading ACK Requestor State Machine]

[table ACK requestor state machine differences
    [[Standard]      													[ODTONE]]
    [[[$./../../images/ack_requestor_state_machine_standard.png]]		[[$./../../images/ack_requestor_state_machine_odtone.png]]	]
]

[heading ACK Responder State Machine]

[table ACK responder state machine differences
    [[Standard]      													[ODTONE]]
    [[[$./../../images/ack_responder_state_machine_standard.png]]		[[$./../../images/ack_responder_state_machine_odtone.png]]	]
]

[endsect]

[endsect]
