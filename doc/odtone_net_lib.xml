<?xml version="1.0" standalone="yes"?>
<library-reference id="odtone_net_library"><title>ODTONE NET Library</title><header name="/home/carlos/Desktop/release/inc/odtone/net/dns/frame.hpp"><namespace name="odtone"><namespace name="dns"><struct name="frame"><description><para>DNS message frame. This class provides access to all fields of the DNS message header. </para></description><data-member name="mask_qr" specifiers="static"><type>const uint8</type><description><para>DNS Message Query/Response Flag mask. </para></description></data-member><data-member name="mask_opcode" specifiers="static"><type>const uint8</type><description><para>DNS Message Operation Code mask. </para></description></data-member><data-member name="mask_aa" specifiers="static"><type>const uint8</type><description><para>DNS Message Authoritative Answer Flag mask. </para></description></data-member><data-member name="mask_tc" specifiers="static"><type>const uint8</type><description><para>DNS Message Truncation Flag mask. </para></description></data-member><data-member name="mask_rd" specifiers="static"><type>const uint8</type><description><para>DNS Message Recursion Desired mask. </para></description></data-member><data-member name="mask_ra" specifiers="static"><type>const uint8</type><description><para>DNS Message Recursion Available mask. </para></description></data-member><data-member name="mask_z" specifiers="static"><type>const uint8</type><description><para>DNS Message Zero mask. </para></description></data-member><data-member name="mask_rcode" specifiers="static"><type>const uint8</type><description><para>DNS Message Response Code mask. </para></description></data-member><data-member name="hdr"><type>uint8</type><description><para>Frame bytes. </para></description></data-member><method-group name="public static functions"><method name="cast" cv=""><type>static <classname>frame</classname> *</type><parameter name="buff"><paramtype>void *</paramtype><description><para>The byte buffer. </para></description></parameter><parameter name="len"><paramtype>size_t</paramtype><description><para>The size of the byte buffer. </para></description></parameter><description><para>Convert a byte buffer to a frame.</para><para>

</para></description><returns><para>The pointer of the returning frame. </para></returns></method><method name="cast" cv=""><type>static const <classname>frame</classname> *</type><parameter name="buff"><paramtype>const void *</paramtype><description><para>The byte buffer. </para></description></parameter><parameter name="len"><paramtype>size_t</paramtype><description><para>The size of the byte buffer. </para></description></parameter><description><para>Convert a byte buffer to a frame.</para><para>

</para></description><returns><para>The pointer of the returning frame. </para></returns></method></method-group><method-group name="public member functions"><method name="tid" cv=""><type>void</type><parameter name="tid"><paramtype>uint16</paramtype><description><para>The value of the DNS Message Transaction Identifier field. </para></description></parameter><description><para>Set the DNS Message Transaction Identifier.</para><para>
</para></description></method><method name="qr" cv=""><type>void</type><parameter name="qr"><paramtype>bool</paramtype><description><para>The value of the DNS Message Query/Response Flag field. </para></description></parameter><description><para>Set the DNS Message Query/Response Flag.</para><para>
</para></description></method><method name="opcode" cv=""><type>void</type><parameter name="opcode"><paramtype>uint8</paramtype><description><para>The value of the DNS Message Operation Code field. </para></description></parameter><description><para>Set the DNS Message Operation Code.</para><para>
</para></description></method><method name="aa" cv=""><type>void</type><parameter name="aa"><paramtype>bool</paramtype><description><para>The value of the DNS Message Authoritative Answer Flag field. </para></description></parameter><description><para>Set the DNS Message Authoritative Answer Flag.</para><para>
</para></description></method><method name="tc" cv=""><type>void</type><parameter name="tc"><paramtype>bool</paramtype><description><para>The value of the DNS Message Truncation Flag field. </para></description></parameter><description><para>Set the DNS Message Truncation Flag.</para><para>
</para></description></method><method name="rd" cv=""><type>void</type><parameter name="rd"><paramtype>bool</paramtype><description><para>The value of the DNS Message Recursion Desired field. </para></description></parameter><description><para>Set the DNS Message Recursion Desired.</para><para>
</para></description></method><method name="ra" cv=""><type>void</type><parameter name="ra"><paramtype>bool</paramtype><description><para>The value of the DNS Message Recursion Available field. </para></description></parameter><description><para>Set the DNS Message Recursion Available.</para><para>
</para></description></method><method name="z" cv=""><type>void</type><parameter name="z"><paramtype>bool</paramtype><description><para>The value of the DNS Message Zero field. </para></description></parameter><description><para>Set the DNS Message Zero.</para><para>
</para></description></method><method name="rcode" cv=""><type>void</type><parameter name="rcode"><paramtype>uint8</paramtype><description><para>The value of the DNS Message Response Code field. </para></description></parameter><description><para>Set the DNS Message Response Code.</para><para>
</para></description></method><method name="nquery" cv=""><type>void</type><parameter name="nquery"><paramtype>uint16</paramtype><description><para>The value of the DNS Message Question Count field. </para></description></parameter><description><para>Set the DNS Message Question Count.</para><para>
</para></description></method><method name="nanswer" cv=""><type>void</type><parameter name="nanswer"><paramtype>uint16</paramtype><description><para>The value of the DNS Message Answer Record Count field. </para></description></parameter><description><para>Set the DNS Message Answer Record Count.</para><para>
</para></description></method><method name="nauth" cv=""><type>void</type><parameter name="nauth"><paramtype>uint16</paramtype><description><para>The value of the DNS Message Authority Record Count field. </para></description></parameter><description><para>Set the DNS Message Authority Record Count.</para><para>
</para></description></method><method name="nadd" cv=""><type>void</type><parameter name="nadd"><paramtype>uint16</paramtype><description><para>The value of the DNS Message Additional Record Count field. </para></description></parameter><description><para>Set the DNS Message Additional Record Count.</para><para>
</para></description></method><method name="tid" cv="const"><type>uint16</type><description><para>Get the DNS Message Transaction Identifier.</para><para>
</para></description><returns><para>The value of the DNS Message Transaction Identifier field. </para></returns></method><method name="qr" cv="const"><type>bool</type><description><para>Get the DNS Message Query/Response Flag.</para><para>
</para></description><returns><para>The value of the DNS Message Query/Response Flag field. </para></returns></method><method name="opcode" cv="const"><type>uint8</type><description><para>Get the DNS Message Operation Code.</para><para>
</para></description><returns><para>The value of the DNS Message Operation Code field. </para></returns></method><method name="aa" cv="const"><type>bool</type><description><para>Get the DNS Message Authoritative Answer Flag.</para><para>
</para></description><returns><para>The value of the DNS Message Authoritative Answer Flag field. </para></returns></method><method name="tc" cv="const"><type>bool</type><description><para>Get the DNS Message Truncation Flag.</para><para>
</para></description><returns><para>The value of the DNS Message Truncation Flag field. </para></returns></method><method name="rd" cv="const"><type>bool</type><description><para>Get the DNS Message Recursion Desired.</para><para>
</para></description><returns><para>The value of the DNS Message Recursion Desired field. </para></returns></method><method name="ra" cv="const"><type>bool</type><description><para>Get the DNS Message Recursion Available.</para><para>
</para></description><returns><para>The value of the DNS Message Recursion Available field. </para></returns></method><method name="z" cv="const"><type>bool</type><description><para>Get the DNS Message Zero.</para><para>
</para></description><returns><para>The value of the DNS Message Zero field. </para></returns></method><method name="rcode" cv="const"><type>uint8</type><description><para>Get the DNS Message Response Code.</para><para>
</para></description><returns><para>The value of the DNS Message Response Code field. </para></returns></method><method name="nquery" cv="const"><type>uint16</type><description><para>Get the DNS Message Question Count.</para><para>
</para></description><returns><para>The value of the DNS Message Question Count field. </para></returns></method><method name="nanswer" cv="const"><type>uint16</type><description><para>Get the DNS Message Answer Record Count.</para><para>
</para></description><returns><para>The value of the DNS Message Answer Record Count field. </para></returns></method><method name="nauth" cv="const"><type>uint16</type><description><para>Get the DNS Message Authority Record Count.</para><para>
</para></description><returns><para>The value of the DNS Message Authority Record Count field. </para></returns></method><method name="nadd" cv="const"><type>uint16</type><description><para>Get the DNS Message Additional Record Count.</para><para>
</para></description><returns><para>The value of the DNS Message Additional Record Count field. </para></returns></method><method name="payload" cv=""><type>uint8 *</type><description><para>Get the pointer of the message payload.</para><para>
</para></description><returns><para>The pointer of the message payload. </para></returns></method><method name="payload" cv="const"><type>const uint8 *</type><description><para>Get the pointer of the message payload.</para><para>
</para></description><returns><para>The pointer of the message payload. </para></returns></method><method name="get" cv=""><type>uint8 *</type><description><para>Get the pointer of the message payload.</para><para>
</para></description><returns><para>The pointer of the message payload. </para></returns></method><method name="get" cv="const"><type>const uint8 *</type><description><para>Get the pointer of the message payload.</para><para>
</para></description><returns><para>The pointer of the message payload. </para></returns></method></method-group></struct><typedef name="frame_vla"><type>buffer_vla&lt; <classname>frame</classname> &gt;</type></typedef></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/net/dns/message.hpp"><namespace name="odtone"><namespace name="dns"><class name="message"><description><para>DNS Message</para><para>The <classname alt="odtone::dns::message">odtone::dns::message</classname> is high level representation of an DNS message. It provides access to all fields of the DNS message header and to all resource records presented on the DNS Message.</para><para>The <classname alt="odtone::dns::message">odtone::dns::message</classname> can be set from an <classname alt="odtone::dns::frame">odtone::dns::frame</classname> that was received or it can create an <classname alt="odtone::dns::frame">odtone::dns::frame</classname> ready to be sent. </para></description><method-group name="public member functions"><method name="tid" cv=""><type>void</type><parameter name="tid"><paramtype>uint16</paramtype><description><para>The value of the DNS Message Transaction Identifier field. </para></description></parameter><description><para>Set the DNS Message Transaction Identifier.</para><para>
</para></description></method><method name="qr" cv=""><type>void</type><parameter name="qr"><paramtype>bool</paramtype><description><para>The value of the DNS Message Query/Response Flag field. </para></description></parameter><description><para>Set the DNS Message Query/Response Flag.</para><para>
</para></description></method><method name="opcode" cv=""><type>void</type><parameter name="opcode"><paramtype>uint8</paramtype><description><para>The value of the DNS Message Operation Code field. </para></description></parameter><description><para>Set the DNS Message Operation Code.</para><para>
</para></description></method><method name="aa" cv=""><type>void</type><parameter name="aa"><paramtype>bool</paramtype><description><para>The value of the DNS Message Authoritative Answer Flag field. </para></description></parameter><description><para>Set the DNS Message Authoritative Answer Flag.</para><para>
</para></description></method><method name="tc" cv=""><type>void</type><parameter name="tc"><paramtype>bool</paramtype><description><para>The value of the DNS Message Truncation Flag field. </para></description></parameter><description><para>Set the DNS Message Truncation Flag.</para><para>
</para></description></method><method name="rd" cv=""><type>void</type><parameter name="rd"><paramtype>bool</paramtype><description><para>The value of the DNS Message Recursion Desired field. </para></description></parameter><description><para>Set the DNS Message Recursion Desired.</para><para>
</para></description></method><method name="ra" cv=""><type>void</type><parameter name="ra"><paramtype>bool</paramtype><description><para>The value of the DNS Message Recursion Available field. </para></description></parameter><description><para>Set the DNS Message Recursion Available.</para><para>
</para></description></method><method name="z" cv=""><type>void</type><parameter name="z"><paramtype>bool</paramtype><description><para>The value of the DNS Message Zero field. </para></description></parameter><description><para>Set the DNS Message Zero.</para><para>
</para></description></method><method name="rcode" cv=""><type>void</type><parameter name="rcode"><paramtype>uint8</paramtype><description><para>The value of the DNS Message Response Code field. </para></description></parameter><description><para>Set the DNS Message Response Code.</para><para>
</para></description></method><method name="query" cv=""><type>void</type><parameter name="query"><paramtype>std::vector&lt; <classname>question</classname> &gt;</paramtype><description><para>The value of the DNS Message Question list. </para></description></parameter><description><para>Set the DNS Message Question list.</para><para>
</para></description></method><method name="answer" cv=""><type>void</type><parameter name="answer"><paramtype>std::vector&lt; <classname>resource_record</classname> &gt;</paramtype><description><para>The value of the DNS Message Answer Record list. </para></description></parameter><description><para>Set the DNS Message Answer Record list.</para><para>
</para></description></method><method name="auth" cv=""><type>void</type><parameter name="auth"><paramtype>std::vector&lt; <classname>resource_record</classname> &gt;</paramtype><description><para>The value of the DNS Message Authority Record list. </para></description></parameter><description><para>Set the DNS Message Authority Record list.</para><para>
</para></description></method><method name="add" cv=""><type>void</type><parameter name="add"><paramtype>std::vector&lt; <classname>resource_record</classname> &gt;</paramtype><description><para>The value of the DNS Message Additional Record Count list. </para></description></parameter><description><para>Set the DNS Message Additional Record list.</para><para>
</para></description></method><method name="tid" cv="const"><type>uint16</type><description><para>Get the DNS Message Transaction Identifier.</para><para>
</para></description><returns><para>The value of the DNS Message Transaction Identifier field. </para></returns></method><method name="qr" cv="const"><type>bool</type><description><para>Get the DNS Message Query/Response Flag.</para><para>
</para></description><returns><para>The value of the DNS Message Query/Response Flag field. </para></returns></method><method name="opcode" cv="const"><type>uint8</type><description><para>Get the DNS Message Operation Code.</para><para>
</para></description><returns><para>The value of the DNS Message Operation Code field. </para></returns></method><method name="aa" cv="const"><type>bool</type><description><para>Get the DNS Message Authoritative Answer Flag.</para><para>
</para></description><returns><para>The value of the DNS Message Authoritative Answer Flag field. </para></returns></method><method name="tc" cv="const"><type>bool</type><description><para>Get the DNS Message Truncation Flag.</para><para>
</para></description><returns><para>The value of the DNS Message Truncation Flag field. </para></returns></method><method name="rd" cv="const"><type>bool</type><description><para>Get the DNS Message Recursion Desired.</para><para>
</para></description><returns><para>The value of the DNS Message Recursion Desired field. </para></returns></method><method name="ra" cv="const"><type>bool</type><description><para>Get the DNS Message Recursion Available.</para><para>
</para></description><returns><para>The value of the DNS Message Recursion Available field. </para></returns></method><method name="z" cv="const"><type>bool</type><description><para>Get the DNS Message Zero.</para><para>
</para></description><returns><para>The value of the DNS Message Zero field. </para></returns></method><method name="rcode" cv="const"><type>uint8</type><description><para>Get the DNS Message Response Code.</para><para>
</para></description><returns><para>The value of the DNS Message Response Code field. </para></returns></method><method name="nquery" cv="const"><type>uint16</type><description><para>Get the DNS Message Question Count.</para><para>
</para></description><returns><para>The value of the DNS Message Question Count field. </para></returns></method><method name="nanswer" cv="const"><type>uint16</type><description><para>Get the DNS Message Answer Record Count.</para><para>
</para></description><returns><para>The value of the DNS Message Answer Record Count field. </para></returns></method><method name="nauth" cv="const"><type>uint16</type><description><para>Get the DNS Message Authority Record Count.</para><para>
</para></description><returns><para>The value of the DNS Message Authority Record Count field. </para></returns></method><method name="nadd" cv="const"><type>uint16</type><description><para>Get the DNS Message Additional Record Count.</para><para>
</para></description><returns><para>The value of the DNS Message Additional Record Count field. </para></returns></method><method name="query" cv=""><type>std::vector&lt; <classname>question</classname> &gt;</type><description><para>Get the DNS Message Question list.</para><para>
</para></description><returns><para>The DNS Message Question list. </para></returns></method><method name="answer" cv=""><type>std::vector&lt; <classname>resource_record</classname> &gt;</type><description><para>Get the DNS Message Answer Record list.</para><para>
</para></description><returns><para>The DNS Message Answer Record list. </para></returns></method><method name="auth" cv=""><type>std::vector&lt; <classname>resource_record</classname> &gt;</type><description><para>Get the DNS Message Authority Record list.</para><para>
</para></description><returns><para>The DNS Message Authority Record list. </para></returns></method><method name="add" cv=""><type>std::vector&lt; <classname>resource_record</classname> &gt;</type><description><para>Get the DNS Message Additional Record list.</para><para>
</para></description><returns><para>The DNS Message Additional Record Count list. </para></returns></method><method name="get_frame" cv="const"><type>void</type><parameter name="fm"><paramtype>frame_vla &amp;</paramtype><description><para>A dynamic frame buffer to store the information. </para></description></parameter><description><para>Get the DNS Message Frame.</para><para>
</para></description></method></method-group><constructor><description><para>Construct a default DNS Message.</para><para>The defaults for each field are: tid = 0; qr = false; opcode = 0; aa = false; tc = false; rd = false; ra = false; z = false; rcode = false; nquery = false; nanswer = false; nauth = false; nadd = false; </para></description></constructor><constructor><parameter name="fm"><paramtype>const <classname>frame</classname> &amp;</paramtype><description><para><classname alt="odtone::dns::frame">odtone::dns::frame</classname> from which to parse information. </para></description></parameter><description><para>Construct a DNS Message parsing all fields from a frame.</para><para>
</para></description></constructor><destructor><description><para>Destruct a DNS Message. </para></description></destructor><copy-assignment><parameter name="fm"><paramtype>const <classname>frame</classname> &amp;</paramtype><description><para><classname alt="odtone::dns::frame">odtone::dns::frame</classname> from which to extract information. </para></description></parameter><description><para>Extract the DNS Message fields from a given <classname alt="odtone::dns::frame">odtone::dns::frame</classname>.</para><para>

</para></description><returns><para><classname alt="odtone::dns::message">odtone::dns::message</classname> with the fields updated. </para></returns></copy-assignment></class></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/net/dns/resolver.hpp"><namespace name="odtone"><namespace name="dns"><struct name="query"><description><para>Struct to store query information. </para></description><data-member name="ctx"><type>void *</type><description><para>Context. </para></description></data-member><data-member name="name"><type>std::string</type><description><para>Host name. </para></description></data-member><data-member name="qtype"><type>uint16</type><description><para>Query type. </para></description></data-member><data-member name="tid"><type>uint16</type><description><para>UDP DNS transaction ID. </para></description></data-member><data-member name="expire"><type>time_t</type><description><para>Time when this query expire. </para></description></data-member><data-member name="dns_message"><type><classname>message</classname></type><description><para>Response DNS message. </para></description></data-member><data-member name="callback"><type>dns_callback_t</type><description><para>User callback routine. </para></description></data-member><method-group name="public member functions"><method name="operator==" cv="const"><type>bool</type><parameter name="other"><paramtype>const struct <classname>query</classname> &amp;</paramtype><description><para>The query to compare with. </para></description></parameter><description><para>Check if the query is equal to another query.</para><para>

</para></description><returns><para>True if they are equal or false otherwise. </para></returns></method></method-group></struct><struct name="callback_info"><description><para>Structure that is passed to the applciation callback, which as several information about the query performed. </para></description><data-member name="context"><type>void *</type><description><para>Context. </para></description></data-member><data-member name="name"><type>std::string</type><description><para>Requested host name. </para></description></data-member><data-member name="query_type"><type>enum dns_query_type</type><description><para>Query type. </para></description></data-member><data-member name="error"><type>enum dns_status</type><description><para>Error type. </para></description></data-member><data-member name="dns_message"><type><classname>message</classname></type><description><para>Response DNS message. </para></description></data-member></struct><class name="resolver"><method-group name="public member functions"><method name="queue" cv=""><type>void</type><parameter name="host"><paramtype>std::string</paramtype><description><para>The query to be performed. </para></description></parameter><parameter name="type"><paramtype>enum dns_query_type</paramtype><description><para>The query type. </para></description></parameter><parameter name="app_callback"><paramtype>dns_callback_t</paramtype><description><para>The application callback function. </para></description></parameter><description><para>Queries the DNS server.</para><para>
</para></description></method></method-group><constructor><parameter name="io"><paramtype>boost::asio::io_service &amp;</paramtype><description><para>The io_service object that the resolver will use to dispatch handlers for any asynchronous operations performed on the socket. </para></description></parameter><description><para>Construct the DNS resolver.</para><para>
</para></description></constructor><destructor><description><para>Destruct the DNS resolver. </para></description></destructor><method-group name="private member functions"><method name="receive_handler" cv=""><type>void</type><parameter name="buff"><paramtype>buffer&lt; uint8 &gt; &amp;</paramtype><description><para>The input message bytes. </para></description></parameter><parameter name="rbytes"><paramtype>size_t</paramtype><description><para>The number of bytes of the input message. </para></description></parameter><parameter name="error"><paramtype>const boost::system::error_code &amp;</paramtype><description><para>The error code. </para></description></parameter><description><para>Handle the reception of an asynchronous message.</para><para>
</para></description></method><method name="callback" cv=""><type>void</type><parameter name="query"><paramtype>struct <classname>query</classname></paramtype><description><para>The query information. </para></description></parameter><parameter name="status"><paramtype>enum dns_status</paramtype><description><para>The query status. </para></description></parameter><description><para>Find out if a given query is active.</para><para>
</para></description></method><method name="dns_queue" cv=""><type>void</type><parameter name="ctx"><paramtype>void *</paramtype><description><para>The query context. </para></description></parameter><parameter name="name"><paramtype>std::string</paramtype><description><para>The query to be performed. </para></description></parameter><parameter name="qtype"><paramtype>enum dns_query_type</paramtype><description><para>The query type. </para></description></parameter><parameter name="dns_ip"><paramtype>std::string</paramtype><description><para>The DNS server IP address. </para></description></parameter><parameter name="app_callback"><paramtype>dns_callback_t</paramtype><description><para>The application callback function. </para></description></parameter><description><para>Queue the resolution.</para><para>
</para></description></method><method name="dns_cancel" cv=""><type>void</type><parameter name="context"><paramtype>const void *</paramtype><description><para>The query context. </para></description></parameter><description><para>Cancel the query.</para><para>
</para></description></method><method name="find_cached_query" cv=""><type>boost::optional&lt; struct <classname>query</classname> &gt;</type><parameter name="name"><paramtype>std::string</paramtype><description><para>The domain name. </para></description></parameter><parameter name="qtype"><paramtype>enum dns_query_type</paramtype><description><para>The query type. </para></description></parameter><description><para>Find a given query in cache.</para><para>

</para></description><returns><para>The query information. </para></returns></method><method name="find_active_query" cv=""><type>boost::optional&lt; struct <classname>query</classname> &gt;</type><parameter name="tid"><paramtype>uint16</paramtype><description><para>The transaction identifier. </para></description></parameter><description><para>Find out if a given query is active.</para><para>

</para></description><returns><para>The query information if found. </para></returns></method><method name="cleanup" cv=""><type>void</type><description><para>Cleanup expired queries. </para></description></method></method-group></class><enum name="dns_query_type"><enumvalue name="DNS_A_RECORD"><default> 0x01</default><description><para>Lookup IPv4 address for host. </para></description></enumvalue><enumvalue name="DNS_MX_RECORD"><default> 0x0f</default><description><para>Lookup MX for domain. </para></description></enumvalue><enumvalue name="DNS_AAAA_RECORD"><default> 0x1c</default><description><para>Lookup IPv6 address for host. </para></description></enumvalue><enumvalue name="DNS_SRV_RECORD"><default> 0x21</default><description><para>Lookup SRV for domain. </para></description></enumvalue><enumvalue name="DNS_NAPTR_RECORD"><default> 0x23</default><description><para>Lookup NAPTR for domain. </para></description></enumvalue><description><para>DNS query type enumeration. </para></description></enum><enum name="dns_status"><enumvalue name="DNS_OK"><description><para>No error. </para></description></enumvalue><enumvalue name="DNS_DOES_NOT_EXIST"><description><para>Address does not exist. </para></description></enumvalue><enumvalue name="DNS_TIMEOUT"><description><para>Lookup time expired. </para></description></enumvalue><enumvalue name="DNS_ERROR"><description><para>Generic error. </para></description></enumvalue><description><para>DNS query status enumeration </para></description></enum><typedef name="dns_callback_t"><description><para>Callback routine definition. </para></description><type>boost::function&lt; void(struct <classname>callback_info</classname> *)</type></typedef></namespace></namespace><macro name="DNS_PACKET_LEN"><description><para>Buffer size for DNS packet. </para></description></macro><macro name="DNS_QUERY_TIMEOUT"><description><para>Query timeout, seconds. </para></description></macro></header><header name="/home/carlos/Desktop/release/inc/odtone/net/dns/types.hpp"><namespace name="odtone"><namespace name="dns"><struct name="question"><data-member name="_domain"><type>std::string</type></data-member><data-member name="_type"><type>uint16</type></data-member><data-member name="_class"><type>uint16</type></data-member><method-group name="public member functions"/><constructor><parameter name="domain"><paramtype>std::string</paramtype></parameter><parameter name="qtype"><paramtype>uint16</paramtype></parameter><parameter name="qclass"><paramtype>uint16</paramtype></parameter></constructor></struct><struct name="resource_record"><data-member name="_name"><type>std::string</type></data-member><data-member name="_type"><type>uint16</type></data-member><data-member name="_class"><type>uint16</type></data-member><data-member name="_ttl"><type>uint32</type></data-member><data-member name="_rr_len"><type>uint16</type></data-member><data-member name="_rr_data"><type>std::vector&lt; uint8 &gt;</type></data-member><method-group name="public member functions"/><constructor><parameter name="qname"><paramtype>std::string</paramtype></parameter><parameter name="qtype"><paramtype>uint16</paramtype></parameter><parameter name="qclass"><paramtype>uint16</paramtype></parameter><parameter name="ttl"><paramtype>uint32</paramtype></parameter><parameter name="rr_len"><paramtype>uint16</paramtype></parameter><parameter name="rr_data"><paramtype>std::vector&lt; uint8 &gt;</paramtype></parameter></constructor></struct><struct name="a_record"><data-member name="_ipv4"><type>std::string</type></data-member><method-group name="public member functions"/><constructor><parameter name="ipv4"><paramtype>std::string</paramtype></parameter></constructor></struct><struct name="aaaa_record"><data-member name="_ipv6"><type>std::string</type></data-member><method-group name="public member functions"/><constructor><parameter name="ipv6"><paramtype>std::string</paramtype></parameter></constructor></struct><struct name="naptr_record"><data-member name="_order"><type>uint16</type></data-member><data-member name="_preference"><type>uint16</type></data-member><data-member name="_flags"><type>std::string</type></data-member><data-member name="_service"><type>std::string</type></data-member><data-member name="_regex"><type>std::string</type></data-member><data-member name="_replacement"><type>std::string</type></data-member><method-group name="public member functions"/><constructor><parameter name="order"><paramtype>uint16</paramtype></parameter><parameter name="preference"><paramtype>uint16</paramtype></parameter><parameter name="flags"><paramtype>std::string</paramtype></parameter><parameter name="service"><paramtype>std::string</paramtype></parameter><parameter name="regex"><paramtype>std::string</paramtype></parameter><parameter name="replacement"><paramtype>std::string</paramtype></parameter></constructor></struct><struct name="srv_record"><data-member name="_priority"><type>uint16</type></data-member><data-member name="_weight"><type>uint16</type></data-member><data-member name="_port"><type>uint16</type></data-member><data-member name="_target"><type>std::string</type></data-member><method-group name="public member functions"/><constructor><parameter name="priority"><paramtype>uint16</paramtype></parameter><parameter name="weight"><paramtype>uint16</paramtype></parameter><parameter name="port"><paramtype>uint16</paramtype></parameter><parameter name="target"><paramtype>std::string</paramtype></parameter></constructor></struct></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/net/dns/utils.hpp"><namespace name="odtone"><namespace name="dns"><function name="parse_domain_name"><type>std::string</type><parameter name="p"><paramtype>const unsigned char *</paramtype><description><para>Byte array containing the information. </para></description></parameter><parameter name="pos"><paramtype>int &amp;</paramtype><description><para>Position in the byte array where to start parsing. </para></description></parameter><description><para>Parse a domain name. In the end the position is pointing to the next byte after the domain name end.</para><para>

</para></description><returns><para>The domain name in the string form. </para></returns></function><function name="parse_string"><type>std::string</type><parameter name="p"><paramtype>const unsigned char *</paramtype><description><para>Byte array containing the information. </para></description></parameter><parameter name="pos"><paramtype>int &amp;</paramtype><description><para>Position in the byte array where to start parsing. </para></description></parameter><description><para>Parse a string. In the end the position is pointing to the next byte after the string end.</para><para>

</para></description><returns><para>The string value. </para></returns></function><function name="parse_uint16"><type>uint16</type><parameter name="p"><paramtype>const unsigned char *</paramtype><description><para>Byte array containing the information. </para></description></parameter><parameter name="pos"><paramtype>int &amp;</paramtype><description><para>Position in the byte array where to start parsing. </para></description></parameter><description><para>Parse an unsigned int16. In the end the position is pointing to the next byte after the unsigned int16 end.</para><para>

</para></description><returns><para>The unsigned int16 value. </para></returns></function><function name="parse_uint32"><type>uint32</type><parameter name="p"><paramtype>const unsigned char *</paramtype><description><para>Byte array containing the information. </para></description></parameter><parameter name="pos"><paramtype>int &amp;</paramtype><description><para>Position in the byte array where to start parsing. </para></description></parameter><description><para>Parse an unsigned int32. In the end the position is pointing to the next byte after the unsigned int32 end.</para><para>

</para></description><returns><para>The unsigned int32 value. </para></returns></function><function name="parse_data"><type>std::vector&lt; uint8 &gt;</type><parameter name="p"><paramtype>const unsigned char *</paramtype><description><para>Byte array containing the information. </para></description></parameter><parameter name="pos"><paramtype>int &amp;</paramtype><description><para>Position in the byte array where to start parsing. </para></description></parameter><parameter name="len"><paramtype>int</paramtype><description><para>Length of the byte array. </para></description></parameter><description><para>Parse a byte array. In the end the position is pointing to the next byte after the byte array end.</para><para>

</para></description><returns><para>The byte array value. </para></returns></function><function name="parse_a_record"><type><classname>a_record</classname></type><parameter name="p"><paramtype>const unsigned char *</paramtype><description><para>Byte array containing the information. </para></description></parameter><parameter name="pos"><paramtype>int</paramtype><description><para>Position in the byte array where to start parsing. </para></description></parameter><parameter name="len"><paramtype>int</paramtype><description><para>Length of the A Resource Record. </para></description></parameter><description><para>Parse a A Resource Record. In the end the position is pointing to the next byte after the A Resource Record end.</para><para>

</para></description><returns><para>The A Resource Record value. </para></returns></function><function name="parse_aaaa_record"><type><classname>aaaa_record</classname></type><parameter name="p"><paramtype>const unsigned char *</paramtype><description><para>Byte array containing the information. </para></description></parameter><parameter name="pos"><paramtype>int</paramtype><description><para>Position in the byte array where to start parsing. </para></description></parameter><parameter name="len"><paramtype>int</paramtype><description><para>Length of the AAAA Resource Record. </para></description></parameter><description><para>Parse a AAAA Resource Record. In the end the position is pointing to the next byte after the AAAA Resource Record end.</para><para>

</para></description><returns><para>The AAAA Resource Record value. </para></returns></function><function name="parse_naptr_record"><type><classname>naptr_record</classname></type><parameter name="p"><paramtype>const unsigned char *</paramtype><description><para>Byte array containing the information. </para></description></parameter><parameter name="pos"><paramtype>int</paramtype><description><para>Position in the byte array where to start parsing. </para></description></parameter><parameter name="len"><paramtype>int</paramtype><description><para>Length of the NAPTR Resource Record. </para></description></parameter><description><para>Parse a NAPTR Resource Record. In the end the position is pointing to the next byte after the NAPTR Resource Record end.</para><para>

</para></description><returns><para>The NAPTR Resource Record value. </para></returns></function><function name="parse_srv_record"><type><classname>srv_record</classname></type><parameter name="p"><paramtype>const unsigned char *</paramtype><description><para>Byte array containing the information. </para></description></parameter><parameter name="pos"><paramtype>int</paramtype><description><para>Position in the byte array where to start parsing. </para></description></parameter><parameter name="len"><paramtype>int</paramtype><description><para>Length of the SRV Resource Record. </para></description></parameter><description><para>Parse a SRV Resource Record. In the end the position is pointing to the next byte after the SRV Resource Record end.</para><para>

</para></description><returns><para>The SRV Resource Record value. </para></returns></function></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/net/ip/address.hpp"><namespace name="odtone"><namespace name="net"><namespace name="ip"/></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/net/ip/checksum.hpp"><namespace name="odtone"><namespace name="net"><namespace name="ip"><class name="checksum"><description><para>This class represents the checksum field in IP packets. </para></description><method-group name="public member functions"><method name="update" cv=""><type>void</type><parameter name="data"><paramtype>const void *</paramtype><description><para>Byte buffer. </para></description></parameter><parameter name="len"><paramtype>size_t</paramtype><description><para>Byte buffer length. </para></description></parameter><description><para>Update the checksum value based on the byte buffer.</para><para>
</para></description></method><method name="update" cv=""><type>void</type><parameter name="data"><paramtype>const uint16 *</paramtype><description><para>Byte buffer. </para></description></parameter><parameter name="len"><paramtype>size_t</paramtype><description><para>Byte buffer length. </para></description></parameter><description><para>Update the checksum value based on the byte buffer.</para><para>
</para></description></method><method name="final" cv="const"><type>uint16</type><description><para>Get the value of the checksum.</para><para>
</para></description><returns><para>The value of the checksum. </para></returns></method><method name="clear" cv=""><type>void</type><description><para>Clear the value of the checksum. </para></description></method></method-group><constructor><description><para>Construct an undefined checksum, i.e., it is set to zero value. </para></description></constructor></class></namespace></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/net/ip/icmp/icmp.hpp"><namespace name="odtone"><namespace name="net"><namespace name="ip"><struct name="icmp"><class name="filter"><description><para>This class represents an ICMP filter. </para></description><method-group name="public member functions"><method name="pass" cv=""><type>void</type></method><method name="pass" cv=""><type>void</type><parameter name="type_value"><paramtype>uint</paramtype></parameter></method><method name="block" cv=""><type>void</type></method><method name="block" cv=""><type>void</type><parameter name="type_value"><paramtype>uint</paramtype></parameter></method><method name="level" cv="const"><type>int</type><parameter name=""><paramtype>const boost::asio::ip::icmp &amp;</paramtype></parameter></method><method name="name" cv="const"><type>int</type><parameter name=""><paramtype>const boost::asio::ip::icmp &amp;</paramtype></parameter></method><method name="data" cv="const"><type>const void *</type><parameter name=""><paramtype>const boost::asio::ip::icmp &amp;</paramtype></parameter></method><method name="size" cv="const"><type>size_t</type><parameter name=""><paramtype>const boost::asio::ip::icmp &amp;</paramtype></parameter></method></method-group><constructor><parameter name="block"><paramtype>bool</paramtype></parameter></constructor><constructor><parameter name="block"><paramtype>bool</paramtype></parameter><parameter name="except_value_type"><paramtype>uint</paramtype></parameter></constructor></class><class name="header"><description><para>This class represents the header of an ICMP packet. </para></description><method-group name="public static functions"><method name="cast" cv=""><type>static T *</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="buffer"><paramtype>void *</paramtype></parameter><parameter name="length"><paramtype>size_t</paramtype></parameter><description><para>Convert a byte buffer ICMP packet.</para><para>

</para></description><returns><para>The pointer of the returning ICMP packet. </para></returns></method></method-group><method-group name="public member functions"><method name="type" cv="const"><type>uint8</type><description><para>Get the ICMP packet header type.</para><para>
</para></description><returns><para>The ICMP packet header type. </para></returns></method><method name="code" cv="const"><type>uint8</type><description><para>Get the ICMP packet header code.</para><para>
</para></description><returns><para>The ICMP packet header code. </para></returns></method><method name="checksum" cv=""><type>void</type><parameter name="csum"><paramtype>uint16</paramtype><description><para>The ICMP packet checksum field. </para></description></parameter><description><para>Set the ICMP packet checksum field.</para><para>
</para></description></method></method-group><constructor><parameter name="type"><paramtype>uint8</paramtype><description><para>The ICMP packet header type. </para></description></parameter><parameter name="code"><paramtype>uint8</paramtype></parameter><description><para>Construct an ICMP packet header.</para><para>
</para></description></constructor></class><class name="neighbor_advertisement"><inherit access="public">odtone::net::ip::icmp::header</inherit><description><para>This class represents an ICMP Neighbor Advertisement packet. </para></description><data-member name="type_value" specifiers="static"><type>const uint8</type><description><para>ICMP Neighbor Advertisement type. </para></description></data-member><data-member name="code_value" specifiers="static"><type>const uint8</type><description><para>ICMP Neighbor Advertisement type. </para></description></data-member><method-group name="public member functions"><method name="target" cv=""><type>void</type><parameter name="addr"><paramtype>const address_v6::bytes_type &amp;</paramtype><description><para>The Target Address field value. </para></description></parameter><description><para>Set the Target address field value.</para><para>
</para></description></method><method name="R" cv="const"><type>bool</type><description><para>Get the Router flag value.</para><para>
</para></description><returns><para>The Router flag value. </para></returns></method><method name="S" cv="const"><type>bool</type><description><para>Get the Solicited flag value.</para><para>
</para></description><returns><para>The Solicited flag value. </para></returns></method><method name="O" cv="const"><type>bool</type><description><para>Get the Override flag value.</para><para>
</para></description><returns><para>The Override flag value. </para></returns></method><method name="target" cv="const"><type>const address_v6::bytes_type &amp;</type><description><para>Get the Target address field value.</para><para>
</para></description><returns><para>The Target Address field value. </para></returns></method><method name="R" cv=""><type>void</type><parameter name="val"><paramtype>bool</paramtype><description><para>The Router flag value. </para></description></parameter><description><para>Set the Router flag value.</para><para>
</para></description></method><method name="S" cv=""><type>void</type><parameter name="val"><paramtype>bool</paramtype><description><para>The Solicited flag value. </para></description></parameter><description><para>Set the Solicited flag value.</para><para>
</para></description></method><method name="O" cv=""><type>void</type><parameter name="val"><paramtype>bool</paramtype><description><para>The Override flag value. </para></description></parameter><description><para>Set the Override flag value.</para><para>
</para></description></method></method-group><constructor><description><para>Construct an empty ICMP Neighbor Advertisement packet. </para></description></constructor></class><class name="neighbor_solicitation"><inherit access="public">odtone::net::ip::icmp::header</inherit><description><para>This class represents an ICMP Neighbor Solicitation packet. </para></description><data-member name="type_value" specifiers="static"><type>const uint8</type><description><para>ICMP Neighbor Solicitation type. </para></description></data-member><data-member name="code_value" specifiers="static"><type>const uint8</type><description><para>ICMP Neighbor Solicitation type. </para></description></data-member><method-group name="public member functions"><method name="target" cv=""><type>void</type><parameter name="addr"><paramtype>const address_v6::bytes_type &amp;</paramtype><description><para>The Target Address field value. </para></description></parameter><description><para>Set the Target address field value.</para><para>
</para></description></method><method name="target" cv="const"><type>const address_v6::bytes_type &amp;</type><description><para>Get the Target address field value.</para><para>
</para></description><returns><para>The Target Address field value. </para></returns></method></method-group><constructor><description><para>Construct an empty ICMP Neighbor Solicitation packet. </para></description></constructor></class><class name="router_advertisement"><inherit access="public">odtone::net::ip::icmp::header</inherit><description><para>This class represents an ICMP Router Advertisement packet. </para></description><data-member name="type_value" specifiers="static"><type>const uint8</type><description><para>ICMP Router Advertisement type. </para></description></data-member><data-member name="code_value" specifiers="static"><type>const uint8</type><description><para>ICMP Router Advertisement code. </para></description></data-member><method-group name="public member functions"><method name="current_hop_limit" cv="const"><type>uint8</type><description><para>Get the Current Hop Limit field value.</para><para>
</para></description><returns><para>The Current Hop Limit field value. </para></returns></method><method name="M" cv="const"><type>bool</type><description><para>Get the Managed Address Configuration flag value.</para><para>
</para></description><returns><para>The Managed Address Configuration flag value. </para></returns></method><method name="O" cv="const"><type>bool</type><description><para>Get the Other Configuration flag value.</para><para>
</para></description><returns><para>The Other Configuration flag value. </para></returns></method><method name="lifetime" cv="const"><type>uint16</type><description><para>Get the Lifetime field value.</para><para>
</para></description><returns><para>The Lifetime field value. </para></returns></method><method name="reachable_time" cv="const"><type>uint32</type><description><para>Get the Reachable Time field value.</para><para>
</para></description><returns><para>The Reachable Time field value. </para></returns></method><method name="retrans_timer" cv="const"><type>uint32</type><description><para>Get the Retransmission Timer field value.</para><para>
</para></description><returns><para>The Retransmission Timer field value. </para></returns></method><method name="current_hop_limit" cv=""><type>void</type><parameter name="val"><paramtype>uint8</paramtype><description><para>The Current Hop Limit field value. </para></description></parameter><description><para>Set the Current Hop Limit field value.</para><para>
</para></description></method><method name="M" cv=""><type>void</type><parameter name="val"><paramtype>bool</paramtype><description><para>The Managed Address Configuration flag value. </para></description></parameter><description><para>Set the Managed Address Configuration flag value.</para><para>
</para></description></method><method name="O" cv=""><type>void</type><parameter name="val"><paramtype>bool</paramtype><description><para>The Other Configuration flag value. </para></description></parameter><description><para>Set the Other Configuration flag value.</para><para>
</para></description></method><method name="lifetime" cv=""><type>void</type><parameter name="val"><paramtype>uint16</paramtype><description><para>The Lifetime field value. </para></description></parameter><description><para>Set the Lifetime field value.</para><para>
</para></description></method><method name="reachable_time" cv=""><type>void</type><parameter name="val"><paramtype>uint32</paramtype><description><para>The Reachable Time field value. </para></description></parameter><description><para>Set the Reachable Time field value.</para><para>
</para></description></method><method name="retrans_timer" cv=""><type>void</type><parameter name="val"><paramtype>uint32</paramtype><description><para>The Retransmission Timer field value. </para></description></parameter><description><para>Set the Retransmission Timer field value.</para><para>
</para></description></method></method-group><constructor><description><para>Construct an empty ICMP Router Advertisement packet. </para></description></constructor></class><class name="router_solicitation"><inherit access="public">odtone::net::ip::icmp::header</inherit><description><para>This class represents an ICMP Router Solicitation packet. </para></description><data-member name="type_value" specifiers="static"><type>const uint8</type><description><para>ICMP Router Solicitation type. </para></description></data-member><data-member name="code_value" specifiers="static"><type>const uint8</type><description><para>ICMP Router Solicitation type. </para></description></data-member><method-group name="public member functions"/><constructor><description><para>Construct an empty ICMP Router Solicitation packet. </para></description></constructor></class></struct></namespace></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/net/ip/icmp/icmp6_ra_packet.hpp"><namespace name="odtone"><namespace name="net"><namespace name="ip"><class name="icmp6_ra_packet"><typedef name="header"><type>odtone::ip::icmp::router_advertisement</type></typedef><typedef name="const_buffers"><type>std::vector&lt; boost::asio::const_buffers_1 &gt;</type></typedef><data-member name="ipv6_next_header" specifiers="static"><type>const uint8</type></data-member><method-group name="public member functions"><method name="operator()" cv=""><type>void</type><parameter name="current_hop_limit"><paramtype>uint8</paramtype></parameter><parameter name="lifetime"><paramtype>uint16</paramtype></parameter><parameter name="reachable_time"><paramtype>uint32</paramtype></parameter><parameter name="retrans_timer"><paramtype>uint32</paramtype></parameter></method><method name="add_option" cv=""><type>Option *</type><template>
          <template-type-parameter name="Option"/>
        </template></method><method name="add_option" cv=""><type>Option *</type><template>
          <template-type-parameter name="Option"/>
        </template><parameter name="len"><paramtype>size_t</paramtype></parameter></method><method name="notify" cv=""><type>void</type><parameter name="ph"><paramtype>const ipv6_packet::pseudo_header &amp;</paramtype></parameter></method><method name="size" cv="const"><type>size_t</type></method><method name="cbuffer" cv="const"><type>const_buffers</type></method></method-group><constructor/><constructor><parameter name="current_hop_limit"><paramtype>uint8</paramtype></parameter><parameter name="lifetime"><paramtype>uint16</paramtype></parameter><parameter name="reachable_time"><paramtype>uint32</paramtype></parameter><parameter name="retrans_timer"><paramtype>uint32</paramtype></parameter></constructor></class></namespace></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/net/ip/icmp/icmp_options.hpp"><namespace name="odtone"><namespace name="net"><namespace name="ip"><class name="opt_link_layer"><template>
      <template-nontype-parameter name="TypeValue"><type>uint8</type></template-nontype-parameter>
    </template><inherit access="public">odtone::net::ip::option</inherit><data-member name="static_size" specifiers="static"><type>const size_t</type></data-member><data-member name="type_value" specifiers="static"><type>const uint8</type></data-member><method-group name="public static functions"><method name="cast" cv=""><type>static <classname>self_type</classname> *</type><parameter name="opt"><paramtype><classname>option</classname> *</paramtype></parameter><description><para>Convert an IPv6 Options to an template class.</para><para>

</para></description><returns><para>The pointer of the returning class. </para></returns></method></method-group><method-group name="public member functions"><method name="to_mac" cv="const"><type><classname>link::address_mac</classname></type></method></method-group><constructor/><copy-assignment><parameter name="mac"><paramtype>const <classname>link::address_mac</classname> &amp;</paramtype></parameter></copy-assignment></class><class name="opt_prefix_info"><inherit access="public">odtone::net::ip::option</inherit><typedef name="bytes_type"><type>prefix_v6::bytes_type</type></typedef><data-member name="type_value" specifiers="static"><type>const uint8</type></data-member><data-member name="static_size" specifiers="static"><type>const size_t</type></data-member><method-group name="public member functions"><method name="prefix" cv="const"><type><classname>prefix_v6</classname></type></method><method name="plength" cv="const"><type>uint8</type></method><method name="L" cv="const"><type>bool</type></method><method name="A" cv="const"><type>bool</type></method><method name="valid_lifetime" cv=""><type>void</type><parameter name="val"><paramtype>uint32</paramtype></parameter></method><method name="prefered_lifetime" cv=""><type>void</type><parameter name="val"><paramtype>uint32</paramtype></parameter></method><method name="prefix" cv=""><type>void</type><parameter name="val"><paramtype>const <classname>prefix_v6</classname> &amp;</paramtype></parameter></method><method name="L" cv=""><type>void</type><parameter name="val"><paramtype>bool</paramtype></parameter></method><method name="A" cv=""><type>void</type><parameter name="val"><paramtype>bool</paramtype></parameter></method></method-group><constructor/></class><class name="opt_mtu"><inherit access="public">odtone::net::ip::option</inherit><data-member name="type_value" specifiers="static"><type>const uint8</type></data-member><data-member name="static_size" specifiers="static"><type>const size_t</type></data-member><data-member name="_reserved"><type>uint16</type></data-member><data-member name="_mtu"><type>uint32</type></data-member><method-group name="public member functions"><method name="set" cv=""><type>void</type><parameter name="val"><paramtype>uint32</paramtype></parameter></method><method name="get" cv="const"><type>uint32</type></method></method-group><constructor/></class><class name="opt_rdns"><inherit access="public">odtone::net::ip::option</inherit><typedef name="bytes_type"><type>address_v6::bytes_type</type></typedef><data-member name="type_value" specifiers="static"><type>const uint8</type></data-member><data-member name="static_size" specifiers="static"><type>const size_t</type></data-member><data-member name="reserved"><type>uint16</type></data-member><data-member name="lifetime"><type>uint32</type></data-member><data-member name="addresses"><type>bytes_type</type></data-member><method-group name="public member functions"><method name="address_count" cv="const"><type>uint</type></method></method-group><constructor><parameter name="address_count"><paramtype>uint</paramtype><default>1</default></parameter></constructor></class><typedef name="opt_source_link_layer"><type><classname>opt_link_layer</classname>&lt; 1 &gt;</type></typedef><typedef name="opt_target_link_layer"><type><classname>opt_link_layer</classname>&lt; 2 &gt;</type></typedef></namespace></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/net/ip/icmp/icmp_parser.hpp"><namespace name="odtone"><namespace name="net"><namespace name="ip"><function name="icmp_rs_parse"><type>bool</type><parameter name="buffer"><paramtype>uchar *</paramtype></parameter><parameter name="length"><paramtype>size_t</paramtype></parameter><parameter name="source_link_layer"><paramtype><classname>link::address_mac</classname> &amp;</paramtype></parameter></function></namespace></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/net/ip/options.hpp"><namespace name="odtone"><namespace name="net"><namespace name="ip"><class name="option"><description><para>This class represents the base IPv6 Options. </para></description><method-group name="public static functions"><method name="cast" cv=""><type>static <classname>option</classname> *</type><parameter name="data"><paramtype>void *</paramtype><description><para>The byte buffer. </para></description></parameter><parameter name="len"><paramtype>size_t</paramtype><description><para>The size of the byte buffer. </para></description></parameter><description><para>Convert a byte buffer to an IPv6 Options.</para><para>

</para></description><returns><para>The pointer of the returning IPv6 Options. </para></returns></method><method name="cast" cv=""><type>static T *</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="opt"><paramtype><classname>option</classname> *</paramtype></parameter><description><para>Convert an IPv6 Options to an template class.</para><para>

</para></description><returns><para>The pointer of the returning class. </para></returns></method><method name="type" cv=""><type>static uint8</type><parameter name="opt"><paramtype>const <classname>option</classname> *</paramtype></parameter><description><para>Get the IPv6 Options type.</para><para>

</para></description><returns><para>The IPv6 Options type. </para></returns></method><method name="size" cv=""><type>static size_t</type><parameter name="opt"><paramtype>const <classname>option</classname> *</paramtype></parameter><description><para>Get the IPv6 Options size.</para><para>

</para></description><returns><para>The IPv6 Options size. </para></returns></method></method-group><method-group name="public member functions"/><constructor><parameter name="type"><paramtype>uint8</paramtype><description><para>The IPv6 Options type. </para></description></parameter><parameter name="length"><paramtype>uint8</paramtype><description><para>The IPv6 Options length. </para></description></parameter><description><para>Construct an IPv6 Options.</para><para>
</para></description></constructor></class></namespace></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/net/ip/prefix.hpp"><namespace name="odtone"><namespace name="net"><namespace name="ip"><class name="prefix_v6"><description><para>This class represents the base IPv6 Prefix. </para></description><typedef name="bytes_type"><type>address_v6::bytes_type</type></typedef><method-group name="public static functions"><method name="from_string" cv=""><type>static <classname>prefix_v6</classname></type><parameter name="str"><paramtype>const std::string &amp;</paramtype><description><para>The input string. </para></description></parameter><description><para>Get the IPv6 Prefix from a string.</para><para>

</para></description><returns><para>The extracted IPv6 Prefix. </para></returns></method></method-group><method-group name="public member functions"><method name="bytes" cv="const"><type>const bytes_type &amp;</type><description><para>Get the IPv6 Prefix raw bytes.</para><para>
</para></description><returns><para>The IPv6 Prefix raw bytes. </para></returns></method><method name="length" cv="const"><type>uint</type><description><para>Get the IPv6 Prefix length.</para><para>
</para></description><returns><para>The IPv6 Prefix length. </para></returns></method><method name="conversion-operator" cv="const"><type>undefined_bool</type></method><method name="operator!" cv="const"><type>bool</type></method><method name="match" cv="const"><type>bool</type><parameter name="addr"><paramtype>const address_v6 &amp;</paramtype><description><para>The IPv6 Prefix to compare with. </para></description></parameter><description><para>Check if the IPv6 Prefix is equal to another IPv6 Prefix.</para><para>

</para></description><returns><para>True if they are equal or false otherwise. </para></returns></method></method-group><constructor><description><para>Construct an empty IPv6 Prefix. </para></description></constructor><constructor><parameter name="addr"><paramtype>const bytes_type &amp;</paramtype><description><para>The IPv6 Prefix raw bytes. </para></description></parameter><parameter name="length"><paramtype>uint</paramtype><description><para>The IPv6 Prefix byte length. </para></description></parameter><description><para>Construct an IPv6 Prefix.</para><para>
</para></description></constructor><constructor><parameter name="addr"><paramtype>const address_v6 &amp;</paramtype><description><para>The IPv6 Prefix. </para></description></parameter><parameter name="length"><paramtype>uint</paramtype><description><para>The IPv6 Prefix byte length. </para></description></parameter><description><para>Construct an IPv6 Prefix.</para><para>
</para></description></constructor><method-group name="friend functions"><method name="operator&lt;&lt;" cv=""><type>friend std::ostream &amp;</type><parameter name="out"><paramtype>std::ostream &amp;</paramtype><description><para>ostream. </para></description></parameter><parameter name="lhr"><paramtype>const <classname>prefix_v6</classname> &amp;</paramtype><description><para>The IPv6 Prefix. </para></description></parameter><description><para>IPv6 Prefix output.</para><para>

</para></description><returns><para>ostream reference. </para></returns></method></method-group></class><function name="operator!="><type>bool</type><parameter name="rhr"><paramtype>const <classname>prefix_v6</classname> &amp;</paramtype></parameter><parameter name="lhr"><paramtype>const <classname>prefix_v6</classname> &amp;</paramtype></parameter></function><function name="operator&lt;"><type>bool</type><parameter name="rhr"><paramtype>const <classname>prefix_v6</classname> &amp;</paramtype></parameter><parameter name="lhr"><paramtype>const <classname>prefix_v6</classname> &amp;</paramtype></parameter></function><function name="operator&lt;="><type>bool</type><parameter name="rhr"><paramtype>const <classname>prefix_v6</classname> &amp;</paramtype></parameter><parameter name="lhr"><paramtype>const <classname>prefix_v6</classname> &amp;</paramtype></parameter></function><function name="operator=="><type>bool</type><parameter name="rhr"><paramtype>const <classname>prefix_v6</classname> &amp;</paramtype></parameter><parameter name="lhr"><paramtype>const <classname>prefix_v6</classname> &amp;</paramtype></parameter></function><function name="operator&gt;"><type>bool</type><parameter name="rhr"><paramtype>const <classname>prefix_v6</classname> &amp;</paramtype></parameter><parameter name="lhr"><paramtype>const <classname>prefix_v6</classname> &amp;</paramtype></parameter></function><function name="operator&gt;="><type>bool</type><parameter name="rhr"><paramtype>const <classname>prefix_v6</classname> &amp;</paramtype></parameter><parameter name="lhr"><paramtype>const <classname>prefix_v6</classname> &amp;</paramtype></parameter></function></namespace></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/net/link/address_mac.hpp"><namespace name="odtone"><namespace name="net"><namespace name="link"><class name="address_mac"><description><para>This class represents the MAC address. </para></description><typedef name="bytes_type"><type>boost::array&lt; uint8, 6 &gt;</type></typedef><data-member name="_address"><type>bytes_type</type><description><para>The MAC address raw bytes. </para></description></data-member><method-group name="public static functions"><method name="from_string" cv=""><type>static <classname>address_mac</classname></type><parameter name="str"><paramtype>const char *</paramtype><description><para>The input string. </para></description></parameter><description><para>Get the MAC address from a string.</para><para>

</para></description><returns><para>The extracted MAC address. </para></returns></method><method name="from_string" cv=""><type>static <classname>address_mac</classname></type><parameter name="str"><paramtype>const std::string &amp;</paramtype><description><para>The input string. </para></description></parameter><description><para>Get the MAC address from a string.</para><para>

</para></description><returns><para>The extracted MAC address. </para></returns></method></method-group><method-group name="public member functions"><method name="operator&lt;" cv="const"><type>bool</type><parameter name="lhs"><paramtype>const <classname>address_mac</classname> &amp;</paramtype><description><para>The MAC address to compare with. </para></description></parameter><description><para>Check if the MAC address is smaller than another MAC address.</para><para>

</para></description><returns><para>True if they are equal or false otherwise. </para></returns></method><method name="to_string" cv="const"><type>std::string</type><description><para>Convert the MAC address to a string.</para><para>
</para></description><returns><para>A string representation of this object. </para></returns></method><method name="to_bytes" cv="const"><type>bytes_type</type><description><para>Get the MAC address raw bytes.</para><para>
</para></description><returns><para>The MAC address raw bytes. </para></returns></method></method-group><constructor><description><para>Construct an empty MAC address. </para></description></constructor><constructor specifiers="explicit"><parameter name="address"><paramtype>const uint8</paramtype><description><para>The MAC address raw bytes. </para></description></parameter><description><para>Construct a MAC address.</para><para>
</para></description></constructor><constructor specifiers="explicit"><parameter name="address"><paramtype>const bytes_type &amp;</paramtype><description><para>The MAC address raw bytes. </para></description></parameter><description><para>Construct a MAC address.</para><para>
</para></description></constructor><method-group name="friend functions"><method name="operator&lt;&lt;" cv=""><type>friend std::ostream &amp;</type><parameter name="out"><paramtype>std::ostream &amp;</paramtype><description><para>ostream. </para></description></parameter><parameter name="mac"><paramtype>const <classname>address_mac</classname> &amp;</paramtype><description><para>The IPv6 Prefix. </para></description></parameter><description><para>MAC address output.</para><para>

</para></description><returns><para>ostream reference. </para></returns></method></method-group></class></namespace></namespace></namespace></header></library-reference>
