<?xml version="1.0" standalone="yes"?>
<library-reference id="odtone_base_library"><title>ODTONE Base Library</title><header name="/home/carlos/Desktop/release/inc/odtone/base.hpp"><namespace name="odtone"><struct name="nullptr_t"><method-group name="public member functions"><method name="conversion-operator" cv="const"><type>T *</type><template>
          <template-type-parameter name="T"/>
        </template></method></method-group></struct><typedef name="schar"><description><para>Signed char. </para></description><type>signed char</type></typedef><typedef name="sshort"><description><para>Signed short. </para></description><type>signed short</type></typedef><typedef name="sint"><description><para>Signed integer. </para></description><type>signed int</type></typedef><typedef name="slong"><description><para>Signed long. </para></description><type>signed long</type></typedef><typedef name="sllong"><description><para>Signed long long. </para></description><type>signed long long</type></typedef><typedef name="uchar"><description><para>Unsigned char. </para></description><type>unsigned char</type></typedef><typedef name="ushort"><description><para>Unsigned short. </para></description><type>unsigned short</type></typedef><typedef name="uint"><description><para>Unsigned integer. </para></description><type>unsigned int</type></typedef><typedef name="ulong"><description><para>Unsigned long. </para></description><type>unsigned long</type></typedef><typedef name="ullong"><description><para>Unsigned long long. </para></description><type>unsigned long long</type></typedef><typedef name="uint8"><description><para>8-bit unsigned interger. </para></description><type>boost::uint8_t</type></typedef><typedef name="uint16"><description><para>16-bit unsigned interger </para></description><type>boost::uint16_t</type></typedef><typedef name="uint32"><description><para>32-bit unsigned interger </para></description><type>boost::uint32_t</type></typedef><typedef name="uint64"><description><para>64-bit unsigned interger </para></description><type>boost::uint64_t</type></typedef><typedef name="sint8"><description><para>8-bit signed interger. </para></description><type>boost::int8_t</type></typedef><typedef name="sint16"><description><para>16-bit signed interger. </para></description><type>boost::int16_t</type></typedef><typedef name="sint32"><description><para>32-bit signed interger. </para></description><type>boost::int32_t</type></typedef><typedef name="sint64"><description><para>64-bit signed interger. </para></description><type>boost::int64_t</type></typedef><typedef name="sintmax"><description><para>Max bit size signed interger. </para></description><type>boost::intmax_t</type></typedef><typedef name="uintmax"><description><para>Max bit size unsigned interger. </para></description><type>boost::uintmax_t</type></typedef><data-member name="nullptr" specifiers="static"><type>const <classname>nullptr_t</classname></type></data-member><function name="member_of"><type>MemberT *</type><template>
          <template-type-parameter name="MemberT"/>
          <template-type-parameter name="ParentT"/>
        </template><parameter name="parent"><paramtype>ParentT *</paramtype></parameter><parameter name="Member"><paramtype>MemberT ParentT::*</paramtype></parameter></function><function name="parent_of"><type>ParentT *</type><template>
          <template-type-parameter name="ParentT"/>
          <template-type-parameter name="MemberT"/>
        </template><parameter name="member"><paramtype>MemberT *</paramtype></parameter><parameter name="Member"><paramtype>MemberT ParentT::*</paramtype></parameter></function></namespace><macro name="ODTONE_SCOPED" kind="functionlike"><macro-parameter name="def"/></macro><macro name="ODTONE_COUNT_OF" kind="functionlike"><macro-parameter name="array"/></macro><macro name="ODTONE_STATIC_ASSERT" kind="functionlike"><macro-parameter name="exp"/><macro-parameter name="reason"/></macro><macro name="ODTONE_LIKELY" kind="functionlike"><macro-parameter name="x"/></macro><macro name="ODTONE_UNLIKELY" kind="functionlike"><macro-parameter name="x"/></macro><macro name="ODTONE_RETURN_ADDRESS"/><macro name="ODTONE_NORETURN_BEGIN"/><macro name="ODTONE_NORETURN_END"/><macro name="ODTONE_DEPRECATE"/><macro name="ODTONE_UNDEFINED_BOOL"/><macro name="ODTONE_UNDEFINED_BOOL_TRUE"/><macro name="ODTONE_UNDEFINED_BOOL_FALSE"/></header><header name="/home/carlos/Desktop/release/inc/odtone/bind_rv.hpp"><namespace name="odtone"><struct name="bind_rv_"><template>
      <template-type-parameter name="T"/>
    </template><method-group name="public member functions"><method name="conversion-operator" cv=""><type>T &amp;&amp;</type></method></method-group><constructor><parameter name="rv"><paramtype>const <classname>bind_rv_</classname> &amp;</paramtype></parameter></constructor><method-group name="private member functions"/><copy-assignment><parameter name=""><paramtype>const <classname>bind_rv_</classname> &amp;</paramtype></parameter></copy-assignment></struct><function name="bind_rv"><type><classname>bind_rv_</classname>&lt; T &gt; &amp;</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="rv"><paramtype>T &amp;</paramtype></parameter></function></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/buffer.hpp"><namespace name="odtone"><class name="buffer"><template>
      <template-type-parameter name="T"/>
    </template><description><para>A container for data of a specific data type with linear and finite sequence of elements. </para></description><method-group name="private member functions"><method name="ODTONE_STATIC_ASSERT" cv=""><type/><parameter name=""><paramtype>boost::is_pod&lt; T &gt;::value</paramtype></parameter><parameter name=""><paramtype>"T must be POD type"</paramtype></parameter></method></method-group><constructor><parameter name=""><paramtype>const <classname>buffer</classname> &amp;</paramtype></parameter></constructor><copy-assignment><parameter name=""><paramtype>const <classname>buffer</classname> &amp;</paramtype></parameter></copy-assignment><method-group name="public member functions"><method name="size" cv=""><type>void</type><parameter name="len"><paramtype>size_t</paramtype><description><para>The number of elements the buffer can store. </para></description></parameter><description><para>Set the number of elements the buffer can store.</para><para>
</para></description></method><method name="zero" cv=""><type>void</type><description><para>Remove all stored elements from the buffer. </para></description></method><method name="get" cv=""><type>T *</type><description><para>Get the pointer to the first element of the buffer.</para><para>
</para></description><returns><para>The pointer to the first element of the buffer. </para></returns></method><method name="get" cv="const"><type>const T *</type><description><para>Get the pointer to the first element of the buffer.</para><para>
</para></description><returns><para>The pointer to the first element of the buffer. </para></returns></method><method name="size" cv="const"><type>size_t</type><description><para>Get the number of elements the buffer can store.</para><para>
</para></description><returns><para>The number of elements the buffer can store. </para></returns></method></method-group><constructor><description><para>Construct an empty buffer. The created buffer will be empty and with zero length. </para></description></constructor><constructor><parameter name="buff"><paramtype><classname>buffer</classname> &amp;&amp;</paramtype><description><para>Buffer to copy. </para></description></parameter><description><para>Construct a buffer. The new created buffer will be a copy of another buffer.</para><para>
</para></description></constructor><constructor><parameter name="len"><paramtype>size_t</paramtype><description><para>Number of elements the buffer can store. </para></description></parameter><description><para>Construct an empty buffer. Although the created buffer is empty, it has the length defined at its creation.</para><para>
</para></description></constructor><destructor><description><para>Destruct a buffer. </para></description></destructor><copy-assignment><parameter name="buff"><paramtype><classname>buffer</classname> &amp;&amp;</paramtype><description><para>The buffer from which to copy the elements. </para></description></parameter><description><para>Copy the elements from another buffer. The elements contained in the buffer will be overwrited.</para><para>

</para></description><returns><para>The reference to the buffer. </para></returns></copy-assignment></class><class name="buffer_vla"><template>
      <template-type-parameter name="T"/>
    </template><inherit access="private">odtone::buffer&lt; uint8 &gt;</inherit><description><para>A container (buffer) for 8-bit unsigned int data type with linear and finite sequence of elements. </para></description><method-group name="private member functions"><method name="ODTONE_STATIC_ASSERT" cv=""><type/><parameter name=""><paramtype>!boost::is_enum&lt; T &gt;::value &amp;&amp;boost::is_pod&lt; T &gt;::value &amp;&amp;boost::is_class&lt; T &gt;::value</paramtype></parameter><parameter name=""><paramtype>"T must be a class/struct POD type"</paramtype></parameter></method></method-group><constructor><parameter name=""><paramtype>const <classname>buffer_vla</classname> &amp;</paramtype></parameter></constructor><copy-assignment><parameter name=""><paramtype>const <classname>buffer_vla</classname> &amp;</paramtype></parameter></copy-assignment><method-group name="public member functions"><method name="size" cv=""><type>void</type><parameter name="len"><paramtype>size_t</paramtype><description><para>The number of elements the buffer can store. </para></description></parameter><description><para>Set the number of elements the buffer can store.</para><para>
</para></description></method><method name="operator*" cv=""><type>T &amp;</type><description><para>Get the reference to the first element of the buffer.</para><para>
</para></description><returns><para>The reference to the first element of the buffer. </para></returns></method><method name="operator-&gt;" cv=""><type>T *</type><description><para>Get the pointer to the first element of the buffer.</para><para>
</para></description><returns><para>The pointer to the first element of the buffer. </para></returns></method><method name="get" cv=""><type>T *</type><description><para>Get the pointer to the first element of the buffer.</para><para>
</para></description><returns><para>The pointer to the first element of the buffer. </para></returns></method><method name="operator*" cv="const"><type>const T &amp;</type><description><para>Get the reference to the first element of the buffer.</para><para>
</para></description><returns><para>The reference to the first element of the buffer. </para></returns></method><method name="operator-&gt;" cv="const"><type>const T *</type><description><para>Get the pointer to the first element of the buffer.</para><para>
</para></description><returns><para>The pointer to the first element of the buffer. </para></returns></method><method name="get" cv="const"><type>const T *</type><description><para>Get the pointer to the first element of the buffer.</para><para>
</para></description><returns><para>The pointer to the first element of the buffer. </para></returns></method></method-group><constructor><description><para>Construct an empty buffer. The created buffer will be empty and with zero length. </para></description></constructor><constructor><parameter name="buff"><paramtype><classname>buffer_vla</classname> &amp;&amp;</paramtype><description><para>Buffer to copy. </para></description></parameter><description><para>Construct a buffer. The new created buffer will be a copy of another buffer.</para><para>
</para></description></constructor><constructor><parameter name="len"><paramtype>size_t</paramtype><description><para>Number of elements the buffer can store. </para></description></parameter><description><para>Construct an empty buffer. Although the created buffer is empty, it has the length defined at its creation.</para><para>
</para></description></constructor><copy-assignment><parameter name="buff"><paramtype><classname>buffer_vla</classname> &amp;&amp;</paramtype><description><para>The buffer from which to copy the elements. </para></description></parameter><description><para>Copy the elements from another buffer. The elements contained in the buffer will be overwrited.</para><para>

</para></description><returns><para>The reference to the buffer. </para></returns></copy-assignment></class></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/cast.hpp"><namespace name="odtone"><struct name="bad_cast"><inherit access="public">odtone::exception</inherit><description><para>Bad cast exception. </para></description></struct><struct name="bad_truncate_cast"><inherit access="public">odtone::bad_cast</inherit><description><para>Bad truncate cast exception. </para></description><method-group name="public member functions"/><constructor><description><para>Construct a bad truncate cast exception. </para></description></constructor></struct><function name="truncate_cast"><type>T</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="U"/>
        </template><parameter name="from"><paramtype>U</paramtype></parameter><description><para>Cast operation, which can convert a class object into another class type. <note><para>T and U must be an integral type.</para></note>


</para></description><returns><para>The converted object. </para></returns></function></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/debug.hpp"><namespace name="odtone"><struct name="crash_ctx"><description><para>Crash context structure. </para></description><data-member name="code"><type>bug</type><description><para>Crash bug code. </para></description></data-member><data-member name="address"><type>void *</type><description><para>Crash address. </para></description></data-member><data-member name="function"><type>const char *</type><description><para>Crash function. </para></description></data-member><data-member name="file"><type>const char *</type><description><para>Crash file. </para></description></data-member><data-member name="line"><type>uint</type><description><para>Crash line. </para></description></data-member><data-member name="expression"><type>const char *</type><description><para>Crash expression. </para></description></data-member><data-member name="context"><type>void *</type><description><para>Crash context. </para></description></data-member></struct><class name="checkpoint"><description><para>Mechanism for debugging, which allows to follow the execution states of the application. It can be viewed as a linked list of checkpoints that maintains the execution states of the application. If a crash happens, the last checkpoint will point to its occurence. </para></description><method-group name="public static functions"><method name="top" cv=""><type>static <classname>checkpoint</classname> *</type><description><para>Get the top checkpoint in the list.</para><para>
</para></description><returns><para>The top checkpoint in the list. </para></returns></method></method-group><method-group name="public member functions"><method name="previous" cv="const"><type><classname>checkpoint</classname> *</type><description><para>Get the previous checkpoint.</para><para>
</para></description><returns><para>The previous checkpoint. </para></returns></method><method name="file" cv="const"><type>const char *</type><description><para>Get the checkpoint's file name.</para><para>
</para></description><returns><para>The checkpoint's file name. </para></returns></method><method name="line" cv="const"><type>uint</type><description><para>Get the checkpoint's line number.</para><para>
</para></description><returns><para>The checkpoint's line number. </para></returns></method><method name="expression" cv="const"><type>const char *</type><description><para>Get the checkpoint's expression.</para><para>
</para></description><returns><para>The checkpoint's expression. </para></returns></method><method name="conversion-operator" cv="const"><type>bool</type></method></method-group><constructor><parameter name="file"><paramtype>const char *</paramtype><description><para>file name of the checkpoint. </para></description></parameter><parameter name="line"><paramtype>uint</paramtype><description><para>line number of the checkpoint. </para></description></parameter><parameter name="exp"><paramtype>const char *</paramtype><description><para>expression of the checkpoint. </para></description></parameter><description><para>Construct a checkpoint and add it to the checkpoint list.</para><para>
</para></description></constructor><destructor><description><para>Destruct a checkpoint and remove it from the checkpoint list. </para></description></destructor></class><enum name="bug"><enumvalue name="bug_on"><description><para>On. </para></description></enumvalue><enumvalue name="bug_assert"><description><para>Assert. </para></description></enumvalue><enumvalue name="bug_assert_ptr"><description><para>Assert pointer. </para></description></enumvalue><enumvalue name="bug_not_implemented"><description><para>Not implemented. </para></description></enumvalue><enumvalue name="bug_never_here"><description><para>Never here. </para></description></enumvalue><enumvalue name="bug_floting_point_exception"><description><para>Floating point exception. </para></description></enumvalue><enumvalue name="bug_invalid_opcode"><description><para>Invalid opcode. </para></description></enumvalue><enumvalue name="bug_terminal_interrupt"><description><para>Terminal intterrupt. </para></description></enumvalue><enumvalue name="bug_page_fault"><description><para>Page fault. </para></description></enumvalue><enumvalue name="bug_breakpoint"><description><para>Breakpoint. </para></description></enumvalue><description><para>Bug code enumeration. </para></description></enum><data-member name="k_bug_code_string"><type>char const *</type><description><para>Bug code strings. </para></description></data-member><function name="setup_crash_handler"><type>void</type><description><para>Setup the crash handler. </para></description></function><function name="crash"><type>void</type><parameter name="code"><paramtype>bug</paramtype><description><para>Crash bug code. </para></description></parameter><parameter name="function"><paramtype>const char *</paramtype><description><para>Crash function. </para></description></parameter><parameter name="file"><paramtype>const char *</paramtype><description><para>Crash file name. </para></description></parameter><parameter name="line"><paramtype>uint</paramtype><description><para>Crash line number. </para></description></parameter><parameter name="expression"><paramtype>const char *</paramtype><description><para>Crash expression. </para></description></parameter><description><para>Creates the crash context and dispatch it to its handler.</para><para>
</para></description></function><function name="crash"><type>ODTONE_NORETURN_BEGIN void</type><parameter name="ctx"><paramtype>const <classname>crash_ctx</classname> &amp;</paramtype><description><para>Crash context. </para></description></parameter><description><para>Handles the crash context.</para><para>
</para></description></function></namespace><macro name="ODTONE_SCOPED_CHECKPOINT" kind="functionlike"><macro-parameter name="doing"/></macro><macro name="ODTONE_CHECKPOINT" kind="functionlike"><macro-parameter name="doing"/></macro><macro name="ODTONE_BUG_ON" kind="functionlike"><macro-parameter name="exp"/><macro-parameter name="reason"/></macro><macro name="ODTONE_NOT_IMPLEMENTED"/><macro name="ODTONE_ASSERT" kind="functionlike"><macro-parameter name="exp"/></macro><macro name="ODTONE_DBG_SCOPED_CHECKPOINT" kind="functionlike"><macro-parameter name="x"/></macro><macro name="ODTONE_DBG_CHECKPOINT" kind="functionlike"><macro-parameter name="x"/></macro><macro name="ODTONE_NEVER_HERE"/></header><header name="/home/carlos/Desktop/release/inc/odtone/exception.hpp"><namespace name="odtone"><class name="exception"><description><para>Base class for all ODTONE exceptions. This is the base class for all exceptions thrown by the ODTONE library. You are free to derive your own exception classes, or use a different hierarchy, or to throw non-class data (e.g., fundamental types). </para></description><method-group name="public member functions"><method name="what" cv="const"><type>char const *</type><description><para>Get a string describing the general cause of the current error.</para><para>
</para></description><returns><para>A string describing the general cause of the current error. </para></returns></method></method-group><constructor><parameter name="what"><paramtype>char const *</paramtype><default>"&lt;exception&gt;"</default><description><para>General cause of the exception error description. </para></description></parameter><description><para>Constructor a new exception.</para><para>
</para></description></constructor></class></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/list_node.hpp"><namespace name="odtone"><class name="list_node"><description><para>Double linked list, which provides operations to add or remove elements, to get and swap elements and to reverse the elements order. Each node contains, besides the next-node link, a second link field pointing to the previous node in the sequence. </para></description><method-group name="public member functions"><method name="init" cv=""><type>void</type><description><para>Initialize the double linked list with a single element. </para></description></method><method name="push_front" cv=""><type>void</type><parameter name="node"><paramtype><classname>list_node</classname> *</paramtype><description><para>The element to insert in the double linked list. </para></description></parameter><description><para>Insert a new element in the first position of the double linked list.</para><para>
</para></description></method><method name="push_back" cv=""><type>void</type><parameter name="node"><paramtype><classname>list_node</classname> *</paramtype><description><para>The element to insert in the double linked list. </para></description></parameter><description><para>Insert a new element in the last position of the double linked list.</para><para>
</para></description></method><method name="pop_front" cv=""><type><classname>list_node</classname> *</type><description><para>Remove and return the first element of the double linked list.</para><para>
</para></description><returns><para>The first element of the double linked list. </para></returns></method><method name="pop_back" cv=""><type><classname>list_node</classname> *</type><description><para>Remove and return the last element of the double linked list.</para><para>
</para></description><returns><para>The last element of the double linked list. </para></returns></method><method name="front" cv=""><type><classname>list_node</classname> *</type><description><para>Return the first element of the double linked list without removing it.</para><para>
</para></description><returns><para>The first element of the double linked list. </para></returns></method><method name="back" cv=""><type><classname>list_node</classname> *</type><description><para>Return the last element of the double linked list without removing it.</para><para>
</para></description><returns><para>The last element of the double linked list. </para></returns></method><method name="front" cv="const"><type>const <classname>list_node</classname> *</type><description><para>Return the first element of the double linked list without removing it.</para><para>
</para></description><returns><para>The first element of the double linked list. </para></returns></method><method name="back" cv="const"><type>const <classname>list_node</classname> *</type><description><para>Return the last element of the double linked list without removing it.</para><para>
</para></description><returns><para>The last element of the double linked list without removing it. </para></returns></method><method name="swap" cv=""><type>void</type><parameter name="y"><paramtype><classname>list_node</classname> &amp;</paramtype><description><para>The element with which will exchange the position. </para></description></parameter><description><para>Swap the position of two elements of the double linked list.</para><para>
</para></description></method><method name="reverse" cv=""><type>void</type><description><para>Reverse the element order in the double linked list. In other words, it exchange the previous element with the next element of the checkpoint that calls this method. </para></description></method><method name="remove" cv=""><type>void</type><description><para>Remove an element from the double linked list. </para></description></method><method name="empty" cv="const"><type>bool</type><description><para>Check if the element is the single one in the double linked list.</para><para>
</para></description><returns><para>True if the element is the single one in the double linked list or false otherwise. </para></returns></method></method-group></class></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/logger.hpp"><namespace name="odtone"><class name="logger"><description><para>Mechanism for debugging, which provides logging procedures to log messages for a specific system or application component. Logger names can be arbitrary strings, but they should be based on the application that invoke it. Each logger has a level associated with it. This reflects the maximum level that the logger cares about. So, if the logger level is set to 2 it only cares about log messages belonging to level 0, 1 and 2. It also has an std::ostream object associated with it, which defines how the logger writes and formats the output. The log messages can have up to 10 arguments. </para></description><method-group name="public member functions"><method name="level" cv=""><type>void</type><parameter name="n"><paramtype>uint</paramtype><description><para>Logger level. </para></description></parameter><description><para>Set the output level. Each logger has a level associated with it. This reflects the maximum level that the logger cares about. So, if the logger level is set to 2 it only cares about log messages belonging to level 0, 1 and 2.</para><para>
</para></description></method><method name="level" cv="const"><type>uint</type><description><para>Get the level configuration. Each logger has a level associated with it. This reflects the maximum level that the logger cares about. So, if the logger level is set to 2 it only cares about log messages belonging to level 0, 1 and 2.</para><para>
</para></description><returns><para>The logger level. </para></returns></method><method name="sink" cv="const"><type>std::ostream &amp;</type><description><para>Get the std::ostream associated with the logger.</para><para>
</para></description><returns><para>The std::ostream associated with the logger. </para></returns></method><method name="operator()" cv=""><type>void</type><template>
          <template-type-parameter name="T1"/>
        </template><parameter name="level"><paramtype>uint</paramtype></parameter><parameter name="arg1"><paramtype>const T1 &amp;</paramtype></parameter><description><para>XXX </para></description></method><method name="operator()" cv=""><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
        </template><parameter name="level"><paramtype>uint</paramtype></parameter><parameter name="arg1"><paramtype>const T1 &amp;</paramtype></parameter><parameter name="arg2"><paramtype>const T2 &amp;</paramtype></parameter></method><method name="operator()" cv=""><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
        </template><parameter name="level"><paramtype>uint</paramtype></parameter><parameter name="arg1"><paramtype>const T1 &amp;</paramtype></parameter><parameter name="arg2"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="arg3"><paramtype>const T3 &amp;</paramtype></parameter></method><method name="operator()" cv=""><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
          <template-type-parameter name="T4"/>
        </template><parameter name="level"><paramtype>uint</paramtype></parameter><parameter name="arg1"><paramtype>const T1 &amp;</paramtype></parameter><parameter name="arg2"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="arg3"><paramtype>const T3 &amp;</paramtype></parameter><parameter name="arg4"><paramtype>const T4 &amp;</paramtype></parameter></method><method name="operator()" cv=""><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
          <template-type-parameter name="T4"/>
          <template-type-parameter name="T5"/>
        </template><parameter name="level"><paramtype>uint</paramtype></parameter><parameter name="arg1"><paramtype>const T1 &amp;</paramtype></parameter><parameter name="arg2"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="arg3"><paramtype>const T3 &amp;</paramtype></parameter><parameter name="arg4"><paramtype>const T4 &amp;</paramtype></parameter><parameter name="arg5"><paramtype>const T5 &amp;</paramtype></parameter></method><method name="operator()" cv=""><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
          <template-type-parameter name="T4"/>
          <template-type-parameter name="T5"/>
          <template-type-parameter name="T6"/>
        </template><parameter name="level"><paramtype>uint</paramtype></parameter><parameter name="arg1"><paramtype>const T1 &amp;</paramtype></parameter><parameter name="arg2"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="arg3"><paramtype>const T3 &amp;</paramtype></parameter><parameter name="arg4"><paramtype>const T4 &amp;</paramtype></parameter><parameter name="arg5"><paramtype>const T5 &amp;</paramtype></parameter><parameter name="arg6"><paramtype>const T6 &amp;</paramtype></parameter></method><method name="operator()" cv=""><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
          <template-type-parameter name="T4"/>
          <template-type-parameter name="T5"/>
          <template-type-parameter name="T6"/>
          <template-type-parameter name="T7"/>
        </template><parameter name="level"><paramtype>uint</paramtype></parameter><parameter name="arg1"><paramtype>const T1 &amp;</paramtype></parameter><parameter name="arg2"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="arg3"><paramtype>const T3 &amp;</paramtype></parameter><parameter name="arg4"><paramtype>const T4 &amp;</paramtype></parameter><parameter name="arg5"><paramtype>const T5 &amp;</paramtype></parameter><parameter name="arg6"><paramtype>const T6 &amp;</paramtype></parameter><parameter name="arg7"><paramtype>const T7 &amp;</paramtype></parameter></method><method name="operator()" cv=""><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
          <template-type-parameter name="T4"/>
          <template-type-parameter name="T5"/>
          <template-type-parameter name="T6"/>
          <template-type-parameter name="T7"/>
          <template-type-parameter name="T8"/>
        </template><parameter name="level"><paramtype>uint</paramtype></parameter><parameter name="arg1"><paramtype>const T1 &amp;</paramtype></parameter><parameter name="arg2"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="arg3"><paramtype>const T3 &amp;</paramtype></parameter><parameter name="arg4"><paramtype>const T4 &amp;</paramtype></parameter><parameter name="arg5"><paramtype>const T5 &amp;</paramtype></parameter><parameter name="arg6"><paramtype>const T6 &amp;</paramtype></parameter><parameter name="arg7"><paramtype>const T7 &amp;</paramtype></parameter><parameter name="arg8"><paramtype>const T8 &amp;</paramtype></parameter></method><method name="operator()" cv=""><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
          <template-type-parameter name="T4"/>
          <template-type-parameter name="T5"/>
          <template-type-parameter name="T6"/>
          <template-type-parameter name="T7"/>
          <template-type-parameter name="T8"/>
          <template-type-parameter name="T9"/>
        </template><parameter name="level"><paramtype>uint</paramtype></parameter><parameter name="arg1"><paramtype>const T1 &amp;</paramtype></parameter><parameter name="arg2"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="arg3"><paramtype>const T3 &amp;</paramtype></parameter><parameter name="arg4"><paramtype>const T4 &amp;</paramtype></parameter><parameter name="arg5"><paramtype>const T5 &amp;</paramtype></parameter><parameter name="arg6"><paramtype>const T6 &amp;</paramtype></parameter><parameter name="arg7"><paramtype>const T7 &amp;</paramtype></parameter><parameter name="arg8"><paramtype>const T8 &amp;</paramtype></parameter><parameter name="arg9"><paramtype>const T9 &amp;</paramtype></parameter></method><method name="operator()" cv=""><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
          <template-type-parameter name="T4"/>
          <template-type-parameter name="T5"/>
          <template-type-parameter name="T6"/>
          <template-type-parameter name="T7"/>
          <template-type-parameter name="T8"/>
          <template-type-parameter name="T9"/>
          <template-type-parameter name="T10"/>
        </template><parameter name="level"><paramtype>uint</paramtype></parameter><parameter name="arg1"><paramtype>const T1 &amp;</paramtype></parameter><parameter name="arg2"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="arg3"><paramtype>const T3 &amp;</paramtype></parameter><parameter name="arg4"><paramtype>const T4 &amp;</paramtype></parameter><parameter name="arg5"><paramtype>const T5 &amp;</paramtype></parameter><parameter name="arg6"><paramtype>const T6 &amp;</paramtype></parameter><parameter name="arg7"><paramtype>const T7 &amp;</paramtype></parameter><parameter name="arg8"><paramtype>const T8 &amp;</paramtype></parameter><parameter name="arg9"><paramtype>const T9 &amp;</paramtype></parameter><parameter name="arg10"><paramtype>const T10 &amp;</paramtype></parameter></method></method-group><constructor><parameter name="name"><paramtype>char const *const</paramtype><description><para>Logger's name. </para></description></parameter><parameter name="log"><paramtype><classname>logger</classname> &amp;</paramtype><description><para>Logger to copy. </para></description></parameter><description><para>Construct a logger by copying it from another logger.</para><para>
</para></description></constructor><constructor><parameter name="name"><paramtype>char const *const</paramtype><description><para>Logger's name. </para></description></parameter><parameter name="sink"><paramtype>std::ostream &amp;</paramtype><description><para>std::ostream which defines how the logger will write and format output. </para></description></parameter><description><para>Construct a logger.</para><para>
</para></description></constructor><destructor><description><para>Destruct a logger. </para></description></destructor></class></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/random.hpp"><namespace name="odtone"><namespace name="mih"><function name="srand8"><type>sint8</type><description><para>Generate a random 8-bit signed integer value.</para><para>
</para></description><returns><para>A random 8-bit signed integer value. </para></returns></function><function name="srand16"><type>sint16</type><description><para>Generate a random 16-bit signed integer value.</para><para>
</para></description><returns><para>A random 16-bit signed integer value. </para></returns></function><function name="srand32"><type>sint32</type><description><para>Generate a random 32-bit signed integer value.</para><para>
</para></description><returns><para>A random 32-bit signed integer value. </para></returns></function><function name="srand64"><type>sint64</type><description><para>Generate a random 64-bit signed integer value.</para><para>
</para></description><returns><para>A random 64-bit signed integer value. </para></returns></function><function name="rand8"><type>uint8</type><description><para>Generate a random 8-bit unsigned integer value.</para><para>
</para></description><returns><para>A random 8-bit unsigned integer value. </para></returns></function><function name="rand16"><type>uint16</type><description><para>Generate a random 16-bit unsigned integer value.</para><para>
</para></description><returns><para>A random 16-bit unsigned integer value. </para></returns></function><function name="rand32"><type>uint32</type><description><para>Generate a random 32-bit unsigned integer value.</para><para>
</para></description><returns><para>A random 32-bit unsigned integer value. </para></returns></function><function name="rand64"><type>uint64</type><description><para>Generate a random 64-bit unsigned integer value.</para><para>
</para></description><returns><para>A random 64-bit unsigned integer value. </para></returns></function></namespace></namespace></header><header name="/home/carlos/Desktop/release/inc/odtone/string.hpp"><namespace name="odtone"><typedef name="char_t"><description><para>Char. </para></description><type>char</type></typedef><typedef name="string"><description><para>String. </para></description><type>std::string</type></typedef></namespace><macro name="ODTONE_L"/></header><header name="/home/carlos/Desktop/release/inc/odtone/strutil.hpp"><namespace name="odtone"><function name="to_string_hex"><type>std::string</type><parameter name="src"><paramtype>const void *</paramtype><description><para>Value to convert. </para></description></parameter><parameter name="len"><paramtype>size_t</paramtype><description><para>Length of the value to convert. </para></description></parameter><description><para>Convert a value to hexadecimal.</para><para>

</para></description><returns><para>The converted hexadecimal value string. </para></returns></function><function name="to_string_hex"><type>std::string</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="v"><paramtype>const T &amp;</paramtype><description><para>Value to convert. </para></description></parameter><description><para>Convert a value to hexadecimal values.</para><para>

</para></description><returns><para>The converted hexadecimal value string. </para></returns></function><function name="hex_to_int"><type>uchar</type><parameter name="c"><paramtype>uchar</paramtype><description><para>Hexadecimal value. </para></description></parameter><description><para>Convert a hexadecimal value to an int.</para><para>

</para></description><returns><para>The converted int value. </para></returns></function></namespace></header></library-reference>
