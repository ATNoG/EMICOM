//==============================================================================
// Brief   : NetworkManager Device.Wireless interface adaptor
// Authors : André Prata <andreprata@av.it.pt>
//------------------------------------------------------------------------------
// ODTONE - Open Dot Twenty One
//
// Copyright (C) 2009-2012 Universidade Aveiro
// Copyright (C) 2009-2012 Instituto de Telecomunicações - Pólo Aveiro
//
// This software is distributed under a license. The full license
// agreement can be found in the file LICENSE in this distribution.
// This software may not be copied, modified, sold or distributed
// other than expressed in the named license agreement.
//
// This software is distributed without any warranty.
//==============================================================================

/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__DeviceWireless_adaptor_h__ADAPTOR_MARSHAL_H
#define __dbusxx__DeviceWireless_adaptor_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace freedesktop {
namespace NetworkManager {
namespace Device {

class Wireless_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

		Wireless_adaptor()
		: ::DBus::InterfaceAdaptor("org.freedesktop.NetworkManager.Device.Wireless")
		{
				bind_property(WirelessCapabilities, "u", true, false);
				bind_property(ActiveAccessPoint, "o", true, false);
				bind_property(Bitrate, "u", true, false);
				bind_property(Mode, "u", true, false);
				bind_property(PermHwAddress, "s", true, false);
				bind_property(HwAddress, "s", true, false);
				register_method(Wireless_adaptor, GetAccessPoints, _GetAccessPoints_stub);
		}

		::DBus::IntrospectedInterface *introspect() const 
		{
				static ::DBus::IntrospectedArgument GetAccessPoints_args[] = 
				{
						{ "access_points", "ao", false },
						{ 0, 0, 0 }
				};
				static ::DBus::IntrospectedArgument AccessPointRemoved_args[] = 
				{
						{ 0, "o", false },
						{ 0, 0, 0 }
				};
				static ::DBus::IntrospectedArgument AccessPointAdded_args[] = 
				{
						{ 0, "o", false },
						{ 0, 0, 0 }
				};
				static ::DBus::IntrospectedArgument PropertiesChanged_args[] = 
				{
						{ 0, "a{sv}", false },
						{ 0, 0, 0 }
				};
				static ::DBus::IntrospectedMethod Wireless_adaptor_methods[] = 
				{
						{ "GetAccessPoints", GetAccessPoints_args },
						{ 0, 0 }
				};
				static ::DBus::IntrospectedMethod Wireless_adaptor_signals[] = 
				{
						{ "AccessPointRemoved", AccessPointRemoved_args },
						{ "AccessPointAdded", AccessPointAdded_args },
						{ "PropertiesChanged", PropertiesChanged_args },
						{ 0, 0 }
				};
				static ::DBus::IntrospectedProperty Wireless_adaptor_properties[] = 
				{
						{ "WirelessCapabilities", "u", true, false },
						{ "ActiveAccessPoint", "o", true, false },
						{ "Bitrate", "u", true, false },
						{ "Mode", "u", true, false },
						{ "PermHwAddress", "s", true, false },
						{ "HwAddress", "s", true, false },
						{ 0, 0, 0, 0 }
				};
				static ::DBus::IntrospectedInterface Wireless_adaptor_interface = 
				{
						"org.freedesktop.NetworkManager.Device.Wireless",
						Wireless_adaptor_methods,
						Wireless_adaptor_signals,
						Wireless_adaptor_properties
				};
				return &Wireless_adaptor_interface;
		}

public:

		/* properties exposed by this interface, use
		 * property() and property(value) to get and set a particular property
		 */
		::DBus::PropertyAdaptor< uint32_t > WirelessCapabilities;
		::DBus::PropertyAdaptor< ::DBus::Path > ActiveAccessPoint;
		::DBus::PropertyAdaptor< uint32_t > Bitrate;
		::DBus::PropertyAdaptor< uint32_t > Mode;
		::DBus::PropertyAdaptor< std::string > PermHwAddress;
		::DBus::PropertyAdaptor< std::string > HwAddress;

public:

		/* methods exported by this interface,
		 * you will have to implement them in your ObjectAdaptor
		 */
		virtual std::vector< ::DBus::Path > GetAccessPoints() = 0;

public:

		/* signal emitters for this interface
		 */
		void AccessPointRemoved(const ::DBus::Path& arg1)
		{
				::DBus::SignalMessage sig("AccessPointRemoved");
				::DBus::MessageIter wi = sig.writer();
				wi << arg1;
				emit_signal(sig);
		}
		void AccessPointAdded(const ::DBus::Path& arg1)
		{
				::DBus::SignalMessage sig("AccessPointAdded");
				::DBus::MessageIter wi = sig.writer();
				wi << arg1;
				emit_signal(sig);
		}
		void PropertiesChanged(const std::map< std::string, ::DBus::Variant >& arg1)
		{
				::DBus::SignalMessage sig("PropertiesChanged");
				::DBus::MessageIter wi = sig.writer();
				wi << arg1;
				emit_signal(sig);
		}

private:

		/* unmarshalers (to unpack the DBus message before calling the actual interface method)
		 */
		::DBus::Message _GetAccessPoints_stub(const ::DBus::CallMessage &call)
		{
				//::DBus::MessageIter ri = call.reader();

				std::vector< ::DBus::Path > argout1 = GetAccessPoints();
				::DBus::ReturnMessage reply(call);
				::DBus::MessageIter wi = reply.writer();
				wi << argout1;
				return reply;
		}
};

} } } } 
#endif //__dbusxx__DeviceWireless_adaptor_h__ADAPTOR_MARSHAL_H
